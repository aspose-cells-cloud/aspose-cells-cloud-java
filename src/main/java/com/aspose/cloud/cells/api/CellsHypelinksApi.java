/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.Hyperlink;
import com.aspose.cloud.cells.model.HyperlinkResponse;
import com.aspose.cloud.cells.model.HyperlinksResponse;
import com.aspose.cloud.cells.model.SaaSposeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsHypelinksApi {
    private ApiClient apiClient;

    public CellsHypelinksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsHypelinksApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsHypelinksDeleteWorksheetHyperlink
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksDeleteWorksheetHyperlinkCall(String name, String sheetName, Integer hyperlinkIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "hyperlinkIndex" + "\\}", apiClient.escapeString(hyperlinkIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsHypelinksDeleteWorksheetHyperlinkValidateBeforeCall(String name, String sheetName, Integer hyperlinkIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsHypelinksDeleteWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsHypelinksDeleteWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'hyperlinkIndex' is set
        if (hyperlinkIndex == null) {
            throw new ApiException("Missing the required parameter 'hyperlinkIndex' when calling cellsHypelinksDeleteWorksheetHyperlink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsHypelinksDeleteWorksheetHyperlinkCall(name, sheetName, hyperlinkIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet hyperlink by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsHypelinksDeleteWorksheetHyperlink(String name, String sheetName, Integer hyperlinkIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsHypelinksDeleteWorksheetHyperlinkWithHttpInfo(name, sheetName, hyperlinkIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Delete worksheet hyperlink by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsHypelinksDeleteWorksheetHyperlinkWithHttpInfo(String name, String sheetName, Integer hyperlinkIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsHypelinksDeleteWorksheetHyperlinkValidateBeforeCall(name, sheetName, hyperlinkIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet hyperlink by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksDeleteWorksheetHyperlinkAsync(String name, String sheetName, Integer hyperlinkIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsHypelinksDeleteWorksheetHyperlinkValidateBeforeCall(name, sheetName, hyperlinkIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsHypelinksDeleteWorksheetHyperlinks
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksDeleteWorksheetHyperlinksCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsHypelinksDeleteWorksheetHyperlinksValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsHypelinksDeleteWorksheetHyperlinks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsHypelinksDeleteWorksheetHyperlinks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsHypelinksDeleteWorksheetHyperlinksCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete all hyperlinks in worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsHypelinksDeleteWorksheetHyperlinks(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsHypelinksDeleteWorksheetHyperlinksWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Delete all hyperlinks in worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsHypelinksDeleteWorksheetHyperlinksWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsHypelinksDeleteWorksheetHyperlinksValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all hyperlinks in worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksDeleteWorksheetHyperlinksAsync(String name, String sheetName, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsHypelinksDeleteWorksheetHyperlinksValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsHypelinksGetWorksheetHyperlink
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksGetWorksheetHyperlinkCall(String name, String sheetName, Integer hyperlinkIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "hyperlinkIndex" + "\\}", apiClient.escapeString(hyperlinkIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsHypelinksGetWorksheetHyperlinkValidateBeforeCall(String name, String sheetName, Integer hyperlinkIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsHypelinksGetWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsHypelinksGetWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'hyperlinkIndex' is set
        if (hyperlinkIndex == null) {
            throw new ApiException("Missing the required parameter 'hyperlinkIndex' when calling cellsHypelinksGetWorksheetHyperlink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsHypelinksGetWorksheetHyperlinkCall(name, sheetName, hyperlinkIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet hyperlink by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return HyperlinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HyperlinkResponse cellsHypelinksGetWorksheetHyperlink(String name, String sheetName, Integer hyperlinkIndex, String folder, String storage) throws ApiException {
        ApiResponse<HyperlinkResponse> resp = cellsHypelinksGetWorksheetHyperlinkWithHttpInfo(name, sheetName, hyperlinkIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet hyperlink by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;HyperlinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HyperlinkResponse> cellsHypelinksGetWorksheetHyperlinkWithHttpInfo(String name, String sheetName, Integer hyperlinkIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsHypelinksGetWorksheetHyperlinkValidateBeforeCall(name, sheetName, hyperlinkIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<HyperlinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet hyperlink by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksGetWorksheetHyperlinkAsync(String name, String sheetName, Integer hyperlinkIndex, String folder, String storage, final ApiCallback<HyperlinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsHypelinksGetWorksheetHyperlinkValidateBeforeCall(name, sheetName, hyperlinkIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HyperlinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsHypelinksGetWorksheetHyperlinks
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksGetWorksheetHyperlinksCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsHypelinksGetWorksheetHyperlinksValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsHypelinksGetWorksheetHyperlinks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsHypelinksGetWorksheetHyperlinks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsHypelinksGetWorksheetHyperlinksCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet hyperlinks.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return HyperlinksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HyperlinksResponse cellsHypelinksGetWorksheetHyperlinks(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<HyperlinksResponse> resp = cellsHypelinksGetWorksheetHyperlinksWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet hyperlinks.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;HyperlinksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HyperlinksResponse> cellsHypelinksGetWorksheetHyperlinksWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsHypelinksGetWorksheetHyperlinksValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<HyperlinksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet hyperlinks. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksGetWorksheetHyperlinksAsync(String name, String sheetName, String folder, String storage, final ApiCallback<HyperlinksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsHypelinksGetWorksheetHyperlinksValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HyperlinksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsHypelinksPostWorksheetHyperlink
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param hyperlink Hyperlink object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksPostWorksheetHyperlinkCall(String name, String sheetName, Integer hyperlinkIndex, Hyperlink hyperlink, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hyperlink;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "hyperlinkIndex" + "\\}", apiClient.escapeString(hyperlinkIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsHypelinksPostWorksheetHyperlinkValidateBeforeCall(String name, String sheetName, Integer hyperlinkIndex, Hyperlink hyperlink, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsHypelinksPostWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsHypelinksPostWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'hyperlinkIndex' is set
        if (hyperlinkIndex == null) {
            throw new ApiException("Missing the required parameter 'hyperlinkIndex' when calling cellsHypelinksPostWorksheetHyperlink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsHypelinksPostWorksheetHyperlinkCall(name, sheetName, hyperlinkIndex, hyperlink, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update worksheet hyperlink by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param hyperlink Hyperlink object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return HyperlinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HyperlinkResponse cellsHypelinksPostWorksheetHyperlink(String name, String sheetName, Integer hyperlinkIndex, Hyperlink hyperlink, String folder, String storage) throws ApiException {
        ApiResponse<HyperlinkResponse> resp = cellsHypelinksPostWorksheetHyperlinkWithHttpInfo(name, sheetName, hyperlinkIndex, hyperlink, folder, storage);
        return resp.getData();
    }

    /**
     * Update worksheet hyperlink by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param hyperlink Hyperlink object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;HyperlinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HyperlinkResponse> cellsHypelinksPostWorksheetHyperlinkWithHttpInfo(String name, String sheetName, Integer hyperlinkIndex, Hyperlink hyperlink, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsHypelinksPostWorksheetHyperlinkValidateBeforeCall(name, sheetName, hyperlinkIndex, hyperlink, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<HyperlinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update worksheet hyperlink by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param hyperlink Hyperlink object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksPostWorksheetHyperlinkAsync(String name, String sheetName, Integer hyperlinkIndex, Hyperlink hyperlink, String folder, String storage, final ApiCallback<HyperlinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsHypelinksPostWorksheetHyperlinkValidateBeforeCall(name, sheetName, hyperlinkIndex, hyperlink, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HyperlinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsHypelinksPutWorksheetHyperlink
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param firstRow  (required)
     * @param firstColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param address  (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksPutWorksheetHyperlinkCall(String name, String sheetName, Integer firstRow, Integer firstColumn, Integer totalRows, Integer totalColumns, String address, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstRow", firstRow));
        if (firstColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstColumn", firstColumn));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (totalColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalColumns", totalColumns));
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsHypelinksPutWorksheetHyperlinkValidateBeforeCall(String name, String sheetName, Integer firstRow, Integer firstColumn, Integer totalRows, Integer totalColumns, String address, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'firstRow' is set
        if (firstRow == null) {
            throw new ApiException("Missing the required parameter 'firstRow' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'firstColumn' is set
        if (firstColumn == null) {
            throw new ApiException("Missing the required parameter 'firstColumn' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'totalRows' is set
        if (totalRows == null) {
            throw new ApiException("Missing the required parameter 'totalRows' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'totalColumns' is set
        if (totalColumns == null) {
            throw new ApiException("Missing the required parameter 'totalColumns' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsHypelinksPutWorksheetHyperlinkCall(name, sheetName, firstRow, firstColumn, totalRows, totalColumns, address, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add worksheet hyperlink.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param firstRow  (required)
     * @param firstColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param address  (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return HyperlinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HyperlinkResponse cellsHypelinksPutWorksheetHyperlink(String name, String sheetName, Integer firstRow, Integer firstColumn, Integer totalRows, Integer totalColumns, String address, String folder, String storage) throws ApiException {
        ApiResponse<HyperlinkResponse> resp = cellsHypelinksPutWorksheetHyperlinkWithHttpInfo(name, sheetName, firstRow, firstColumn, totalRows, totalColumns, address, folder, storage);
        return resp.getData();
    }

    /**
     * Add worksheet hyperlink.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param firstRow  (required)
     * @param firstColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param address  (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;HyperlinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HyperlinkResponse> cellsHypelinksPutWorksheetHyperlinkWithHttpInfo(String name, String sheetName, Integer firstRow, Integer firstColumn, Integer totalRows, Integer totalColumns, String address, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsHypelinksPutWorksheetHyperlinkValidateBeforeCall(name, sheetName, firstRow, firstColumn, totalRows, totalColumns, address, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<HyperlinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add worksheet hyperlink. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param firstRow  (required)
     * @param firstColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param address  (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksPutWorksheetHyperlinkAsync(String name, String sheetName, Integer firstRow, Integer firstColumn, Integer totalRows, Integer totalColumns, String address, String folder, String storage, final ApiCallback<HyperlinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsHypelinksPutWorksheetHyperlinkValidateBeforeCall(name, sheetName, firstRow, firstColumn, totalRows, totalColumns, address, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HyperlinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
