/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.ConditionalFormattingResponse;
import com.aspose.cloud.cells.model.ConditionalFormattingsResponse;
import com.aspose.cloud.cells.model.FormatCondition;
import com.aspose.cloud.cells.model.SaaSposeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsConditionalFormattingsApi {
    private ApiClient apiClient;

    public CellsConditionalFormattingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsConditionalFormattingsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsConditionalFormattingsDeleteWorksheetConditionalFormatting
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingCall(String name, String sheetName, Integer index, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingValidateBeforeCall(String name, String sheetName, Integer index, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormatting(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormatting(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormatting(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingCall(name, sheetName, index, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove conditional formatting
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsConditionalFormattingsDeleteWorksheetConditionalFormatting(String name, String sheetName, Integer index, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo(name, sheetName, index, folder, storage);
        return resp.getData();
    }

    /**
     * Remove conditional formatting
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo(String name, String sheetName, Integer index, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingValidateBeforeCall(name, sheetName, index, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove conditional formatting (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsync(String name, String sheetName, Integer index, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingValidateBeforeCall(name, sheetName, index, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea
     * @param name  (required)
     * @param sheetName  (required)
     * @param startRow  (required)
     * @param startColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/area"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (totalColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalColumns", totalColumns));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaValidateBeforeCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(Async)");
        }
        
        // verify the required parameter 'startRow' is set
        if (startRow == null) {
            throw new ApiException("Missing the required parameter 'startRow' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(Async)");
        }
        
        // verify the required parameter 'startColumn' is set
        if (startColumn == null) {
            throw new ApiException("Missing the required parameter 'startColumn' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(Async)");
        }
        
        // verify the required parameter 'totalRows' is set
        if (totalRows == null) {
            throw new ApiException("Missing the required parameter 'totalRows' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(Async)");
        }
        
        // verify the required parameter 'totalColumns' is set
        if (totalColumns == null) {
            throw new ApiException("Missing the required parameter 'totalColumns' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove cell area from conditional formatting.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param startRow  (required)
     * @param startColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage);
        return resp.getData();
    }

    /**
     * Remove cell area from conditional formatting.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param startRow  (required)
     * @param startColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaValidateBeforeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove cell area from conditional formatting. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param startRow  (required)
     * @param startColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsync(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaValidateBeforeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsDeleteWorksheetConditionalFormattings
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattings(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clear all condition formattings
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsConditionalFormattingsDeleteWorksheetConditionalFormattings(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Clear all condition formattings
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clear all condition formattings (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsGetWorksheetConditionalFormatting
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsGetWorksheetConditionalFormattingCall(String name, String sheetName, Integer index, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsGetWorksheetConditionalFormattingValidateBeforeCall(String name, String sheetName, Integer index, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsGetWorksheetConditionalFormatting(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsGetWorksheetConditionalFormatting(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsConditionalFormattingsGetWorksheetConditionalFormatting(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsGetWorksheetConditionalFormattingCall(name, sheetName, index, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get conditional formatting
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ConditionalFormattingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConditionalFormattingResponse cellsConditionalFormattingsGetWorksheetConditionalFormatting(String name, String sheetName, Integer index, String folder, String storage) throws ApiException {
        ApiResponse<ConditionalFormattingResponse> resp = cellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo(name, sheetName, index, folder, storage);
        return resp.getData();
    }

    /**
     * Get conditional formatting
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ConditionalFormattingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConditionalFormattingResponse> cellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo(String name, String sheetName, Integer index, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsGetWorksheetConditionalFormattingValidateBeforeCall(name, sheetName, index, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ConditionalFormattingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get conditional formatting (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsGetWorksheetConditionalFormattingAsync(String name, String sheetName, Integer index, String folder, String storage, final ApiCallback<ConditionalFormattingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsGetWorksheetConditionalFormattingValidateBeforeCall(name, sheetName, index, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConditionalFormattingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsGetWorksheetConditionalFormattings
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsGetWorksheetConditionalFormattingsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsGetWorksheetConditionalFormattingsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsGetWorksheetConditionalFormattings(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsGetWorksheetConditionalFormattings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsGetWorksheetConditionalFormattingsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get conditional formattings 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ConditionalFormattingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConditionalFormattingsResponse cellsConditionalFormattingsGetWorksheetConditionalFormattings(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<ConditionalFormattingsResponse> resp = cellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Get conditional formattings 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ConditionalFormattingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConditionalFormattingsResponse> cellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsGetWorksheetConditionalFormattingsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ConditionalFormattingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get conditional formattings  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsGetWorksheetConditionalFormattingsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<ConditionalFormattingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsGetWorksheetConditionalFormattingsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConditionalFormattingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsPutWorksheetConditionalFormatting
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellArea  (required)
     * @param formatcondition  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetConditionalFormattingCall(String name, String sheetName, String cellArea, FormatCondition formatcondition, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = formatcondition;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellArea != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellArea", cellArea));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetConditionalFormattingValidateBeforeCall(String name, String sheetName, String cellArea, FormatCondition formatcondition, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsPutWorksheetConditionalFormatting(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsPutWorksheetConditionalFormatting(Async)");
        }
        
        // verify the required parameter 'cellArea' is set
        if (cellArea == null) {
            throw new ApiException("Missing the required parameter 'cellArea' when calling cellsConditionalFormattingsPutWorksheetConditionalFormatting(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetConditionalFormattingCall(name, sheetName, cellArea, formatcondition, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a condition formatting.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellArea  (required)
     * @param formatcondition  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsConditionalFormattingsPutWorksheetConditionalFormatting(String name, String sheetName, String cellArea, FormatCondition formatcondition, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo(name, sheetName, cellArea, formatcondition, folder, storage);
        return resp.getData();
    }

    /**
     * Add a condition formatting.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellArea  (required)
     * @param formatcondition  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo(String name, String sheetName, String cellArea, FormatCondition formatcondition, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetConditionalFormattingValidateBeforeCall(name, sheetName, cellArea, formatcondition, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a condition formatting. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellArea  (required)
     * @param formatcondition  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetConditionalFormattingAsync(String name, String sheetName, String cellArea, FormatCondition formatcondition, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetConditionalFormattingValidateBeforeCall(name, sheetName, cellArea, formatcondition, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsPutWorksheetFormatCondition
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionCall(String name, String sheetName, Integer index, String cellArea, String type, String operatorType, String formula1, String formula2, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellArea != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellArea", cellArea));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (operatorType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "operatorType", operatorType));
        if (formula1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "formula1", formula1));
        if (formula2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "formula2", formula2));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionValidateBeforeCall(String name, String sheetName, Integer index, String cellArea, String type, String operatorType, String formula1, String formula2, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'cellArea' is set
        if (cellArea == null) {
            throw new ApiException("Missing the required parameter 'cellArea' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'operatorType' is set
        if (operatorType == null) {
            throw new ApiException("Missing the required parameter 'operatorType' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'formula1' is set
        if (formula1 == null) {
            throw new ApiException("Missing the required parameter 'formula1' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'formula2' is set
        if (formula2 == null) {
            throw new ApiException("Missing the required parameter 'formula2' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionCall(name, sheetName, index, cellArea, type, operatorType, formula1, formula2, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a format condition.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsConditionalFormattingsPutWorksheetFormatCondition(String name, String sheetName, Integer index, String cellArea, String type, String operatorType, String formula1, String formula2, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo(name, sheetName, index, cellArea, type, operatorType, formula1, formula2, folder, storage);
        return resp.getData();
    }

    /**
     * Add a format condition.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo(String name, String sheetName, Integer index, String cellArea, String type, String operatorType, String formula1, String formula2, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionValidateBeforeCall(name, sheetName, index, cellArea, type, operatorType, formula1, formula2, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a format condition. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionAsync(String name, String sheetName, Integer index, String cellArea, String type, String operatorType, String formula1, String formula2, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionValidateBeforeCall(name, sheetName, index, cellArea, type, operatorType, formula1, formula2, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsPutWorksheetFormatConditionArea
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionAreaCall(String name, String sheetName, Integer index, String cellArea, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/area"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellArea != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellArea", cellArea));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionAreaValidateBeforeCall(String name, String sheetName, Integer index, String cellArea, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea(Async)");
        }
        
        // verify the required parameter 'cellArea' is set
        if (cellArea == null) {
            throw new ApiException("Missing the required parameter 'cellArea' when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionAreaCall(name, sheetName, index, cellArea, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * add a cell area for format condition             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsConditionalFormattingsPutWorksheetFormatConditionArea(String name, String sheetName, Integer index, String cellArea, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo(name, sheetName, index, cellArea, folder, storage);
        return resp.getData();
    }

    /**
     * add a cell area for format condition             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo(String name, String sheetName, Integer index, String cellArea, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionAreaValidateBeforeCall(name, sheetName, index, cellArea, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * add a cell area for format condition              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionAreaAsync(String name, String sheetName, Integer index, String cellArea, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionAreaValidateBeforeCall(name, sheetName, index, cellArea, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsPutWorksheetFormatConditionCondition
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionConditionCall(String name, String sheetName, Integer index, String type, String operatorType, String formula1, String formula2, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/condition"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (operatorType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "operatorType", operatorType));
        if (formula1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "formula1", formula1));
        if (formula2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "formula2", formula2));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionConditionValidateBeforeCall(String name, String sheetName, Integer index, String type, String operatorType, String formula1, String formula2, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        // verify the required parameter 'operatorType' is set
        if (operatorType == null) {
            throw new ApiException("Missing the required parameter 'operatorType' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        // verify the required parameter 'formula1' is set
        if (formula1 == null) {
            throw new ApiException("Missing the required parameter 'formula1' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        // verify the required parameter 'formula2' is set
        if (formula2 == null) {
            throw new ApiException("Missing the required parameter 'formula2' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionConditionCall(name, sheetName, index, type, operatorType, formula1, formula2, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a condition for format condition.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsConditionalFormattingsPutWorksheetFormatConditionCondition(String name, String sheetName, Integer index, String type, String operatorType, String formula1, String formula2, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo(name, sheetName, index, type, operatorType, formula1, formula2, folder, storage);
        return resp.getData();
    }

    /**
     * Add a condition for format condition.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo(String name, String sheetName, Integer index, String type, String operatorType, String formula1, String formula2, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionConditionValidateBeforeCall(name, sheetName, index, type, operatorType, formula1, formula2, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a condition for format condition. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionConditionAsync(String name, String sheetName, Integer index, String type, String operatorType, String formula1, String formula2, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionConditionValidateBeforeCall(name, sheetName, index, type, operatorType, formula1, formula2, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
