/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.AutoFitterOptions;
import com.aspose.cloud.cells.model.CalculationOptions;
import java.io.File;
import com.aspose.cloud.cells.model.ImportOption;
import com.aspose.cloud.cells.model.NameResponse;
import com.aspose.cloud.cells.model.NamesResponse;
import com.aspose.cloud.cells.model.PasswordRequest;
import com.aspose.cloud.cells.model.RangeValueResponse;
import com.aspose.cloud.cells.model.SaaSposeResponse;
import com.aspose.cloud.cells.model.SplitResultResponse;
import com.aspose.cloud.cells.model.StyleResponse;
import com.aspose.cloud.cells.model.TextItemsResponse;
import com.aspose.cloud.cells.model.WorkbookEncryptionRequest;
import com.aspose.cloud.cells.model.WorkbookProtectionRequest;
import com.aspose.cloud.cells.model.WorkbookReplaceResponse;
import com.aspose.cloud.cells.model.WorkbookResponse;
import com.aspose.cloud.cells.model.WorkbookSettings;
import com.aspose.cloud.cells.model.WorkbookSettingsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsWorkbookApi {
    private ApiClient apiClient;

    public CellsWorkbookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsWorkbookApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsWorkbookDeleteDecryptDocument
     * @param name The document name. (required)
     * @param encryption Encryption settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteDecryptDocumentCall(String name, WorkbookEncryptionRequest encryption, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = encryption;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/encryption"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookDeleteDecryptDocumentValidateBeforeCall(String name, WorkbookEncryptionRequest encryption, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookDeleteDecryptDocument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookDeleteDecryptDocumentCall(name, encryption, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Decrypt document.
     * 
     * @param name The document name. (required)
     * @param encryption Encryption settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorkbookDeleteDecryptDocument(String name, WorkbookEncryptionRequest encryption, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorkbookDeleteDecryptDocumentWithHttpInfo(name, encryption, folder, storage);
        return resp.getData();
    }

    /**
     * Decrypt document.
     * 
     * @param name The document name. (required)
     * @param encryption Encryption settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorkbookDeleteDecryptDocumentWithHttpInfo(String name, WorkbookEncryptionRequest encryption, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookDeleteDecryptDocumentValidateBeforeCall(name, encryption, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Decrypt document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param encryption Encryption settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteDecryptDocumentAsync(String name, WorkbookEncryptionRequest encryption, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookDeleteDecryptDocumentValidateBeforeCall(name, encryption, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookDeleteDocumentUnprotectFromChanges
     * @param name The document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteDocumentUnprotectFromChangesCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/writeProtection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookDeleteDocumentUnprotectFromChangesValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookDeleteDocumentUnprotectFromChanges(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookDeleteDocumentUnprotectFromChangesCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unprotect document from changes.
     * 
     * @param name The document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorkbookDeleteDocumentUnprotectFromChanges(String name, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorkbookDeleteDocumentUnprotectFromChangesWithHttpInfo(name, folder, storage);
        return resp.getData();
    }

    /**
     * Unprotect document from changes.
     * 
     * @param name The document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorkbookDeleteDocumentUnprotectFromChangesWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookDeleteDocumentUnprotectFromChangesValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unprotect document from changes. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteDocumentUnprotectFromChangesAsync(String name, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookDeleteDocumentUnprotectFromChangesValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookDeleteUnprotectDocument
     * @param name The document name. (required)
     * @param protection Protection settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteUnprotectDocumentCall(String name, WorkbookProtectionRequest protection, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = protection;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/protection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookDeleteUnprotectDocumentValidateBeforeCall(String name, WorkbookProtectionRequest protection, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookDeleteUnprotectDocument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookDeleteUnprotectDocumentCall(name, protection, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unprotect document.
     * 
     * @param name The document name. (required)
     * @param protection Protection settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorkbookDeleteUnprotectDocument(String name, WorkbookProtectionRequest protection, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorkbookDeleteUnprotectDocumentWithHttpInfo(name, protection, folder, storage);
        return resp.getData();
    }

    /**
     * Unprotect document.
     * 
     * @param name The document name. (required)
     * @param protection Protection settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorkbookDeleteUnprotectDocumentWithHttpInfo(String name, WorkbookProtectionRequest protection, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookDeleteUnprotectDocumentValidateBeforeCall(name, protection, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unprotect document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param protection Protection settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteUnprotectDocumentAsync(String name, WorkbookProtectionRequest protection, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookDeleteUnprotectDocumentValidateBeforeCall(name, protection, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookDeleteWorkbookName
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookNameCall(String name, String nameName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/names/{nameName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "nameName" + "\\}", apiClient.escapeString(nameName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookNameValidateBeforeCall(String name, String nameName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookDeleteWorkbookName(Async)");
        }
        
        // verify the required parameter 'nameName' is set
        if (nameName == null) {
            throw new ApiException("Missing the required parameter 'nameName' when calling cellsWorkbookDeleteWorkbookName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookNameCall(name, nameName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clean workbook&#39;s names.
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorkbookDeleteWorkbookName(String name, String nameName, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorkbookDeleteWorkbookNameWithHttpInfo(name, nameName, folder, storage);
        return resp.getData();
    }

    /**
     * Clean workbook&#39;s names.
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorkbookDeleteWorkbookNameWithHttpInfo(String name, String nameName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookNameValidateBeforeCall(name, nameName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clean workbook&#39;s names. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookNameAsync(String name, String nameName, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookNameValidateBeforeCall(name, nameName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookDeleteWorkbookNames
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookNamesCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/names"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookNamesValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookDeleteWorkbookNames(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookNamesCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clean workbook&#39;s names.
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorkbookDeleteWorkbookNames(String name, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorkbookDeleteWorkbookNamesWithHttpInfo(name, folder, storage);
        return resp.getData();
    }

    /**
     * Clean workbook&#39;s names.
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorkbookDeleteWorkbookNamesWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookNamesValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clean workbook&#39;s names. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookNamesAsync(String name, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookNamesValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbook
     * @param name The document name. (required)
     * @param password The document password. (optional)
     * @param format The exported file format. (optional)
     * @param isAutoFit Set document rows to be autofit. (optional, default to false)
     * @param onlySaveTable Only save table data. (optional, default to false)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param outPath The document output folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookCall(String name, String password, String format, Boolean isAutoFit, Boolean onlySaveTable, String folder, String storage, String outPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "password", password));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (isAutoFit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isAutoFit", isAutoFit));
        if (onlySaveTable != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "onlySaveTable", onlySaveTable));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "outPath", outPath));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookValidateBeforeCall(String name, String password, String format, Boolean isAutoFit, Boolean onlySaveTable, String folder, String storage, String outPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbook(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookCall(name, password, format, isAutoFit, onlySaveTable, folder, storage, outPath, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read workbook info or export.
     * 
     * @param name The document name. (required)
     * @param password The document password. (optional)
     * @param format The exported file format. (optional)
     * @param isAutoFit Set document rows to be autofit. (optional, default to false)
     * @param onlySaveTable Only save table data. (optional, default to false)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param outPath The document output folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsWorkbookGetWorkbook(String name, String password, String format, Boolean isAutoFit, Boolean onlySaveTable, String folder, String storage, String outPath) throws ApiException {
        ApiResponse<File> resp = cellsWorkbookGetWorkbookWithHttpInfo(name, password, format, isAutoFit, onlySaveTable, folder, storage, outPath);
        return resp.getData();
    }

    /**
     * Read workbook info or export.
     * 
     * @param name The document name. (required)
     * @param password The document password. (optional)
     * @param format The exported file format. (optional)
     * @param isAutoFit Set document rows to be autofit. (optional, default to false)
     * @param onlySaveTable Only save table data. (optional, default to false)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param outPath The document output folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsWorkbookGetWorkbookWithHttpInfo(String name, String password, String format, Boolean isAutoFit, Boolean onlySaveTable, String folder, String storage, String outPath) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookValidateBeforeCall(name, password, format, isAutoFit, onlySaveTable, folder, storage, outPath, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read workbook info or export. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param password The document password. (optional)
     * @param format The exported file format. (optional)
     * @param isAutoFit Set document rows to be autofit. (optional, default to false)
     * @param onlySaveTable Only save table data. (optional, default to false)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param outPath The document output folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookAsync(String name, String password, String format, Boolean isAutoFit, Boolean onlySaveTable, String folder, String storage, String outPath, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookValidateBeforeCall(name, password, format, isAutoFit, onlySaveTable, folder, storage, outPath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbookDefaultStyle
     * @param name The workbook name. (required)
     * @param folder The document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookDefaultStyleCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/defaultstyle"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookDefaultStyleValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbookDefaultStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookDefaultStyleCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read workbook default style info.
     * 
     * @param name The workbook name. (required)
     * @param folder The document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return StyleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StyleResponse cellsWorkbookGetWorkbookDefaultStyle(String name, String folder, String storage) throws ApiException {
        ApiResponse<StyleResponse> resp = cellsWorkbookGetWorkbookDefaultStyleWithHttpInfo(name, folder, storage);
        return resp.getData();
    }

    /**
     * Read workbook default style info.
     * 
     * @param name The workbook name. (required)
     * @param folder The document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;StyleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StyleResponse> cellsWorkbookGetWorkbookDefaultStyleWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookDefaultStyleValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<StyleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read workbook default style info. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param folder The document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookDefaultStyleAsync(String name, String folder, String storage, final ApiCallback<StyleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookDefaultStyleValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StyleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbookName
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookNameCall(String name, String nameName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/names/{nameName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "nameName" + "\\}", apiClient.escapeString(nameName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookNameValidateBeforeCall(String name, String nameName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbookName(Async)");
        }
        
        // verify the required parameter 'nameName' is set
        if (nameName == null) {
            throw new ApiException("Missing the required parameter 'nameName' when calling cellsWorkbookGetWorkbookName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNameCall(name, nameName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read workbook&#39;s name.
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return NameResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameResponse cellsWorkbookGetWorkbookName(String name, String nameName, String folder, String storage) throws ApiException {
        ApiResponse<NameResponse> resp = cellsWorkbookGetWorkbookNameWithHttpInfo(name, nameName, folder, storage);
        return resp.getData();
    }

    /**
     * Read workbook&#39;s name.
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;NameResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameResponse> cellsWorkbookGetWorkbookNameWithHttpInfo(String name, String nameName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNameValidateBeforeCall(name, nameName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<NameResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read workbook&#39;s name. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookNameAsync(String name, String nameName, String folder, String storage, final ApiCallback<NameResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNameValidateBeforeCall(name, nameName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbookNameValue
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookNameValueCall(String name, String nameName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/names/{nameName}/value"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "nameName" + "\\}", apiClient.escapeString(nameName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookNameValueValidateBeforeCall(String name, String nameName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbookNameValue(Async)");
        }
        
        // verify the required parameter 'nameName' is set
        if (nameName == null) {
            throw new ApiException("Missing the required parameter 'nameName' when calling cellsWorkbookGetWorkbookNameValue(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNameValueCall(name, nameName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get workbook&#39;s name value.
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return RangeValueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RangeValueResponse cellsWorkbookGetWorkbookNameValue(String name, String nameName, String folder, String storage) throws ApiException {
        ApiResponse<RangeValueResponse> resp = cellsWorkbookGetWorkbookNameValueWithHttpInfo(name, nameName, folder, storage);
        return resp.getData();
    }

    /**
     * Get workbook&#39;s name value.
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;RangeValueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RangeValueResponse> cellsWorkbookGetWorkbookNameValueWithHttpInfo(String name, String nameName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNameValueValidateBeforeCall(name, nameName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<RangeValueResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get workbook&#39;s name value. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookNameValueAsync(String name, String nameName, String folder, String storage, final ApiCallback<RangeValueResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNameValueValidateBeforeCall(name, nameName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RangeValueResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbookNames
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookNamesCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/names"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookNamesValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbookNames(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNamesCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read workbook&#39;s names.
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return NamesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NamesResponse cellsWorkbookGetWorkbookNames(String name, String folder, String storage) throws ApiException {
        ApiResponse<NamesResponse> resp = cellsWorkbookGetWorkbookNamesWithHttpInfo(name, folder, storage);
        return resp.getData();
    }

    /**
     * Read workbook&#39;s names.
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;NamesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NamesResponse> cellsWorkbookGetWorkbookNamesWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNamesValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<NamesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read workbook&#39;s names. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookNamesAsync(String name, String folder, String storage, final ApiCallback<NamesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNamesValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NamesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbookSettings
     * @param name Document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookSettingsCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/settings"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookSettingsValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbookSettings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookSettingsCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Workbook Settings DTO
     * 
     * @param name Document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return WorkbookSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkbookSettingsResponse cellsWorkbookGetWorkbookSettings(String name, String folder, String storage) throws ApiException {
        ApiResponse<WorkbookSettingsResponse> resp = cellsWorkbookGetWorkbookSettingsWithHttpInfo(name, folder, storage);
        return resp.getData();
    }

    /**
     * Get Workbook Settings DTO
     * 
     * @param name Document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;WorkbookSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkbookSettingsResponse> cellsWorkbookGetWorkbookSettingsWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookSettingsValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<WorkbookSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Workbook Settings DTO (asynchronously)
     * 
     * @param name Document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookSettingsAsync(String name, String folder, String storage, final ApiCallback<WorkbookSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookSettingsValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkbookSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbookTextItems
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookTextItemsCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/textItems"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookTextItemsValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbookTextItems(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookTextItemsCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read workbook&#39;s text items.
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return TextItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextItemsResponse cellsWorkbookGetWorkbookTextItems(String name, String folder, String storage) throws ApiException {
        ApiResponse<TextItemsResponse> resp = cellsWorkbookGetWorkbookTextItemsWithHttpInfo(name, folder, storage);
        return resp.getData();
    }

    /**
     * Read workbook&#39;s text items.
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;TextItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextItemsResponse> cellsWorkbookGetWorkbookTextItemsWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookTextItemsValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read workbook&#39;s text items. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookTextItemsAsync(String name, String folder, String storage, final ApiCallback<TextItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookTextItemsValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostAutofitWorkbookRows
     * @param name Document name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostAutofitWorkbookRowsCall(String name, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autoFitterOptions;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/autofitrows"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (endRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endRow", endRow));
        if (onlyAuto != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "onlyAuto", onlyAuto));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostAutofitWorkbookRowsValidateBeforeCall(String name, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostAutofitWorkbookRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostAutofitWorkbookRowsCall(name, autoFitterOptions, startRow, endRow, onlyAuto, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Autofit workbook rows.
     * 
     * @param name Document name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorkbookPostAutofitWorkbookRows(String name, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorkbookPostAutofitWorkbookRowsWithHttpInfo(name, autoFitterOptions, startRow, endRow, onlyAuto, folder, storage);
        return resp.getData();
    }

    /**
     * Autofit workbook rows.
     * 
     * @param name Document name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorkbookPostAutofitWorkbookRowsWithHttpInfo(String name, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostAutofitWorkbookRowsValidateBeforeCall(name, autoFitterOptions, startRow, endRow, onlyAuto, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Autofit workbook rows. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostAutofitWorkbookRowsAsync(String name, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostAutofitWorkbookRowsValidateBeforeCall(name, autoFitterOptions, startRow, endRow, onlyAuto, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostEncryptDocument
     * @param name The document name. (required)
     * @param encryption Encryption parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostEncryptDocumentCall(String name, WorkbookEncryptionRequest encryption, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = encryption;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/encryption"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostEncryptDocumentValidateBeforeCall(String name, WorkbookEncryptionRequest encryption, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostEncryptDocument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostEncryptDocumentCall(name, encryption, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Encript document.
     * 
     * @param name The document name. (required)
     * @param encryption Encryption parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorkbookPostEncryptDocument(String name, WorkbookEncryptionRequest encryption, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorkbookPostEncryptDocumentWithHttpInfo(name, encryption, folder, storage);
        return resp.getData();
    }

    /**
     * Encript document.
     * 
     * @param name The document name. (required)
     * @param encryption Encryption parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorkbookPostEncryptDocumentWithHttpInfo(String name, WorkbookEncryptionRequest encryption, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostEncryptDocumentValidateBeforeCall(name, encryption, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Encript document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param encryption Encryption parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostEncryptDocumentAsync(String name, WorkbookEncryptionRequest encryption, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostEncryptDocumentValidateBeforeCall(name, encryption, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostImportData
     * @param name  (required)
     * @param importdata  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostImportDataCall(String name, ImportOption importdata, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = importdata;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/importdata"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostImportDataValidateBeforeCall(String name, ImportOption importdata, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostImportData(Async)");
        }
        
        // verify the required parameter 'importdata' is set
        if (importdata == null) {
            throw new ApiException("Missing the required parameter 'importdata' when calling cellsWorkbookPostImportData(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostImportDataCall(name, importdata, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param importdata  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorkbookPostImportData(String name, ImportOption importdata, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorkbookPostImportDataWithHttpInfo(name, importdata, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param importdata  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorkbookPostImportDataWithHttpInfo(String name, ImportOption importdata, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostImportDataValidateBeforeCall(name, importdata, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param importdata  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostImportDataAsync(String name, ImportOption importdata, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostImportDataValidateBeforeCall(name, importdata, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostProtectDocument
     * @param name The document name. (required)
     * @param protection The protection settings. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostProtectDocumentCall(String name, WorkbookProtectionRequest protection, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = protection;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/protection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostProtectDocumentValidateBeforeCall(String name, WorkbookProtectionRequest protection, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostProtectDocument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostProtectDocumentCall(name, protection, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Protect document.
     * 
     * @param name The document name. (required)
     * @param protection The protection settings. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorkbookPostProtectDocument(String name, WorkbookProtectionRequest protection, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorkbookPostProtectDocumentWithHttpInfo(name, protection, folder, storage);
        return resp.getData();
    }

    /**
     * Protect document.
     * 
     * @param name The document name. (required)
     * @param protection The protection settings. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorkbookPostProtectDocumentWithHttpInfo(String name, WorkbookProtectionRequest protection, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostProtectDocumentValidateBeforeCall(name, protection, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Protect document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param protection The protection settings. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostProtectDocumentAsync(String name, WorkbookProtectionRequest protection, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostProtectDocumentValidateBeforeCall(name, protection, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbookCalculateFormula
     * @param name Document name. (required)
     * @param options Calculation Options. (optional)
     * @param ignoreError ignore Error. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookCalculateFormulaCall(String name, CalculationOptions options, Boolean ignoreError, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = options;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/calculateformula"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (ignoreError != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ignoreError", ignoreError));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbookCalculateFormulaValidateBeforeCall(String name, CalculationOptions options, Boolean ignoreError, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbookCalculateFormula(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookCalculateFormulaCall(name, options, ignoreError, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculate all formulas in workbook.
     * 
     * @param name Document name. (required)
     * @param options Calculation Options. (optional)
     * @param ignoreError ignore Error. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorkbookPostWorkbookCalculateFormula(String name, CalculationOptions options, Boolean ignoreError, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorkbookPostWorkbookCalculateFormulaWithHttpInfo(name, options, ignoreError, folder, storage);
        return resp.getData();
    }

    /**
     * Calculate all formulas in workbook.
     * 
     * @param name Document name. (required)
     * @param options Calculation Options. (optional)
     * @param ignoreError ignore Error. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorkbookPostWorkbookCalculateFormulaWithHttpInfo(String name, CalculationOptions options, Boolean ignoreError, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookCalculateFormulaValidateBeforeCall(name, options, ignoreError, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculate all formulas in workbook. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param options Calculation Options. (optional)
     * @param ignoreError ignore Error. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookCalculateFormulaAsync(String name, CalculationOptions options, Boolean ignoreError, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookCalculateFormulaValidateBeforeCall(name, options, ignoreError, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbookGetSmartMarkerResult
     * @param name The workbook name. (required)
     * @param xmlFile The xml file full path, if empty the data is read from request body. (optional)
     * @param folder The workbook folder full path. (optional)
     * @param storage storage name. (optional)
     * @param outPath Path to save result (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookGetSmartMarkerResultCall(String name, String xmlFile, String folder, String storage, String outPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/smartmarker"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (xmlFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xmlFile", xmlFile));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "outPath", outPath));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbookGetSmartMarkerResultValidateBeforeCall(String name, String xmlFile, String folder, String storage, String outPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbookGetSmartMarkerResult(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookGetSmartMarkerResultCall(name, xmlFile, folder, storage, outPath, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Smart marker processing result.
     * 
     * @param name The workbook name. (required)
     * @param xmlFile The xml file full path, if empty the data is read from request body. (optional)
     * @param folder The workbook folder full path. (optional)
     * @param storage storage name. (optional)
     * @param outPath Path to save result (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsWorkbookPostWorkbookGetSmartMarkerResult(String name, String xmlFile, String folder, String storage, String outPath) throws ApiException {
        ApiResponse<File> resp = cellsWorkbookPostWorkbookGetSmartMarkerResultWithHttpInfo(name, xmlFile, folder, storage, outPath);
        return resp.getData();
    }

    /**
     * Smart marker processing result.
     * 
     * @param name The workbook name. (required)
     * @param xmlFile The xml file full path, if empty the data is read from request body. (optional)
     * @param folder The workbook folder full path. (optional)
     * @param storage storage name. (optional)
     * @param outPath Path to save result (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsWorkbookPostWorkbookGetSmartMarkerResultWithHttpInfo(String name, String xmlFile, String folder, String storage, String outPath) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookGetSmartMarkerResultValidateBeforeCall(name, xmlFile, folder, storage, outPath, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Smart marker processing result. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param xmlFile The xml file full path, if empty the data is read from request body. (optional)
     * @param folder The workbook folder full path. (optional)
     * @param storage storage name. (optional)
     * @param outPath Path to save result (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookGetSmartMarkerResultAsync(String name, String xmlFile, String folder, String storage, String outPath, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookGetSmartMarkerResultValidateBeforeCall(name, xmlFile, folder, storage, outPath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbookSettings
     * @param name Document name. (required)
     * @param settings Workbook Setting DTO (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookSettingsCall(String name, WorkbookSettings settings, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settings;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/settings"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbookSettingsValidateBeforeCall(String name, WorkbookSettings settings, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbookSettings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookSettingsCall(name, settings, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Workbook setting 
     * 
     * @param name Document name. (required)
     * @param settings Workbook Setting DTO (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorkbookPostWorkbookSettings(String name, WorkbookSettings settings, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorkbookPostWorkbookSettingsWithHttpInfo(name, settings, folder, storage);
        return resp.getData();
    }

    /**
     * Update Workbook setting 
     * 
     * @param name Document name. (required)
     * @param settings Workbook Setting DTO (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorkbookPostWorkbookSettingsWithHttpInfo(String name, WorkbookSettings settings, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookSettingsValidateBeforeCall(name, settings, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Workbook setting  (asynchronously)
     * 
     * @param name Document name. (required)
     * @param settings Workbook Setting DTO (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookSettingsAsync(String name, WorkbookSettings settings, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookSettingsValidateBeforeCall(name, settings, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbookSplit
     * @param name The workbook name. (required)
     * @param format Split format. (optional)
     * @param from Start worksheet index. (optional, default to 0)
     * @param to End worksheet index. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookSplitCall(String name, String format, Integer from, Integer to, Integer horizontalResolution, Integer verticalResolution, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/split"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (horizontalResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "horizontalResolution", horizontalResolution));
        if (verticalResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "verticalResolution", verticalResolution));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbookSplitValidateBeforeCall(String name, String format, Integer from, Integer to, Integer horizontalResolution, Integer verticalResolution, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbookSplit(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookSplitCall(name, format, from, to, horizontalResolution, verticalResolution, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Split workbook.
     * 
     * @param name The workbook name. (required)
     * @param format Split format. (optional)
     * @param from Start worksheet index. (optional, default to 0)
     * @param to End worksheet index. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SplitResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitResultResponse cellsWorkbookPostWorkbookSplit(String name, String format, Integer from, Integer to, Integer horizontalResolution, Integer verticalResolution, String folder, String storage) throws ApiException {
        ApiResponse<SplitResultResponse> resp = cellsWorkbookPostWorkbookSplitWithHttpInfo(name, format, from, to, horizontalResolution, verticalResolution, folder, storage);
        return resp.getData();
    }

    /**
     * Split workbook.
     * 
     * @param name The workbook name. (required)
     * @param format Split format. (optional)
     * @param from Start worksheet index. (optional, default to 0)
     * @param to End worksheet index. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SplitResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitResultResponse> cellsWorkbookPostWorkbookSplitWithHttpInfo(String name, String format, Integer from, Integer to, Integer horizontalResolution, Integer verticalResolution, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookSplitValidateBeforeCall(name, format, from, to, horizontalResolution, verticalResolution, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SplitResultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split workbook. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param format Split format. (optional)
     * @param from Start worksheet index. (optional, default to 0)
     * @param to End worksheet index. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookSplitAsync(String name, String format, Integer from, Integer to, Integer horizontalResolution, Integer verticalResolution, String folder, String storage, final ApiCallback<SplitResultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookSplitValidateBeforeCall(name, format, from, to, horizontalResolution, verticalResolution, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SplitResultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbooksMerge
     * @param name Workbook name. (required)
     * @param mergeWith The workbook to merge with. (required)
     * @param folder Source workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbooksMergeCall(String name, String mergeWith, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/merge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (mergeWith != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "mergeWith", mergeWith));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbooksMergeValidateBeforeCall(String name, String mergeWith, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbooksMerge(Async)");
        }
        
        // verify the required parameter 'mergeWith' is set
        if (mergeWith == null) {
            throw new ApiException("Missing the required parameter 'mergeWith' when calling cellsWorkbookPostWorkbooksMerge(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksMergeCall(name, mergeWith, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Merge workbooks.
     * 
     * @param name Workbook name. (required)
     * @param mergeWith The workbook to merge with. (required)
     * @param folder Source workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return WorkbookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkbookResponse cellsWorkbookPostWorkbooksMerge(String name, String mergeWith, String folder, String storage) throws ApiException {
        ApiResponse<WorkbookResponse> resp = cellsWorkbookPostWorkbooksMergeWithHttpInfo(name, mergeWith, folder, storage);
        return resp.getData();
    }

    /**
     * Merge workbooks.
     * 
     * @param name Workbook name. (required)
     * @param mergeWith The workbook to merge with. (required)
     * @param folder Source workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;WorkbookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkbookResponse> cellsWorkbookPostWorkbooksMergeWithHttpInfo(String name, String mergeWith, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksMergeValidateBeforeCall(name, mergeWith, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<WorkbookResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merge workbooks. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param mergeWith The workbook to merge with. (required)
     * @param folder Source workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbooksMergeAsync(String name, String mergeWith, String folder, String storage, final ApiCallback<WorkbookResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksMergeValidateBeforeCall(name, mergeWith, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkbookResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbooksTextReplace
     * @param name Document name. (required)
     * @param oldValue The old value. (required)
     * @param newValue The new value. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbooksTextReplaceCall(String name, String oldValue, String newValue, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/replaceText"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (oldValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "oldValue", oldValue));
        if (newValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "newValue", newValue));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbooksTextReplaceValidateBeforeCall(String name, String oldValue, String newValue, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbooksTextReplace(Async)");
        }
        
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling cellsWorkbookPostWorkbooksTextReplace(Async)");
        }
        
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling cellsWorkbookPostWorkbooksTextReplace(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksTextReplaceCall(name, oldValue, newValue, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace text.
     * 
     * @param name Document name. (required)
     * @param oldValue The old value. (required)
     * @param newValue The new value. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return WorkbookReplaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkbookReplaceResponse cellsWorkbookPostWorkbooksTextReplace(String name, String oldValue, String newValue, String folder, String storage) throws ApiException {
        ApiResponse<WorkbookReplaceResponse> resp = cellsWorkbookPostWorkbooksTextReplaceWithHttpInfo(name, oldValue, newValue, folder, storage);
        return resp.getData();
    }

    /**
     * Replace text.
     * 
     * @param name Document name. (required)
     * @param oldValue The old value. (required)
     * @param newValue The new value. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;WorkbookReplaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkbookReplaceResponse> cellsWorkbookPostWorkbooksTextReplaceWithHttpInfo(String name, String oldValue, String newValue, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksTextReplaceValidateBeforeCall(name, oldValue, newValue, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<WorkbookReplaceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace text. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param oldValue The old value. (required)
     * @param newValue The new value. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbooksTextReplaceAsync(String name, String oldValue, String newValue, String folder, String storage, final ApiCallback<WorkbookReplaceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksTextReplaceValidateBeforeCall(name, oldValue, newValue, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkbookReplaceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbooksTextSearch
     * @param name Document name. (required)
     * @param text Text sample. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbooksTextSearchCall(String name, String text, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/findText"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbooksTextSearchValidateBeforeCall(String name, String text, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbooksTextSearch(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling cellsWorkbookPostWorkbooksTextSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksTextSearchCall(name, text, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search text.
     * 
     * @param name Document name. (required)
     * @param text Text sample. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return TextItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextItemsResponse cellsWorkbookPostWorkbooksTextSearch(String name, String text, String folder, String storage) throws ApiException {
        ApiResponse<TextItemsResponse> resp = cellsWorkbookPostWorkbooksTextSearchWithHttpInfo(name, text, folder, storage);
        return resp.getData();
    }

    /**
     * Search text.
     * 
     * @param name Document name. (required)
     * @param text Text sample. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;TextItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextItemsResponse> cellsWorkbookPostWorkbooksTextSearchWithHttpInfo(String name, String text, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksTextSearchValidateBeforeCall(name, text, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search text. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param text Text sample. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbooksTextSearchAsync(String name, String text, String folder, String storage, final ApiCallback<TextItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksTextSearchValidateBeforeCall(name, text, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPutConvertWorkbook
     * @param format The format to convert. (optional)
     * @param password The workbook password. (optional)
     * @param outPath Path to save result (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutConvertWorkbookCall(String format, String password, String outPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/convert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "password", password));
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "outPath", outPath));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPutConvertWorkbookValidateBeforeCall(String format, String password, String outPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPutConvertWorkbookCall(format, password, outPath, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Convert workbook from request content to some format.
     * 
     * @param format The format to convert. (optional)
     * @param password The workbook password. (optional)
     * @param outPath Path to save result (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsWorkbookPutConvertWorkbook(String format, String password, String outPath) throws ApiException {
        ApiResponse<File> resp = cellsWorkbookPutConvertWorkbookWithHttpInfo(format, password, outPath);
        return resp.getData();
    }

    /**
     * Convert workbook from request content to some format.
     * 
     * @param format The format to convert. (optional)
     * @param password The workbook password. (optional)
     * @param outPath Path to save result (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsWorkbookPutConvertWorkbookWithHttpInfo(String format, String password, String outPath) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPutConvertWorkbookValidateBeforeCall(format, password, outPath, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert workbook from request content to some format. (asynchronously)
     * 
     * @param format The format to convert. (optional)
     * @param password The workbook password. (optional)
     * @param outPath Path to save result (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutConvertWorkbookAsync(String format, String password, String outPath, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPutConvertWorkbookValidateBeforeCall(format, password, outPath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPutDocumentProtectFromChanges
     * @param name Document name. (required)
     * @param password Modification password. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutDocumentProtectFromChangesCall(String name, PasswordRequest password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = password;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/writeProtection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPutDocumentProtectFromChangesValidateBeforeCall(String name, PasswordRequest password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPutDocumentProtectFromChanges(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPutDocumentProtectFromChangesCall(name, password, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Protect document from changes.
     * 
     * @param name Document name. (required)
     * @param password Modification password. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorkbookPutDocumentProtectFromChanges(String name, PasswordRequest password, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorkbookPutDocumentProtectFromChangesWithHttpInfo(name, password, folder, storage);
        return resp.getData();
    }

    /**
     * Protect document from changes.
     * 
     * @param name Document name. (required)
     * @param password Modification password. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorkbookPutDocumentProtectFromChangesWithHttpInfo(String name, PasswordRequest password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPutDocumentProtectFromChangesValidateBeforeCall(name, password, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Protect document from changes. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Modification password. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutDocumentProtectFromChangesAsync(String name, PasswordRequest password, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPutDocumentProtectFromChangesValidateBeforeCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPutWorkbookCreate
     * @param name The new document name. (required)
     * @param templateFile The template file, if the data not provided default workbook is created. (optional)
     * @param dataFile Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     * @param folder The new document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutWorkbookCreateCall(String name, String templateFile, String dataFile, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (templateFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "templateFile", templateFile));
        if (dataFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataFile", dataFile));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPutWorkbookCreateValidateBeforeCall(String name, String templateFile, String dataFile, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPutWorkbookCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPutWorkbookCreateCall(name, templateFile, dataFile, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create new workbook using deferent methods.
     * 
     * @param name The new document name. (required)
     * @param templateFile The template file, if the data not provided default workbook is created. (optional)
     * @param dataFile Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     * @param folder The new document folder. (optional)
     * @param storage storage name. (optional)
     * @return WorkbookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkbookResponse cellsWorkbookPutWorkbookCreate(String name, String templateFile, String dataFile, String folder, String storage) throws ApiException {
        ApiResponse<WorkbookResponse> resp = cellsWorkbookPutWorkbookCreateWithHttpInfo(name, templateFile, dataFile, folder, storage);
        return resp.getData();
    }

    /**
     * Create new workbook using deferent methods.
     * 
     * @param name The new document name. (required)
     * @param templateFile The template file, if the data not provided default workbook is created. (optional)
     * @param dataFile Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     * @param folder The new document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;WorkbookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkbookResponse> cellsWorkbookPutWorkbookCreateWithHttpInfo(String name, String templateFile, String dataFile, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPutWorkbookCreateValidateBeforeCall(name, templateFile, dataFile, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<WorkbookResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new workbook using deferent methods. (asynchronously)
     * 
     * @param name The new document name. (required)
     * @param templateFile The template file, if the data not provided default workbook is created. (optional)
     * @param dataFile Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     * @param folder The new document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutWorkbookCreateAsync(String name, String templateFile, String dataFile, String folder, String storage, final ApiCallback<WorkbookResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPutWorkbookCreateValidateBeforeCall(name, templateFile, dataFile, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkbookResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
