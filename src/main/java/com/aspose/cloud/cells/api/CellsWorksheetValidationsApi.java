/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.Validation;
import com.aspose.cloud.cells.model.ValidationResponse;
import com.aspose.cloud.cells.model.ValidationsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsWorksheetValidationsApi {
    private ApiClient apiClient;

    public CellsWorksheetValidationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsWorksheetValidationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsWorksheetValidationsDeleteWorksheetValidation
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsDeleteWorksheetValidationCall(String name, String sheetName, Integer validationIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "validationIndex" + "\\}", apiClient.escapeString(validationIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetValidationsDeleteWorksheetValidationValidateBeforeCall(String name, String sheetName, Integer validationIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetValidationsDeleteWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetValidationsDeleteWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'validationIndex' is set
        if (validationIndex == null) {
            throw new ApiException("Missing the required parameter 'validationIndex' when calling cellsWorksheetValidationsDeleteWorksheetValidation(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetValidationsDeleteWorksheetValidationCall(name, sheetName, validationIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet validation by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ValidationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationResponse cellsWorksheetValidationsDeleteWorksheetValidation(String name, String sheetName, Integer validationIndex, String folder, String storage) throws ApiException {
        ApiResponse<ValidationResponse> resp = cellsWorksheetValidationsDeleteWorksheetValidationWithHttpInfo(name, sheetName, validationIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Delete worksheet validation by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ValidationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationResponse> cellsWorksheetValidationsDeleteWorksheetValidationWithHttpInfo(String name, String sheetName, Integer validationIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetValidationsDeleteWorksheetValidationValidateBeforeCall(name, sheetName, validationIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet validation by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsDeleteWorksheetValidationAsync(String name, String sheetName, Integer validationIndex, String folder, String storage, final ApiCallback<ValidationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetValidationsDeleteWorksheetValidationValidateBeforeCall(name, sheetName, validationIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetValidationsGetWorksheetValidation
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsGetWorksheetValidationCall(String name, String sheetName, Integer validationIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "validationIndex" + "\\}", apiClient.escapeString(validationIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetValidationsGetWorksheetValidationValidateBeforeCall(String name, String sheetName, Integer validationIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetValidationsGetWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetValidationsGetWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'validationIndex' is set
        if (validationIndex == null) {
            throw new ApiException("Missing the required parameter 'validationIndex' when calling cellsWorksheetValidationsGetWorksheetValidation(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetValidationsGetWorksheetValidationCall(name, sheetName, validationIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet validation by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ValidationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationResponse cellsWorksheetValidationsGetWorksheetValidation(String name, String sheetName, Integer validationIndex, String folder, String storage) throws ApiException {
        ApiResponse<ValidationResponse> resp = cellsWorksheetValidationsGetWorksheetValidationWithHttpInfo(name, sheetName, validationIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet validation by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ValidationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationResponse> cellsWorksheetValidationsGetWorksheetValidationWithHttpInfo(String name, String sheetName, Integer validationIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetValidationsGetWorksheetValidationValidateBeforeCall(name, sheetName, validationIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet validation by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsGetWorksheetValidationAsync(String name, String sheetName, Integer validationIndex, String folder, String storage, final ApiCallback<ValidationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetValidationsGetWorksheetValidationValidateBeforeCall(name, sheetName, validationIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetValidationsGetWorksheetValidations
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsGetWorksheetValidationsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/validations"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetValidationsGetWorksheetValidationsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetValidationsGetWorksheetValidations(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetValidationsGetWorksheetValidations(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetValidationsGetWorksheetValidationsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet validations.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return ValidationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationsResponse cellsWorksheetValidationsGetWorksheetValidations(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<ValidationsResponse> resp = cellsWorksheetValidationsGetWorksheetValidationsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet validations.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ValidationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationsResponse> cellsWorksheetValidationsGetWorksheetValidationsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetValidationsGetWorksheetValidationsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ValidationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet validations. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsGetWorksheetValidationsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<ValidationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetValidationsGetWorksheetValidationsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetValidationsPostWorksheetValidation
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param validation  (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsPostWorksheetValidationCall(String name, String sheetName, Integer validationIndex, Validation validation, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = validation;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "validationIndex" + "\\}", apiClient.escapeString(validationIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetValidationsPostWorksheetValidationValidateBeforeCall(String name, String sheetName, Integer validationIndex, Validation validation, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetValidationsPostWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetValidationsPostWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'validationIndex' is set
        if (validationIndex == null) {
            throw new ApiException("Missing the required parameter 'validationIndex' when calling cellsWorksheetValidationsPostWorksheetValidation(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetValidationsPostWorksheetValidationCall(name, sheetName, validationIndex, validation, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update worksheet validation by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param validation  (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ValidationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationResponse cellsWorksheetValidationsPostWorksheetValidation(String name, String sheetName, Integer validationIndex, Validation validation, String folder, String storage) throws ApiException {
        ApiResponse<ValidationResponse> resp = cellsWorksheetValidationsPostWorksheetValidationWithHttpInfo(name, sheetName, validationIndex, validation, folder, storage);
        return resp.getData();
    }

    /**
     * Update worksheet validation by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param validation  (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ValidationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationResponse> cellsWorksheetValidationsPostWorksheetValidationWithHttpInfo(String name, String sheetName, Integer validationIndex, Validation validation, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetValidationsPostWorksheetValidationValidateBeforeCall(name, sheetName, validationIndex, validation, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update worksheet validation by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param validation  (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsPostWorksheetValidationAsync(String name, String sheetName, Integer validationIndex, Validation validation, String folder, String storage, final ApiCallback<ValidationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetValidationsPostWorksheetValidationValidateBeforeCall(name, sheetName, validationIndex, validation, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetValidationsPutWorksheetValidation
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range Specified cells area (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsPutWorksheetValidationCall(String name, String sheetName, String range, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/validations"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetValidationsPutWorksheetValidationValidateBeforeCall(String name, String sheetName, String range, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetValidationsPutWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetValidationsPutWorksheetValidation(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetValidationsPutWorksheetValidationCall(name, sheetName, range, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add worksheet validation at index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range Specified cells area (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ValidationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationResponse cellsWorksheetValidationsPutWorksheetValidation(String name, String sheetName, String range, String folder, String storage) throws ApiException {
        ApiResponse<ValidationResponse> resp = cellsWorksheetValidationsPutWorksheetValidationWithHttpInfo(name, sheetName, range, folder, storage);
        return resp.getData();
    }

    /**
     * Add worksheet validation at index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range Specified cells area (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ValidationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationResponse> cellsWorksheetValidationsPutWorksheetValidationWithHttpInfo(String name, String sheetName, String range, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetValidationsPutWorksheetValidationValidateBeforeCall(name, sheetName, range, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add worksheet validation at index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range Specified cells area (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsPutWorksheetValidationAsync(String name, String sheetName, String range, String folder, String storage, final ApiCallback<ValidationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetValidationsPutWorksheetValidationValidateBeforeCall(name, sheetName, range, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
