/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.CalculationOptions;
import com.aspose.cloud.cells.model.CellResponse;
import com.aspose.cloud.cells.model.CellsResponse;
import com.aspose.cloud.cells.model.ColumnResponse;
import com.aspose.cloud.cells.model.ColumnsResponse;
import com.aspose.cloud.cells.model.FontSetting;
import com.aspose.cloud.cells.model.RowResponse;
import com.aspose.cloud.cells.model.RowsResponse;
import com.aspose.cloud.cells.model.SaaSposeResponse;
import com.aspose.cloud.cells.model.Style;
import com.aspose.cloud.cells.model.StyleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsApi {
    private ApiClient apiClient;

    public CellsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsDeleteWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsDeleteWorksheetColumnsCall(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "columnIndex" + "\\}", apiClient.escapeString(columnIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (columns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "columns", columns));
        if (updateReference != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "updateReference", updateReference));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsDeleteWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsDeleteWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsDeleteWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'columnIndex' is set
        if (columnIndex == null) {
            throw new ApiException("Missing the required parameter 'columnIndex' when calling cellsDeleteWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'columns' is set
        if (columns == null) {
            throw new ApiException("Missing the required parameter 'columns' when calling cellsDeleteWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'updateReference' is set
        if (updateReference == null) {
            throw new ApiException("Missing the required parameter 'updateReference' when calling cellsDeleteWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsDeleteWorksheetColumnsCall(name, sheetName, columnIndex, columns, updateReference, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ColumnsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ColumnsResponse cellsDeleteWorksheetColumns(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storage) throws ApiException {
        ApiResponse<ColumnsResponse> resp = cellsDeleteWorksheetColumnsWithHttpInfo(name, sheetName, columnIndex, columns, updateReference, folder, storage);
        return resp.getData();
    }

    /**
     * Delete worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ColumnsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ColumnsResponse> cellsDeleteWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsDeleteWorksheetColumnsValidateBeforeCall(name, sheetName, columnIndex, columns, updateReference, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ColumnsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsDeleteWorksheetColumnsAsync(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storage, final ApiCallback<ColumnsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsDeleteWorksheetColumnsValidateBeforeCall(name, sheetName, columnIndex, columns, updateReference, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ColumnsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsDeleteWorksheetRow
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param rowIndex The row index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsDeleteWorksheetRowCall(String name, String sheetName, Integer rowIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "rowIndex" + "\\}", apiClient.escapeString(rowIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsDeleteWorksheetRowValidateBeforeCall(String name, String sheetName, Integer rowIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsDeleteWorksheetRow(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsDeleteWorksheetRow(Async)");
        }
        
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling cellsDeleteWorksheetRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsDeleteWorksheetRowCall(name, sheetName, rowIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet row.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param rowIndex The row index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsDeleteWorksheetRow(String name, String sheetName, Integer rowIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsDeleteWorksheetRowWithHttpInfo(name, sheetName, rowIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Delete worksheet row.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param rowIndex The row index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsDeleteWorksheetRowWithHttpInfo(String name, String sheetName, Integer rowIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsDeleteWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet row. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param rowIndex The row index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsDeleteWorksheetRowAsync(String name, String sheetName, Integer rowIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsDeleteWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsDeleteWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsDeleteWorksheetRowsCall(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startrow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startrow", startrow));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (updateReference != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "updateReference", updateReference));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsDeleteWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsDeleteWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsDeleteWorksheetRows(Async)");
        }
        
        // verify the required parameter 'startrow' is set
        if (startrow == null) {
            throw new ApiException("Missing the required parameter 'startrow' when calling cellsDeleteWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsDeleteWorksheetRowsCall(name, sheetName, startrow, totalRows, updateReference, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete several worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsDeleteWorksheetRows(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsDeleteWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, updateReference, folder, storage);
        return resp.getData();
    }

    /**
     * Delete several worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsDeleteWorksheetRowsWithHttpInfo(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsDeleteWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, updateReference, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete several worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsDeleteWorksheetRowsAsync(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsDeleteWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, updateReference, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetCellHtmlString
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell&#39;s  name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetCellHtmlStringCall(String name, String sheetName, String cellName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetCellHtmlStringValidateBeforeCall(String name, String sheetName, String cellName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetCellHtmlString(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetCellHtmlString(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsGetCellHtmlString(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetCellHtmlStringCall(name, sheetName, cellName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read cell data by cell&#39;s name.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell&#39;s  name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object cellsGetCellHtmlString(String name, String sheetName, String cellName, String folder, String storage) throws ApiException {
        ApiResponse<Object> resp = cellsGetCellHtmlStringWithHttpInfo(name, sheetName, cellName, folder, storage);
        return resp.getData();
    }

    /**
     * Read cell data by cell&#39;s name.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell&#39;s  name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> cellsGetCellHtmlStringWithHttpInfo(String name, String sheetName, String cellName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetCellHtmlStringValidateBeforeCall(name, sheetName, cellName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read cell data by cell&#39;s name. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell&#39;s  name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetCellHtmlStringAsync(String name, String sheetName, String cellName, String folder, String storage, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetCellHtmlStringValidateBeforeCall(name, sheetName, cellName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetCell
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellOrMethodName The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetCellCall(String name, String sheetName, String cellOrMethodName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellOrMethodName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellOrMethodName" + "\\}", apiClient.escapeString(cellOrMethodName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetCellValidateBeforeCall(String name, String sheetName, String cellOrMethodName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetCell(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetCell(Async)");
        }
        
        // verify the required parameter 'cellOrMethodName' is set
        if (cellOrMethodName == null) {
            throw new ApiException("Missing the required parameter 'cellOrMethodName' when calling cellsGetWorksheetCell(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetCellCall(name, sheetName, cellOrMethodName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read cell data by cell&#39;s name.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellOrMethodName The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object cellsGetWorksheetCell(String name, String sheetName, String cellOrMethodName, String folder, String storage) throws ApiException {
        ApiResponse<Object> resp = cellsGetWorksheetCellWithHttpInfo(name, sheetName, cellOrMethodName, folder, storage);
        return resp.getData();
    }

    /**
     * Read cell data by cell&#39;s name.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellOrMethodName The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> cellsGetWorksheetCellWithHttpInfo(String name, String sheetName, String cellOrMethodName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetCellValidateBeforeCall(name, sheetName, cellOrMethodName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read cell data by cell&#39;s name. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellOrMethodName The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetCellAsync(String name, String sheetName, String cellOrMethodName, String folder, String storage, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetCellValidateBeforeCall(name, sheetName, cellOrMethodName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetCellStyle
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName Cell&#39;s name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetCellStyleCall(String name, String sheetName, String cellName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetCellStyleValidateBeforeCall(String name, String sheetName, String cellName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetCellStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetCellStyle(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsGetWorksheetCellStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetCellStyleCall(name, sheetName, cellName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read cell&#39;s style info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName Cell&#39;s name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return StyleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StyleResponse cellsGetWorksheetCellStyle(String name, String sheetName, String cellName, String folder, String storage) throws ApiException {
        ApiResponse<StyleResponse> resp = cellsGetWorksheetCellStyleWithHttpInfo(name, sheetName, cellName, folder, storage);
        return resp.getData();
    }

    /**
     * Read cell&#39;s style info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName Cell&#39;s name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;StyleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StyleResponse> cellsGetWorksheetCellStyleWithHttpInfo(String name, String sheetName, String cellName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetCellStyleValidateBeforeCall(name, sheetName, cellName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<StyleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read cell&#39;s style info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName Cell&#39;s name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetCellStyleAsync(String name, String sheetName, String cellName, String folder, String storage, final ApiCallback<StyleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetCellStyleValidateBeforeCall(name, sheetName, cellName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StyleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetCells
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param offest Begginig offset. (optional, default to 0)
     * @param count Maximum amount of cells in the response. (optional, default to 0)
     * @param folder Document&#39;s folder name. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetCellsCall(String name, String sheetName, Integer offest, Integer count, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offest != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offest", offest));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetCellsValidateBeforeCall(String name, String sheetName, Integer offest, Integer count, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetCells(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetCells(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetCellsCall(name, sheetName, offest, count, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cells info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param offest Begginig offset. (optional, default to 0)
     * @param count Maximum amount of cells in the response. (optional, default to 0)
     * @param folder Document&#39;s folder name. (optional)
     * @param storage storage name. (optional)
     * @return CellsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsResponse cellsGetWorksheetCells(String name, String sheetName, Integer offest, Integer count, String folder, String storage) throws ApiException {
        ApiResponse<CellsResponse> resp = cellsGetWorksheetCellsWithHttpInfo(name, sheetName, offest, count, folder, storage);
        return resp.getData();
    }

    /**
     * Get cells info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param offest Begginig offset. (optional, default to 0)
     * @param count Maximum amount of cells in the response. (optional, default to 0)
     * @param folder Document&#39;s folder name. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;CellsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsResponse> cellsGetWorksheetCellsWithHttpInfo(String name, String sheetName, Integer offest, Integer count, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetCellsValidateBeforeCall(name, sheetName, offest, count, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<CellsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cells info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param offest Begginig offset. (optional, default to 0)
     * @param count Maximum amount of cells in the response. (optional, default to 0)
     * @param folder Document&#39;s folder name. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetCellsAsync(String name, String sheetName, Integer offest, Integer count, String folder, String storage, final ApiCallback<CellsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetCellsValidateBeforeCall(name, sheetName, offest, count, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetColumn
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetColumnCall(String name, String sheetName, Integer columnIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "columnIndex" + "\\}", apiClient.escapeString(columnIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetColumnValidateBeforeCall(String name, String sheetName, Integer columnIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetColumn(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetColumn(Async)");
        }
        
        // verify the required parameter 'columnIndex' is set
        if (columnIndex == null) {
            throw new ApiException("Missing the required parameter 'columnIndex' when calling cellsGetWorksheetColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetColumnCall(name, sheetName, columnIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheet column data by column&#39;s index.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ColumnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ColumnResponse cellsGetWorksheetColumn(String name, String sheetName, Integer columnIndex, String folder, String storage) throws ApiException {
        ApiResponse<ColumnResponse> resp = cellsGetWorksheetColumnWithHttpInfo(name, sheetName, columnIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Read worksheet column data by column&#39;s index.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ColumnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ColumnResponse> cellsGetWorksheetColumnWithHttpInfo(String name, String sheetName, Integer columnIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetColumnValidateBeforeCall(name, sheetName, columnIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ColumnResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheet column data by column&#39;s index. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetColumnAsync(String name, String sheetName, Integer columnIndex, String folder, String storage, final ApiCallback<ColumnResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetColumnValidateBeforeCall(name, sheetName, columnIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ColumnResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetColumnsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetColumnsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetColumnsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheet columns info.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storage storage name. (optional)
     * @return ColumnsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ColumnsResponse cellsGetWorksheetColumns(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<ColumnsResponse> resp = cellsGetWorksheetColumnsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Read worksheet columns info.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ColumnsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ColumnsResponse> cellsGetWorksheetColumnsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetColumnsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ColumnsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheet columns info. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetColumnsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<ColumnsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetColumnsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ColumnsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetRow
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetRowCall(String name, String sheetName, Integer rowIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "rowIndex" + "\\}", apiClient.escapeString(rowIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetRowValidateBeforeCall(String name, String sheetName, Integer rowIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetRow(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetRow(Async)");
        }
        
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling cellsGetWorksheetRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetRowCall(name, sheetName, rowIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheet row data by row&#39;s index.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return RowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RowResponse cellsGetWorksheetRow(String name, String sheetName, Integer rowIndex, String folder, String storage) throws ApiException {
        ApiResponse<RowResponse> resp = cellsGetWorksheetRowWithHttpInfo(name, sheetName, rowIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Read worksheet row data by row&#39;s index.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;RowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RowResponse> cellsGetWorksheetRowWithHttpInfo(String name, String sheetName, Integer rowIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<RowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheet row data by row&#39;s index. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetRowAsync(String name, String sheetName, Integer rowIndex, String folder, String storage, final ApiCallback<RowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetRowsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetRowsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetRowsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheet rows info.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storage storage name. (optional)
     * @return RowsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RowsResponse cellsGetWorksheetRows(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<RowsResponse> resp = cellsGetWorksheetRowsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Read worksheet rows info.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;RowsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RowsResponse> cellsGetWorksheetRowsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetRowsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<RowsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheet rows info. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetRowsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<RowsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetRowsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RowsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostCellCalculate
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostCellCalculateCall(String name, String sheetName, String cellName, CalculationOptions options, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = options;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/calculate"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostCellCalculateValidateBeforeCall(String name, String sheetName, String cellName, CalculationOptions options, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostCellCalculate(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostCellCalculate(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsPostCellCalculate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostCellCalculateCall(name, sheetName, cellName, options, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cell calculate formula
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostCellCalculate(String name, String sheetName, String cellName, CalculationOptions options, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostCellCalculateWithHttpInfo(name, sheetName, cellName, options, folder, storage);
        return resp.getData();
    }

    /**
     * Cell calculate formula
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostCellCalculateWithHttpInfo(String name, String sheetName, String cellName, CalculationOptions options, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostCellCalculateValidateBeforeCall(name, sheetName, cellName, options, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cell calculate formula (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostCellCalculateAsync(String name, String sheetName, String cellName, CalculationOptions options, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostCellCalculateValidateBeforeCall(name, sheetName, cellName, options, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostCellCharacters
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostCellCharactersCall(String name, String sheetName, String cellName, List<FontSetting> options, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = options;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/characters"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostCellCharactersValidateBeforeCall(String name, String sheetName, String cellName, List<FontSetting> options, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostCellCharacters(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostCellCharacters(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsPostCellCharacters(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostCellCharactersCall(name, sheetName, cellName, options, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set cell characters 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostCellCharacters(String name, String sheetName, String cellName, List<FontSetting> options, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostCellCharactersWithHttpInfo(name, sheetName, cellName, options, folder, storage);
        return resp.getData();
    }

    /**
     * Set cell characters 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostCellCharactersWithHttpInfo(String name, String sheetName, String cellName, List<FontSetting> options, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostCellCharactersValidateBeforeCall(name, sheetName, cellName, options, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set cell characters  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostCellCharactersAsync(String name, String sheetName, String cellName, List<FontSetting> options, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostCellCharactersValidateBeforeCall(name, sheetName, cellName, options, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostClearContents
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostClearContentsCall(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/clearcontents"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (endRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endRow", endRow));
        if (endColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endColumn", endColumn));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostClearContentsValidateBeforeCall(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostClearContents(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostClearContents(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostClearContentsCall(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clear cells contents.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostClearContents(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostClearContentsWithHttpInfo(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storage);
        return resp.getData();
    }

    /**
     * Clear cells contents.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostClearContentsWithHttpInfo(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostClearContentsValidateBeforeCall(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clear cells contents. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostClearContentsAsync(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostClearContentsValidateBeforeCall(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostClearFormats
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostClearFormatsCall(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/clearformats"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (endRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endRow", endRow));
        if (endColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endColumn", endColumn));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostClearFormatsValidateBeforeCall(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostClearFormats(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostClearFormats(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostClearFormatsCall(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clear cells contents.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostClearFormats(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostClearFormatsWithHttpInfo(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storage);
        return resp.getData();
    }

    /**
     * Clear cells contents.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostClearFormatsWithHttpInfo(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostClearFormatsValidateBeforeCall(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clear cells contents. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostClearFormatsAsync(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostClearFormatsValidateBeforeCall(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostColumnStyle
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param style Style dto (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostColumnStyleCall(String name, String sheetName, Integer columnIndex, Style style, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = style;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}/style"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "columnIndex" + "\\}", apiClient.escapeString(columnIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostColumnStyleValidateBeforeCall(String name, String sheetName, Integer columnIndex, Style style, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostColumnStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostColumnStyle(Async)");
        }
        
        // verify the required parameter 'columnIndex' is set
        if (columnIndex == null) {
            throw new ApiException("Missing the required parameter 'columnIndex' when calling cellsPostColumnStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostColumnStyleCall(name, sheetName, columnIndex, style, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set column style
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param style Style dto (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostColumnStyle(String name, String sheetName, Integer columnIndex, Style style, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostColumnStyleWithHttpInfo(name, sheetName, columnIndex, style, folder, storage);
        return resp.getData();
    }

    /**
     * Set column style
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param style Style dto (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostColumnStyleWithHttpInfo(String name, String sheetName, Integer columnIndex, Style style, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostColumnStyleValidateBeforeCall(name, sheetName, columnIndex, style, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set column style (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param style Style dto (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostColumnStyleAsync(String name, String sheetName, Integer columnIndex, Style style, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostColumnStyleValidateBeforeCall(name, sheetName, columnIndex, style, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostCopyCellIntoCell
     * @param name Workbook name. (required)
     * @param destCellName Destination cell name (required)
     * @param sheetName Destination worksheet name. (required)
     * @param worksheet Source worksheet name. (required)
     * @param cellname Source cell name (optional)
     * @param row Source row (optional)
     * @param column Source column (optional)
     * @param folder Folder name (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostCopyCellIntoCellCall(String name, String destCellName, String sheetName, String worksheet, String cellname, Integer row, Integer column, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{destCellName}/copy"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "destCellName" + "\\}", apiClient.escapeString(destCellName.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (worksheet != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "worksheet", worksheet));
        if (cellname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellname", cellname));
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostCopyCellIntoCellValidateBeforeCall(String name, String destCellName, String sheetName, String worksheet, String cellname, Integer row, Integer column, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostCopyCellIntoCell(Async)");
        }
        
        // verify the required parameter 'destCellName' is set
        if (destCellName == null) {
            throw new ApiException("Missing the required parameter 'destCellName' when calling cellsPostCopyCellIntoCell(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostCopyCellIntoCell(Async)");
        }
        
        // verify the required parameter 'worksheet' is set
        if (worksheet == null) {
            throw new ApiException("Missing the required parameter 'worksheet' when calling cellsPostCopyCellIntoCell(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostCopyCellIntoCellCall(name, destCellName, sheetName, worksheet, cellname, row, column, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Copy cell into cell
     * 
     * @param name Workbook name. (required)
     * @param destCellName Destination cell name (required)
     * @param sheetName Destination worksheet name. (required)
     * @param worksheet Source worksheet name. (required)
     * @param cellname Source cell name (optional)
     * @param row Source row (optional)
     * @param column Source column (optional)
     * @param folder Folder name (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostCopyCellIntoCell(String name, String destCellName, String sheetName, String worksheet, String cellname, Integer row, Integer column, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostCopyCellIntoCellWithHttpInfo(name, destCellName, sheetName, worksheet, cellname, row, column, folder, storage);
        return resp.getData();
    }

    /**
     * Copy cell into cell
     * 
     * @param name Workbook name. (required)
     * @param destCellName Destination cell name (required)
     * @param sheetName Destination worksheet name. (required)
     * @param worksheet Source worksheet name. (required)
     * @param cellname Source cell name (optional)
     * @param row Source row (optional)
     * @param column Source column (optional)
     * @param folder Folder name (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostCopyCellIntoCellWithHttpInfo(String name, String destCellName, String sheetName, String worksheet, String cellname, Integer row, Integer column, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostCopyCellIntoCellValidateBeforeCall(name, destCellName, sheetName, worksheet, cellname, row, column, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Copy cell into cell (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param destCellName Destination cell name (required)
     * @param sheetName Destination worksheet name. (required)
     * @param worksheet Source worksheet name. (required)
     * @param cellname Source cell name (optional)
     * @param row Source row (optional)
     * @param column Source column (optional)
     * @param folder Folder name (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostCopyCellIntoCellAsync(String name, String destCellName, String sheetName, String worksheet, String cellname, Integer row, Integer column, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostCopyCellIntoCellValidateBeforeCall(name, destCellName, sheetName, worksheet, cellname, row, column, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostCopyWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceColumnIndex Source column index (required)
     * @param destinationColumnIndex Destination column index (required)
     * @param columnNumber The copied column number (required)
     * @param worksheet The Worksheet (optional, default to )
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostCopyWorksheetColumnsCall(String name, String sheetName, Integer sourceColumnIndex, Integer destinationColumnIndex, Integer columnNumber, String worksheet, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/copy"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (sourceColumnIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceColumnIndex", sourceColumnIndex));
        if (destinationColumnIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destinationColumnIndex", destinationColumnIndex));
        if (columnNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "columnNumber", columnNumber));
        if (worksheet != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "worksheet", worksheet));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostCopyWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer sourceColumnIndex, Integer destinationColumnIndex, Integer columnNumber, String worksheet, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostCopyWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostCopyWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sourceColumnIndex' is set
        if (sourceColumnIndex == null) {
            throw new ApiException("Missing the required parameter 'sourceColumnIndex' when calling cellsPostCopyWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'destinationColumnIndex' is set
        if (destinationColumnIndex == null) {
            throw new ApiException("Missing the required parameter 'destinationColumnIndex' when calling cellsPostCopyWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'columnNumber' is set
        if (columnNumber == null) {
            throw new ApiException("Missing the required parameter 'columnNumber' when calling cellsPostCopyWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostCopyWorksheetColumnsCall(name, sheetName, sourceColumnIndex, destinationColumnIndex, columnNumber, worksheet, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Copy worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceColumnIndex Source column index (required)
     * @param destinationColumnIndex Destination column index (required)
     * @param columnNumber The copied column number (required)
     * @param worksheet The Worksheet (optional, default to )
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostCopyWorksheetColumns(String name, String sheetName, Integer sourceColumnIndex, Integer destinationColumnIndex, Integer columnNumber, String worksheet, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostCopyWorksheetColumnsWithHttpInfo(name, sheetName, sourceColumnIndex, destinationColumnIndex, columnNumber, worksheet, folder, storage);
        return resp.getData();
    }

    /**
     * Copy worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceColumnIndex Source column index (required)
     * @param destinationColumnIndex Destination column index (required)
     * @param columnNumber The copied column number (required)
     * @param worksheet The Worksheet (optional, default to )
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostCopyWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer sourceColumnIndex, Integer destinationColumnIndex, Integer columnNumber, String worksheet, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostCopyWorksheetColumnsValidateBeforeCall(name, sheetName, sourceColumnIndex, destinationColumnIndex, columnNumber, worksheet, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Copy worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceColumnIndex Source column index (required)
     * @param destinationColumnIndex Destination column index (required)
     * @param columnNumber The copied column number (required)
     * @param worksheet The Worksheet (optional, default to )
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostCopyWorksheetColumnsAsync(String name, String sheetName, Integer sourceColumnIndex, Integer destinationColumnIndex, Integer columnNumber, String worksheet, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostCopyWorksheetColumnsValidateBeforeCall(name, sheetName, sourceColumnIndex, destinationColumnIndex, columnNumber, worksheet, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostCopyWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceRowIndex Source row index (required)
     * @param destinationRowIndex Destination row index (required)
     * @param rowNumber The copied row number (required)
     * @param worksheet worksheet (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostCopyWorksheetRowsCall(String name, String sheetName, Integer sourceRowIndex, Integer destinationRowIndex, Integer rowNumber, String worksheet, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/copy"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (sourceRowIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceRowIndex", sourceRowIndex));
        if (destinationRowIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destinationRowIndex", destinationRowIndex));
        if (rowNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "rowNumber", rowNumber));
        if (worksheet != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "worksheet", worksheet));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostCopyWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer sourceRowIndex, Integer destinationRowIndex, Integer rowNumber, String worksheet, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostCopyWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostCopyWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sourceRowIndex' is set
        if (sourceRowIndex == null) {
            throw new ApiException("Missing the required parameter 'sourceRowIndex' when calling cellsPostCopyWorksheetRows(Async)");
        }
        
        // verify the required parameter 'destinationRowIndex' is set
        if (destinationRowIndex == null) {
            throw new ApiException("Missing the required parameter 'destinationRowIndex' when calling cellsPostCopyWorksheetRows(Async)");
        }
        
        // verify the required parameter 'rowNumber' is set
        if (rowNumber == null) {
            throw new ApiException("Missing the required parameter 'rowNumber' when calling cellsPostCopyWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostCopyWorksheetRowsCall(name, sheetName, sourceRowIndex, destinationRowIndex, rowNumber, worksheet, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Copy worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceRowIndex Source row index (required)
     * @param destinationRowIndex Destination row index (required)
     * @param rowNumber The copied row number (required)
     * @param worksheet worksheet (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostCopyWorksheetRows(String name, String sheetName, Integer sourceRowIndex, Integer destinationRowIndex, Integer rowNumber, String worksheet, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostCopyWorksheetRowsWithHttpInfo(name, sheetName, sourceRowIndex, destinationRowIndex, rowNumber, worksheet, folder, storage);
        return resp.getData();
    }

    /**
     * Copy worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceRowIndex Source row index (required)
     * @param destinationRowIndex Destination row index (required)
     * @param rowNumber The copied row number (required)
     * @param worksheet worksheet (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostCopyWorksheetRowsWithHttpInfo(String name, String sheetName, Integer sourceRowIndex, Integer destinationRowIndex, Integer rowNumber, String worksheet, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostCopyWorksheetRowsValidateBeforeCall(name, sheetName, sourceRowIndex, destinationRowIndex, rowNumber, worksheet, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Copy worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceRowIndex Source row index (required)
     * @param destinationRowIndex Destination row index (required)
     * @param rowNumber The copied row number (required)
     * @param worksheet worksheet (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostCopyWorksheetRowsAsync(String name, String sheetName, Integer sourceRowIndex, Integer destinationRowIndex, Integer rowNumber, String worksheet, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostCopyWorksheetRowsValidateBeforeCall(name, sheetName, sourceRowIndex, destinationRowIndex, rowNumber, worksheet, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostGroupWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param hide columns visible state (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostGroupWorksheetColumnsCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/group"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstIndex", firstIndex));
        if (lastIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastIndex", lastIndex));
        if (hide != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hide", hide));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostGroupWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostGroupWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostGroupWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'firstIndex' is set
        if (firstIndex == null) {
            throw new ApiException("Missing the required parameter 'firstIndex' when calling cellsPostGroupWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'lastIndex' is set
        if (lastIndex == null) {
            throw new ApiException("Missing the required parameter 'lastIndex' when calling cellsPostGroupWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostGroupWorksheetColumnsCall(name, sheetName, firstIndex, lastIndex, hide, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Group worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param hide columns visible state (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostGroupWorksheetColumns(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostGroupWorksheetColumnsWithHttpInfo(name, sheetName, firstIndex, lastIndex, hide, folder, storage);
        return resp.getData();
    }

    /**
     * Group worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param hide columns visible state (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostGroupWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostGroupWorksheetColumnsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, hide, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Group worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param hide columns visible state (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostGroupWorksheetColumnsAsync(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostGroupWorksheetColumnsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, hide, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostGroupWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param hide rows visible state (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostGroupWorksheetRowsCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/group"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstIndex", firstIndex));
        if (lastIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastIndex", lastIndex));
        if (hide != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hide", hide));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostGroupWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostGroupWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostGroupWorksheetRows(Async)");
        }
        
        // verify the required parameter 'firstIndex' is set
        if (firstIndex == null) {
            throw new ApiException("Missing the required parameter 'firstIndex' when calling cellsPostGroupWorksheetRows(Async)");
        }
        
        // verify the required parameter 'lastIndex' is set
        if (lastIndex == null) {
            throw new ApiException("Missing the required parameter 'lastIndex' when calling cellsPostGroupWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostGroupWorksheetRowsCall(name, sheetName, firstIndex, lastIndex, hide, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Group worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param hide rows visible state (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostGroupWorksheetRows(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostGroupWorksheetRowsWithHttpInfo(name, sheetName, firstIndex, lastIndex, hide, folder, storage);
        return resp.getData();
    }

    /**
     * Group worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param hide rows visible state (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostGroupWorksheetRowsWithHttpInfo(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostGroupWorksheetRowsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, hide, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Group worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param hide rows visible state (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostGroupWorksheetRowsAsync(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostGroupWorksheetRowsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, hide, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostHideWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startColumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostHideWorksheetColumnsCall(String name, String sheetName, Integer startColumn, Integer totalColumns, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/hide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (totalColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalColumns", totalColumns));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostHideWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer startColumn, Integer totalColumns, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostHideWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostHideWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'startColumn' is set
        if (startColumn == null) {
            throw new ApiException("Missing the required parameter 'startColumn' when calling cellsPostHideWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'totalColumns' is set
        if (totalColumns == null) {
            throw new ApiException("Missing the required parameter 'totalColumns' when calling cellsPostHideWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostHideWorksheetColumnsCall(name, sheetName, startColumn, totalColumns, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Hide worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startColumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostHideWorksheetColumns(String name, String sheetName, Integer startColumn, Integer totalColumns, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostHideWorksheetColumnsWithHttpInfo(name, sheetName, startColumn, totalColumns, folder, storage);
        return resp.getData();
    }

    /**
     * Hide worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startColumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostHideWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer startColumn, Integer totalColumns, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostHideWorksheetColumnsValidateBeforeCall(name, sheetName, startColumn, totalColumns, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Hide worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startColumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostHideWorksheetColumnsAsync(String name, String sheetName, Integer startColumn, Integer totalColumns, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostHideWorksheetColumnsValidateBeforeCall(name, sheetName, startColumn, totalColumns, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostHideWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostHideWorksheetRowsCall(String name, String sheetName, Integer startrow, Integer totalRows, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/hide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startrow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startrow", startrow));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostHideWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer startrow, Integer totalRows, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostHideWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostHideWorksheetRows(Async)");
        }
        
        // verify the required parameter 'startrow' is set
        if (startrow == null) {
            throw new ApiException("Missing the required parameter 'startrow' when calling cellsPostHideWorksheetRows(Async)");
        }
        
        // verify the required parameter 'totalRows' is set
        if (totalRows == null) {
            throw new ApiException("Missing the required parameter 'totalRows' when calling cellsPostHideWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostHideWorksheetRowsCall(name, sheetName, startrow, totalRows, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Hide worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostHideWorksheetRows(String name, String sheetName, Integer startrow, Integer totalRows, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostHideWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, folder, storage);
        return resp.getData();
    }

    /**
     * Hide worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostHideWorksheetRowsWithHttpInfo(String name, String sheetName, Integer startrow, Integer totalRows, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostHideWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Hide worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostHideWorksheetRowsAsync(String name, String sheetName, Integer startrow, Integer totalRows, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostHideWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostRowStyle
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param style Style dto (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostRowStyleCall(String name, String sheetName, Integer rowIndex, Style style, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = style;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}/style"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "rowIndex" + "\\}", apiClient.escapeString(rowIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostRowStyleValidateBeforeCall(String name, String sheetName, Integer rowIndex, Style style, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostRowStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostRowStyle(Async)");
        }
        
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling cellsPostRowStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostRowStyleCall(name, sheetName, rowIndex, style, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set row style.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param style Style dto (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostRowStyle(String name, String sheetName, Integer rowIndex, Style style, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostRowStyleWithHttpInfo(name, sheetName, rowIndex, style, folder, storage);
        return resp.getData();
    }

    /**
     * Set row style.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param style Style dto (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostRowStyleWithHttpInfo(String name, String sheetName, Integer rowIndex, Style style, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostRowStyleValidateBeforeCall(name, sheetName, rowIndex, style, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set row style. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param style Style dto (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostRowStyleAsync(String name, String sheetName, Integer rowIndex, Style style, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostRowStyleValidateBeforeCall(name, sheetName, rowIndex, style, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostSetCellHtmlString
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostSetCellHtmlStringCall(String name, String sheetName, String cellName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostSetCellHtmlStringValidateBeforeCall(String name, String sheetName, String cellName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostSetCellHtmlString(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostSetCellHtmlString(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsPostSetCellHtmlString(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostSetCellHtmlStringCall(name, sheetName, cellName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set htmlstring value into cell
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return CellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellResponse cellsPostSetCellHtmlString(String name, String sheetName, String cellName, String folder, String storage) throws ApiException {
        ApiResponse<CellResponse> resp = cellsPostSetCellHtmlStringWithHttpInfo(name, sheetName, cellName, folder, storage);
        return resp.getData();
    }

    /**
     * Set htmlstring value into cell
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;CellResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellResponse> cellsPostSetCellHtmlStringWithHttpInfo(String name, String sheetName, String cellName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostSetCellHtmlStringValidateBeforeCall(name, sheetName, cellName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<CellResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set htmlstring value into cell (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostSetCellHtmlStringAsync(String name, String sheetName, String cellName, String folder, String storage, final ApiCallback<CellResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostSetCellHtmlStringValidateBeforeCall(name, sheetName, cellName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostSetCellRangeValue
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param value Range value (required)
     * @param type Value data type (like \&quot;int\&quot;) (required)
     * @param folder Folder name (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostSetCellRangeValueCall(String name, String sheetName, String cellarea, String value, String type, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellarea != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellarea", cellarea));
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "value", value));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostSetCellRangeValueValidateBeforeCall(String name, String sheetName, String cellarea, String value, String type, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostSetCellRangeValue(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostSetCellRangeValue(Async)");
        }
        
        // verify the required parameter 'cellarea' is set
        if (cellarea == null) {
            throw new ApiException("Missing the required parameter 'cellarea' when calling cellsPostSetCellRangeValue(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cellsPostSetCellRangeValue(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling cellsPostSetCellRangeValue(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostSetCellRangeValueCall(name, sheetName, cellarea, value, type, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set cell range value 
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param value Range value (required)
     * @param type Value data type (like \&quot;int\&quot;) (required)
     * @param folder Folder name (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostSetCellRangeValue(String name, String sheetName, String cellarea, String value, String type, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostSetCellRangeValueWithHttpInfo(name, sheetName, cellarea, value, type, folder, storage);
        return resp.getData();
    }

    /**
     * Set cell range value 
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param value Range value (required)
     * @param type Value data type (like \&quot;int\&quot;) (required)
     * @param folder Folder name (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostSetCellRangeValueWithHttpInfo(String name, String sheetName, String cellarea, String value, String type, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostSetCellRangeValueValidateBeforeCall(name, sheetName, cellarea, value, type, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set cell range value  (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param value Range value (required)
     * @param type Value data type (like \&quot;int\&quot;) (required)
     * @param folder Folder name (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostSetCellRangeValueAsync(String name, String sheetName, String cellarea, String value, String type, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostSetCellRangeValueValidateBeforeCall(name, sheetName, cellarea, value, type, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostSetWorksheetColumnWidth
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param width The width. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostSetWorksheetColumnWidthCall(String name, String sheetName, Integer columnIndex, Double width, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "columnIndex" + "\\}", apiClient.escapeString(columnIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostSetWorksheetColumnWidthValidateBeforeCall(String name, String sheetName, Integer columnIndex, Double width, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostSetWorksheetColumnWidth(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostSetWorksheetColumnWidth(Async)");
        }
        
        // verify the required parameter 'columnIndex' is set
        if (columnIndex == null) {
            throw new ApiException("Missing the required parameter 'columnIndex' when calling cellsPostSetWorksheetColumnWidth(Async)");
        }
        
        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling cellsPostSetWorksheetColumnWidth(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostSetWorksheetColumnWidthCall(name, sheetName, columnIndex, width, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set worksheet column width.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param width The width. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ColumnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ColumnResponse cellsPostSetWorksheetColumnWidth(String name, String sheetName, Integer columnIndex, Double width, String folder, String storage) throws ApiException {
        ApiResponse<ColumnResponse> resp = cellsPostSetWorksheetColumnWidthWithHttpInfo(name, sheetName, columnIndex, width, folder, storage);
        return resp.getData();
    }

    /**
     * Set worksheet column width.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param width The width. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ColumnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ColumnResponse> cellsPostSetWorksheetColumnWidthWithHttpInfo(String name, String sheetName, Integer columnIndex, Double width, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostSetWorksheetColumnWidthValidateBeforeCall(name, sheetName, columnIndex, width, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ColumnResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set worksheet column width. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param width The width. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostSetWorksheetColumnWidthAsync(String name, String sheetName, Integer columnIndex, Double width, String folder, String storage, final ApiCallback<ColumnResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostSetWorksheetColumnWidthValidateBeforeCall(name, sheetName, columnIndex, width, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ColumnResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUngroupWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUngroupWorksheetColumnsCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/ungroup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstIndex", firstIndex));
        if (lastIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastIndex", lastIndex));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUngroupWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUngroupWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUngroupWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'firstIndex' is set
        if (firstIndex == null) {
            throw new ApiException("Missing the required parameter 'firstIndex' when calling cellsPostUngroupWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'lastIndex' is set
        if (lastIndex == null) {
            throw new ApiException("Missing the required parameter 'lastIndex' when calling cellsPostUngroupWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUngroupWorksheetColumnsCall(name, sheetName, firstIndex, lastIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Ungroup worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostUngroupWorksheetColumns(String name, String sheetName, Integer firstIndex, Integer lastIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostUngroupWorksheetColumnsWithHttpInfo(name, sheetName, firstIndex, lastIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Ungroup worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostUngroupWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer firstIndex, Integer lastIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUngroupWorksheetColumnsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Ungroup worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUngroupWorksheetColumnsAsync(String name, String sheetName, Integer firstIndex, Integer lastIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUngroupWorksheetColumnsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUngroupWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param isAll Is all row to be operated (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUngroupWorksheetRowsCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean isAll, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/ungroup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstIndex", firstIndex));
        if (lastIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastIndex", lastIndex));
        if (isAll != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isAll", isAll));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUngroupWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean isAll, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUngroupWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUngroupWorksheetRows(Async)");
        }
        
        // verify the required parameter 'firstIndex' is set
        if (firstIndex == null) {
            throw new ApiException("Missing the required parameter 'firstIndex' when calling cellsPostUngroupWorksheetRows(Async)");
        }
        
        // verify the required parameter 'lastIndex' is set
        if (lastIndex == null) {
            throw new ApiException("Missing the required parameter 'lastIndex' when calling cellsPostUngroupWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUngroupWorksheetRowsCall(name, sheetName, firstIndex, lastIndex, isAll, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Ungroup worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param isAll Is all row to be operated (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostUngroupWorksheetRows(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean isAll, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostUngroupWorksheetRowsWithHttpInfo(name, sheetName, firstIndex, lastIndex, isAll, folder, storage);
        return resp.getData();
    }

    /**
     * Ungroup worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param isAll Is all row to be operated (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostUngroupWorksheetRowsWithHttpInfo(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean isAll, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUngroupWorksheetRowsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, isAll, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Ungroup worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param isAll Is all row to be operated (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUngroupWorksheetRowsAsync(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean isAll, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUngroupWorksheetRowsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, isAll, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUnhideWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startcolumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param width The new column width. (optional, default to 50.0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUnhideWorksheetColumnsCall(String name, String sheetName, Integer startcolumn, Integer totalColumns, Double width, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/unhide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startcolumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startcolumn", startcolumn));
        if (totalColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalColumns", totalColumns));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUnhideWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer startcolumn, Integer totalColumns, Double width, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUnhideWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUnhideWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'startcolumn' is set
        if (startcolumn == null) {
            throw new ApiException("Missing the required parameter 'startcolumn' when calling cellsPostUnhideWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'totalColumns' is set
        if (totalColumns == null) {
            throw new ApiException("Missing the required parameter 'totalColumns' when calling cellsPostUnhideWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUnhideWorksheetColumnsCall(name, sheetName, startcolumn, totalColumns, width, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unhide worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startcolumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param width The new column width. (optional, default to 50.0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostUnhideWorksheetColumns(String name, String sheetName, Integer startcolumn, Integer totalColumns, Double width, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostUnhideWorksheetColumnsWithHttpInfo(name, sheetName, startcolumn, totalColumns, width, folder, storage);
        return resp.getData();
    }

    /**
     * Unhide worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startcolumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param width The new column width. (optional, default to 50.0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostUnhideWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer startcolumn, Integer totalColumns, Double width, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUnhideWorksheetColumnsValidateBeforeCall(name, sheetName, startcolumn, totalColumns, width, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unhide worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startcolumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param width The new column width. (optional, default to 50.0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUnhideWorksheetColumnsAsync(String name, String sheetName, Integer startcolumn, Integer totalColumns, Double width, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUnhideWorksheetColumnsValidateBeforeCall(name, sheetName, startcolumn, totalColumns, width, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUnhideWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param height The new row height. (optional, default to 15.0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUnhideWorksheetRowsCall(String name, String sheetName, Integer startrow, Integer totalRows, Double height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/unhide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startrow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startrow", startrow));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUnhideWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer startrow, Integer totalRows, Double height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUnhideWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUnhideWorksheetRows(Async)");
        }
        
        // verify the required parameter 'startrow' is set
        if (startrow == null) {
            throw new ApiException("Missing the required parameter 'startrow' when calling cellsPostUnhideWorksheetRows(Async)");
        }
        
        // verify the required parameter 'totalRows' is set
        if (totalRows == null) {
            throw new ApiException("Missing the required parameter 'totalRows' when calling cellsPostUnhideWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUnhideWorksheetRowsCall(name, sheetName, startrow, totalRows, height, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unhide worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param height The new row height. (optional, default to 15.0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostUnhideWorksheetRows(String name, String sheetName, Integer startrow, Integer totalRows, Double height, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostUnhideWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, height, folder, storage);
        return resp.getData();
    }

    /**
     * Unhide worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param height The new row height. (optional, default to 15.0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostUnhideWorksheetRowsWithHttpInfo(String name, String sheetName, Integer startrow, Integer totalRows, Double height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUnhideWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unhide worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param height The new row height. (optional, default to 15.0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUnhideWorksheetRowsAsync(String name, String sheetName, Integer startrow, Integer totalRows, Double height, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUnhideWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUpdateWorksheetCellStyle
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUpdateWorksheetCellStyleCall(String name, String sheetName, String cellName, Style style, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = style;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUpdateWorksheetCellStyleValidateBeforeCall(String name, String sheetName, String cellName, Style style, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUpdateWorksheetCellStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUpdateWorksheetCellStyle(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsPostUpdateWorksheetCellStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetCellStyleCall(name, sheetName, cellName, style, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update cell&#39;s style.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return StyleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StyleResponse cellsPostUpdateWorksheetCellStyle(String name, String sheetName, String cellName, Style style, String folder, String storage) throws ApiException {
        ApiResponse<StyleResponse> resp = cellsPostUpdateWorksheetCellStyleWithHttpInfo(name, sheetName, cellName, style, folder, storage);
        return resp.getData();
    }

    /**
     * Update cell&#39;s style.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;StyleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StyleResponse> cellsPostUpdateWorksheetCellStyleWithHttpInfo(String name, String sheetName, String cellName, Style style, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetCellStyleValidateBeforeCall(name, sheetName, cellName, style, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<StyleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update cell&#39;s style. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUpdateWorksheetCellStyleAsync(String name, String sheetName, String cellName, Style style, String folder, String storage, final ApiCallback<StyleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetCellStyleValidateBeforeCall(name, sheetName, cellName, style, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StyleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUpdateWorksheetRangeStyle
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUpdateWorksheetRangeStyleCall(String name, String sheetName, String range, Style style, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = style;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/style"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUpdateWorksheetRangeStyleValidateBeforeCall(String name, String sheetName, String range, Style style, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUpdateWorksheetRangeStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUpdateWorksheetRangeStyle(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsPostUpdateWorksheetRangeStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetRangeStyleCall(name, sheetName, range, style, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update cell&#39;s range style.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostUpdateWorksheetRangeStyle(String name, String sheetName, String range, Style style, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostUpdateWorksheetRangeStyleWithHttpInfo(name, sheetName, range, style, folder, storage);
        return resp.getData();
    }

    /**
     * Update cell&#39;s range style.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostUpdateWorksheetRangeStyleWithHttpInfo(String name, String sheetName, String range, Style style, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetRangeStyleValidateBeforeCall(name, sheetName, range, style, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update cell&#39;s range style. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUpdateWorksheetRangeStyleAsync(String name, String sheetName, String range, Style style, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetRangeStyleValidateBeforeCall(name, sheetName, range, style, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUpdateWorksheetRow
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param height The new row height. (optional, default to 0.0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUpdateWorksheetRowCall(String name, String sheetName, Integer rowIndex, Double height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "rowIndex" + "\\}", apiClient.escapeString(rowIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUpdateWorksheetRowValidateBeforeCall(String name, String sheetName, Integer rowIndex, Double height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUpdateWorksheetRow(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUpdateWorksheetRow(Async)");
        }
        
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling cellsPostUpdateWorksheetRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetRowCall(name, sheetName, rowIndex, height, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update worksheet row.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param height The new row height. (optional, default to 0.0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return RowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RowResponse cellsPostUpdateWorksheetRow(String name, String sheetName, Integer rowIndex, Double height, String folder, String storage) throws ApiException {
        ApiResponse<RowResponse> resp = cellsPostUpdateWorksheetRowWithHttpInfo(name, sheetName, rowIndex, height, folder, storage);
        return resp.getData();
    }

    /**
     * Update worksheet row.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param height The new row height. (optional, default to 0.0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;RowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RowResponse> cellsPostUpdateWorksheetRowWithHttpInfo(String name, String sheetName, Integer rowIndex, Double height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<RowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update worksheet row. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param height The new row height. (optional, default to 0.0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUpdateWorksheetRowAsync(String name, String sheetName, Integer rowIndex, Double height, String folder, String storage, final ApiCallback<RowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostWorksheetCellSetValue
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param value The cell value. (optional)
     * @param type The value type. (optional)
     * @param formula Formula for cell (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostWorksheetCellSetValueCall(String name, String sheetName, String cellName, String value, String type, String formula, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "value", value));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (formula != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "formula", formula));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostWorksheetCellSetValueValidateBeforeCall(String name, String sheetName, String cellName, String value, String type, String formula, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostWorksheetCellSetValue(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostWorksheetCellSetValue(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsPostWorksheetCellSetValue(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostWorksheetCellSetValueCall(name, sheetName, cellName, value, type, formula, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set cell value.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param value The cell value. (optional)
     * @param type The value type. (optional)
     * @param formula Formula for cell (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return CellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellResponse cellsPostWorksheetCellSetValue(String name, String sheetName, String cellName, String value, String type, String formula, String folder, String storage) throws ApiException {
        ApiResponse<CellResponse> resp = cellsPostWorksheetCellSetValueWithHttpInfo(name, sheetName, cellName, value, type, formula, folder, storage);
        return resp.getData();
    }

    /**
     * Set cell value.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param value The cell value. (optional)
     * @param type The value type. (optional)
     * @param formula Formula for cell (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;CellResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellResponse> cellsPostWorksheetCellSetValueWithHttpInfo(String name, String sheetName, String cellName, String value, String type, String formula, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostWorksheetCellSetValueValidateBeforeCall(name, sheetName, cellName, value, type, formula, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<CellResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set cell value. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param value The cell value. (optional)
     * @param type The value type. (optional)
     * @param formula Formula for cell (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostWorksheetCellSetValueAsync(String name, String sheetName, String cellName, String value, String type, String formula, String folder, String storage, final ApiCallback<CellResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostWorksheetCellSetValueValidateBeforeCall(name, sheetName, cellName, value, type, formula, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostWorksheetMerge
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostWorksheetMergeCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/merge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (totalColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalColumns", totalColumns));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostWorksheetMergeValidateBeforeCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostWorksheetMerge(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostWorksheetMerge(Async)");
        }
        
        // verify the required parameter 'startRow' is set
        if (startRow == null) {
            throw new ApiException("Missing the required parameter 'startRow' when calling cellsPostWorksheetMerge(Async)");
        }
        
        // verify the required parameter 'startColumn' is set
        if (startColumn == null) {
            throw new ApiException("Missing the required parameter 'startColumn' when calling cellsPostWorksheetMerge(Async)");
        }
        
        // verify the required parameter 'totalRows' is set
        if (totalRows == null) {
            throw new ApiException("Missing the required parameter 'totalRows' when calling cellsPostWorksheetMerge(Async)");
        }
        
        // verify the required parameter 'totalColumns' is set
        if (totalColumns == null) {
            throw new ApiException("Missing the required parameter 'totalColumns' when calling cellsPostWorksheetMerge(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostWorksheetMergeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Merge cells.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostWorksheetMerge(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostWorksheetMergeWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage);
        return resp.getData();
    }

    /**
     * Merge cells.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostWorksheetMergeWithHttpInfo(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostWorksheetMergeValidateBeforeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merge cells. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostWorksheetMergeAsync(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostWorksheetMergeValidateBeforeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostWorksheetUnmerge
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostWorksheetUnmergeCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/unmerge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (totalColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalColumns", totalColumns));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostWorksheetUnmergeValidateBeforeCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostWorksheetUnmerge(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostWorksheetUnmerge(Async)");
        }
        
        // verify the required parameter 'startRow' is set
        if (startRow == null) {
            throw new ApiException("Missing the required parameter 'startRow' when calling cellsPostWorksheetUnmerge(Async)");
        }
        
        // verify the required parameter 'startColumn' is set
        if (startColumn == null) {
            throw new ApiException("Missing the required parameter 'startColumn' when calling cellsPostWorksheetUnmerge(Async)");
        }
        
        // verify the required parameter 'totalRows' is set
        if (totalRows == null) {
            throw new ApiException("Missing the required parameter 'totalRows' when calling cellsPostWorksheetUnmerge(Async)");
        }
        
        // verify the required parameter 'totalColumns' is set
        if (totalColumns == null) {
            throw new ApiException("Missing the required parameter 'totalColumns' when calling cellsPostWorksheetUnmerge(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostWorksheetUnmergeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unmerge cells.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPostWorksheetUnmerge(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPostWorksheetUnmergeWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage);
        return resp.getData();
    }

    /**
     * Unmerge cells.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPostWorksheetUnmergeWithHttpInfo(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostWorksheetUnmergeValidateBeforeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unmerge cells. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostWorksheetUnmergeAsync(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostWorksheetUnmergeValidateBeforeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPutInsertWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (optional, default to true)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPutInsertWorksheetColumnsCall(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "columnIndex" + "\\}", apiClient.escapeString(columnIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (columns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "columns", columns));
        if (updateReference != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "updateReference", updateReference));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPutInsertWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPutInsertWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPutInsertWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'columnIndex' is set
        if (columnIndex == null) {
            throw new ApiException("Missing the required parameter 'columnIndex' when calling cellsPutInsertWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'columns' is set
        if (columns == null) {
            throw new ApiException("Missing the required parameter 'columns' when calling cellsPutInsertWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPutInsertWorksheetColumnsCall(name, sheetName, columnIndex, columns, updateReference, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (optional, default to true)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ColumnsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ColumnsResponse cellsPutInsertWorksheetColumns(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storage) throws ApiException {
        ApiResponse<ColumnsResponse> resp = cellsPutInsertWorksheetColumnsWithHttpInfo(name, sheetName, columnIndex, columns, updateReference, folder, storage);
        return resp.getData();
    }

    /**
     * Insert worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (optional, default to true)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ColumnsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ColumnsResponse> cellsPutInsertWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPutInsertWorksheetColumnsValidateBeforeCall(name, sheetName, columnIndex, columns, updateReference, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ColumnsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (optional, default to true)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPutInsertWorksheetColumnsAsync(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storage, final ApiCallback<ColumnsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPutInsertWorksheetColumnsValidateBeforeCall(name, sheetName, columnIndex, columns, updateReference, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ColumnsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPutInsertWorksheetRow
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The new row index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPutInsertWorksheetRowCall(String name, String sheetName, Integer rowIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "rowIndex" + "\\}", apiClient.escapeString(rowIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPutInsertWorksheetRowValidateBeforeCall(String name, String sheetName, Integer rowIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPutInsertWorksheetRow(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPutInsertWorksheetRow(Async)");
        }
        
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling cellsPutInsertWorksheetRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPutInsertWorksheetRowCall(name, sheetName, rowIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert new worksheet row.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The new row index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return RowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RowResponse cellsPutInsertWorksheetRow(String name, String sheetName, Integer rowIndex, String folder, String storage) throws ApiException {
        ApiResponse<RowResponse> resp = cellsPutInsertWorksheetRowWithHttpInfo(name, sheetName, rowIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Insert new worksheet row.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The new row index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;RowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RowResponse> cellsPutInsertWorksheetRowWithHttpInfo(String name, String sheetName, Integer rowIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPutInsertWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<RowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert new worksheet row. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The new row index. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPutInsertWorksheetRowAsync(String name, String sheetName, Integer rowIndex, String folder, String storage, final ApiCallback<RowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPutInsertWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPutInsertWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPutInsertWorksheetRowsCall(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startrow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startrow", startrow));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (updateReference != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "updateReference", updateReference));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPutInsertWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPutInsertWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPutInsertWorksheetRows(Async)");
        }
        
        // verify the required parameter 'startrow' is set
        if (startrow == null) {
            throw new ApiException("Missing the required parameter 'startrow' when calling cellsPutInsertWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPutInsertWorksheetRowsCall(name, sheetName, startrow, totalRows, updateReference, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert several new worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPutInsertWorksheetRows(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPutInsertWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, updateReference, folder, storage);
        return resp.getData();
    }

    /**
     * Insert several new worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPutInsertWorksheetRowsWithHttpInfo(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPutInsertWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, updateReference, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert several new worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPutInsertWorksheetRowsAsync(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPutInsertWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, updateReference, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
