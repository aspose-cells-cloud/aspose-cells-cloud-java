/* 
 * <summary>
 *  Copyright (c) 2020 Aspose.Cells Cloud
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all 
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.AccessTokenResponse;
import com.aspose.cloud.cells.model.AutoFilterResponse;
import com.aspose.cloud.cells.model.AutoFitterOptions;
import com.aspose.cloud.cells.model.AutoShapesResponse;
import com.aspose.cloud.cells.model.CalculationOptions;
import com.aspose.cloud.cells.model.CellResponse;
import com.aspose.cloud.cells.model.CellsCloudResponse;
import com.aspose.cloud.cells.model.CellsDocumentPropertiesResponse;
import com.aspose.cloud.cells.model.CellsDocumentProperty;
import com.aspose.cloud.cells.model.CellsDocumentPropertyResponse;
import com.aspose.cloud.cells.model.CellsResponse;
import com.aspose.cloud.cells.model.Chart;
import com.aspose.cloud.cells.model.ChartAreaResponse;
import com.aspose.cloud.cells.model.ChartsResponse;
import com.aspose.cloud.cells.model.ColorFilterRequest;
import com.aspose.cloud.cells.model.ColumnResponse;
import com.aspose.cloud.cells.model.ColumnsResponse;
import com.aspose.cloud.cells.model.Comment;
import com.aspose.cloud.cells.model.CommentResponse;
import com.aspose.cloud.cells.model.CommentsResponse;
import com.aspose.cloud.cells.model.ConditionalFormattingResponse;
import com.aspose.cloud.cells.model.ConditionalFormattingsResponse;
import com.aspose.cloud.cells.model.CopyOptions;
import com.aspose.cloud.cells.model.CreatePivotTableRequest;
import com.aspose.cloud.cells.model.DataSorter;
import com.aspose.cloud.cells.model.DiscUsage;
import java.io.File;
import com.aspose.cloud.cells.model.FileVersions;
import com.aspose.cloud.cells.model.FilesList;
import com.aspose.cloud.cells.model.FilesUploadResult;
import com.aspose.cloud.cells.model.FillFormatResponse;
import com.aspose.cloud.cells.model.FontSetting;
import com.aspose.cloud.cells.model.FormatCondition;
import com.aspose.cloud.cells.model.HorizontalPageBreakResponse;
import com.aspose.cloud.cells.model.HorizontalPageBreaksResponse;
import com.aspose.cloud.cells.model.Hyperlink;
import com.aspose.cloud.cells.model.HyperlinkResponse;
import com.aspose.cloud.cells.model.HyperlinksResponse;
import com.aspose.cloud.cells.model.ImportOption;
import com.aspose.cloud.cells.model.Legend;
import com.aspose.cloud.cells.model.LegendResponse;
import com.aspose.cloud.cells.model.LineResponse;
import com.aspose.cloud.cells.model.ListObject;
import com.aspose.cloud.cells.model.ListObjectResponse;
import com.aspose.cloud.cells.model.ListObjectsResponse;
import com.aspose.cloud.cells.model.MergedCellResponse;
import com.aspose.cloud.cells.model.MergedCellsResponse;
import com.aspose.cloud.cells.model.NameResponse;
import com.aspose.cloud.cells.model.NamesResponse;
import com.aspose.cloud.cells.model.ObjectExist;
import com.aspose.cloud.cells.model.OleObject;
import com.aspose.cloud.cells.model.OleObjectResponse;
import com.aspose.cloud.cells.model.OleObjectsResponse;
import com.aspose.cloud.cells.model.PageSectionsResponse;
import com.aspose.cloud.cells.model.PageSetup;
import com.aspose.cloud.cells.model.PageSetupResponse;
import com.aspose.cloud.cells.model.PasswordRequest;
import com.aspose.cloud.cells.model.Picture;
import com.aspose.cloud.cells.model.PictureResponse;
import com.aspose.cloud.cells.model.PicturesResponse;
import com.aspose.cloud.cells.model.PivotField;
import com.aspose.cloud.cells.model.PivotFieldResponse;
import com.aspose.cloud.cells.model.PivotFilter;
import com.aspose.cloud.cells.model.PivotFilterResponse;
import com.aspose.cloud.cells.model.PivotFiltersResponse;
import com.aspose.cloud.cells.model.PivotTableFieldRequest;
import com.aspose.cloud.cells.model.PivotTableResponse;
import com.aspose.cloud.cells.model.PivotTablesResponse;
import com.aspose.cloud.cells.model.ProtectSheetParameter;
import com.aspose.cloud.cells.model.Range;
import com.aspose.cloud.cells.model.RangeCopyRequest;
import com.aspose.cloud.cells.model.RangeSetOutlineBorderRequest;
import com.aspose.cloud.cells.model.RangeSetStyleRequest;
import com.aspose.cloud.cells.model.RangeValueResponse;
import com.aspose.cloud.cells.model.RangesResponse;
import com.aspose.cloud.cells.model.RowResponse;
import com.aspose.cloud.cells.model.RowsResponse;
import com.aspose.cloud.cells.model.SaveOptions;
import com.aspose.cloud.cells.model.SaveResponse;
import com.aspose.cloud.cells.model.Shape;
import com.aspose.cloud.cells.model.ShapeResponse;
import com.aspose.cloud.cells.model.ShapesResponse;
import com.aspose.cloud.cells.model.SingleValueResponse;
import com.aspose.cloud.cells.model.SparklineGroup;
import com.aspose.cloud.cells.model.SparklineGroupResponse;
import com.aspose.cloud.cells.model.SparklineGroupsResponse;
import com.aspose.cloud.cells.model.SplitResultResponse;
import com.aspose.cloud.cells.model.StorageExist;
import com.aspose.cloud.cells.model.Style;
import com.aspose.cloud.cells.model.StyleResponse;
import com.aspose.cloud.cells.model.TaskData;
import com.aspose.cloud.cells.model.TextItemsResponse;
import com.aspose.cloud.cells.model.TextWaterMarkerRequest;
import com.aspose.cloud.cells.model.Title;
import com.aspose.cloud.cells.model.TitleResponse;
import com.aspose.cloud.cells.model.Validation;
import com.aspose.cloud.cells.model.ValidationResponse;
import com.aspose.cloud.cells.model.ValidationsResponse;
import com.aspose.cloud.cells.model.VerticalPageBreakResponse;
import com.aspose.cloud.cells.model.VerticalPageBreaksResponse;
import com.aspose.cloud.cells.model.WorkbookEncryptionRequest;
import com.aspose.cloud.cells.model.WorkbookProtectionRequest;
import com.aspose.cloud.cells.model.WorkbookReplaceResponse;
import com.aspose.cloud.cells.model.WorkbookResponse;
import com.aspose.cloud.cells.model.WorkbookSettings;
import com.aspose.cloud.cells.model.WorkbookSettingsResponse;
import com.aspose.cloud.cells.model.Worksheet;
import com.aspose.cloud.cells.model.WorksheetMovingRequest;
import com.aspose.cloud.cells.model.WorksheetReplaceResponse;
import com.aspose.cloud.cells.model.WorksheetResponse;
import com.aspose.cloud.cells.model.WorksheetsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsApi {
    private ApiClient apiClient;

    public CellsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public CellsApi(String clientId, String clientSecret) throws ApiException {
        ApiClient apiClient = new ApiClient();
        apiClient.setBasePath("https://api.aspose.cloud");
        apiClient.setApiVersion("v3.0");
        String accesstoken = apiClient.getAccessToken("client_credentials",
        clientId, clientSecret, "v3.0");
        apiClient.addDefaultHeader("Authorization", "Bearer " + accesstoken);
        setApiClient(apiClient);
    }

    public CellsApi(String clientId, String clientSecret, String Version)
            throws ApiException {

        ApiClient apiClient = new ApiClient();
        apiClient.setBasePath("https://api.aspose.cloud");
        apiClient.setApiVersion(Version);
        String accesstoken = apiClient.getAccessToken("client_credentials",
        clientId, clientSecret, Version);

        apiClient.addDefaultHeader("Authorization", "Bearer " + accesstoken);
        setApiClient(apiClient);
    }

    public CellsApi(String clientId, String clientSecret, String Version, String baseURI)
            throws ApiException {

        ApiClient apiClient = new ApiClient();
        apiClient.setBasePath(baseURI.endsWith("/") ? baseURI.substring(0,
                baseURI.length() - 1) : baseURI);
        apiClient.setApiVersion(Version);
        if((clientId == null || clientId.length() == 0) && (clientSecret == null ||clientSecret.length() == 0)){
            apiClient.SetNeedAuth(false);
        }else{
            String accesstoken = apiClient.getAccessToken("client_credentials", clientId, clientSecret, "v3.0");
            apiClient.addDefaultHeader("Authorization", "Bearer " + accesstoken);
        }
        setApiClient(apiClient);
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsAutoFilterDeleteWorksheetDateFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterDeleteWorksheetDateFilterCall(String name, String sheetName, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (dateTimeGroupingType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateTimeGroupingType", dateTimeGroupingType));
        if (year != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "year", year));
        if (month != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "month", month));
        if (day != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "day", day));
        if (hour != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hour", hour));
        if (minute != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "minute", minute));
        if (second != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "second", second));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterDeleteWorksheetDateFilterValidateBeforeCall(String name, String sheetName, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterDeleteWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterDeleteWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterDeleteWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'dateTimeGroupingType' is set
        if (dateTimeGroupingType == null) {
            throw new ApiException("Missing the required parameter 'dateTimeGroupingType' when calling cellsAutoFilterDeleteWorksheetDateFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterDeleteWorksheetDateFilterCall(name, sheetName, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes a date filter.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsAutoFilterDeleteWorksheetDateFilter(String name, String sheetName, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo(name, sheetName, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, folder, storageName);
        return resp.getData();
    }

    /**
     * Removes a date filter.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo(String name, String sheetName, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterDeleteWorksheetDateFilterValidateBeforeCall(name, sheetName, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes a date filter.              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterDeleteWorksheetDateFilterAsync(String name, String sheetName, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterDeleteWorksheetDateFilterValidateBeforeCall(name, sheetName, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterDeleteWorksheetFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param criteria  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterDeleteWorksheetFilterCall(String name, String sheetName, Integer fieldIndex, String criteria, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (criteria != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria", criteria));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterDeleteWorksheetFilterValidateBeforeCall(String name, String sheetName, Integer fieldIndex, String criteria, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterDeleteWorksheetFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterDeleteWorksheetFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterDeleteWorksheetFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterDeleteWorksheetFilterCall(name, sheetName, fieldIndex, criteria, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a filter for a filter column.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param criteria  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsAutoFilterDeleteWorksheetFilter(String name, String sheetName, Integer fieldIndex, String criteria, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsAutoFilterDeleteWorksheetFilterWithHttpInfo(name, sheetName, fieldIndex, criteria, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete a filter for a filter column.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param criteria  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsAutoFilterDeleteWorksheetFilterWithHttpInfo(String name, String sheetName, Integer fieldIndex, String criteria, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterDeleteWorksheetFilterValidateBeforeCall(name, sheetName, fieldIndex, criteria, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a filter for a filter column.              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param criteria  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterDeleteWorksheetFilterAsync(String name, String sheetName, Integer fieldIndex, String criteria, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterDeleteWorksheetFilterValidateBeforeCall(name, sheetName, fieldIndex, criteria, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterGetWorksheetAutoFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterGetWorksheetAutoFilterCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterGetWorksheetAutoFilterValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterGetWorksheetAutoFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterGetWorksheetAutoFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterGetWorksheetAutoFilterCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Auto filter Description
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return AutoFilterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoFilterResponse cellsAutoFilterGetWorksheetAutoFilter(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<AutoFilterResponse> resp = cellsAutoFilterGetWorksheetAutoFilterWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get Auto filter Description
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;AutoFilterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoFilterResponse> cellsAutoFilterGetWorksheetAutoFilterWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterGetWorksheetAutoFilterValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<AutoFilterResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Auto filter Description (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterGetWorksheetAutoFilterAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<AutoFilterResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterGetWorksheetAutoFilterValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoFilterResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPostWorksheetAutoFilterRefresh
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPostWorksheetAutoFilterRefreshCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/refresh"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPostWorksheetAutoFilterRefreshValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPostWorksheetAutoFilterRefresh(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPostWorksheetAutoFilterRefresh(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetAutoFilterRefreshCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsAutoFilterPostWorksheetAutoFilterRefresh(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetAutoFilterRefreshValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPostWorksheetAutoFilterRefreshAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetAutoFilterRefreshValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPostWorksheetMatchBlanks
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPostWorksheetMatchBlanksCall(String name, String sheetName, Integer fieldIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchBlanks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPostWorksheetMatchBlanksValidateBeforeCall(String name, String sheetName, Integer fieldIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPostWorksheetMatchBlanks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPostWorksheetMatchBlanks(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPostWorksheetMatchBlanks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetMatchBlanksCall(name, sheetName, fieldIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Match all blank cell in the list.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsAutoFilterPostWorksheetMatchBlanks(String name, String sheetName, Integer fieldIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo(name, sheetName, fieldIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Match all blank cell in the list.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo(String name, String sheetName, Integer fieldIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetMatchBlanksValidateBeforeCall(name, sheetName, fieldIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Match all blank cell in the list. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPostWorksheetMatchBlanksAsync(String name, String sheetName, Integer fieldIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetMatchBlanksValidateBeforeCall(name, sheetName, fieldIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPostWorksheetMatchNonBlanks
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPostWorksheetMatchNonBlanksCall(String name, String sheetName, Integer fieldIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchNonBlanks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPostWorksheetMatchNonBlanksValidateBeforeCall(String name, String sheetName, Integer fieldIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPostWorksheetMatchNonBlanks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPostWorksheetMatchNonBlanks(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPostWorksheetMatchNonBlanks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetMatchNonBlanksCall(name, sheetName, fieldIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Match all not blank cell in the list.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsAutoFilterPostWorksheetMatchNonBlanks(String name, String sheetName, Integer fieldIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo(name, sheetName, fieldIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Match all not blank cell in the list.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo(String name, String sheetName, Integer fieldIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetMatchNonBlanksValidateBeforeCall(name, sheetName, fieldIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Match all not blank cell in the list.              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPostWorksheetMatchNonBlanksAsync(String name, String sheetName, Integer fieldIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetMatchNonBlanksValidateBeforeCall(name, sheetName, fieldIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetColorFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param colorFilter  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetColorFilterCall(String name, String sheetName, String range, Integer fieldIndex, ColorFilterRequest colorFilter, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = colorFilter;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/colorFilter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetColorFilterValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, ColorFilterRequest colorFilter, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetColorFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetColorFilter(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetColorFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetColorFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetColorFilterCall(name, sheetName, range, fieldIndex, colorFilter, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param colorFilter  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsAutoFilterPutWorksheetColorFilter(String name, String sheetName, String range, Integer fieldIndex, ColorFilterRequest colorFilter, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsAutoFilterPutWorksheetColorFilterWithHttpInfo(name, sheetName, range, fieldIndex, colorFilter, matchBlanks, refresh, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param colorFilter  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsAutoFilterPutWorksheetColorFilterWithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, ColorFilterRequest colorFilter, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetColorFilterValidateBeforeCall(name, sheetName, range, fieldIndex, colorFilter, matchBlanks, refresh, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param colorFilter  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetColorFilterAsync(String name, String sheetName, String range, Integer fieldIndex, ColorFilterRequest colorFilter, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetColorFilterValidateBeforeCall(name, sheetName, range, fieldIndex, colorFilter, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetCustomFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param operatorType1  (required)
     * @param criteria1  (required)
     * @param isAnd  (optional)
     * @param operatorType2  (optional)
     * @param criteria2  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetCustomFilterCall(String name, String sheetName, String range, Integer fieldIndex, String operatorType1, String criteria1, Boolean isAnd, String operatorType2, String criteria2, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/custom"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (operatorType1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "operatorType1", operatorType1));
        if (criteria1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria1", criteria1));
        if (isAnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isAnd", isAnd));
        if (operatorType2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "operatorType2", operatorType2));
        if (criteria2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria2", criteria2));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetCustomFilterValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, String operatorType1, String criteria1, Boolean isAnd, String operatorType2, String criteria2, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetCustomFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetCustomFilter(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetCustomFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetCustomFilter(Async)");
        }
        
        // verify the required parameter 'operatorType1' is set
        if (operatorType1 == null) {
            throw new ApiException("Missing the required parameter 'operatorType1' when calling cellsAutoFilterPutWorksheetCustomFilter(Async)");
        }
        
        // verify the required parameter 'criteria1' is set
        if (criteria1 == null) {
            throw new ApiException("Missing the required parameter 'criteria1' when calling cellsAutoFilterPutWorksheetCustomFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetCustomFilterCall(name, sheetName, range, fieldIndex, operatorType1, criteria1, isAnd, operatorType2, criteria2, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Filters a list with a custom criteria.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param operatorType1  (required)
     * @param criteria1  (required)
     * @param isAnd  (optional)
     * @param operatorType2  (optional)
     * @param criteria2  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsAutoFilterPutWorksheetCustomFilter(String name, String sheetName, String range, Integer fieldIndex, String operatorType1, String criteria1, Boolean isAnd, String operatorType2, String criteria2, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsAutoFilterPutWorksheetCustomFilterWithHttpInfo(name, sheetName, range, fieldIndex, operatorType1, criteria1, isAnd, operatorType2, criteria2, matchBlanks, refresh, folder, storageName);
        return resp.getData();
    }

    /**
     * Filters a list with a custom criteria.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param operatorType1  (required)
     * @param criteria1  (required)
     * @param isAnd  (optional)
     * @param operatorType2  (optional)
     * @param criteria2  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsAutoFilterPutWorksheetCustomFilterWithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, String operatorType1, String criteria1, Boolean isAnd, String operatorType2, String criteria2, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetCustomFilterValidateBeforeCall(name, sheetName, range, fieldIndex, operatorType1, criteria1, isAnd, operatorType2, criteria2, matchBlanks, refresh, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Filters a list with a custom criteria.              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param operatorType1  (required)
     * @param criteria1  (required)
     * @param isAnd  (optional)
     * @param operatorType2  (optional)
     * @param criteria2  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetCustomFilterAsync(String name, String sheetName, String range, Integer fieldIndex, String operatorType1, String criteria1, Boolean isAnd, String operatorType2, String criteria2, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetCustomFilterValidateBeforeCall(name, sheetName, range, fieldIndex, operatorType1, criteria1, isAnd, operatorType2, criteria2, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetDateFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetDateFilterCall(String name, String sheetName, String range, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (dateTimeGroupingType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateTimeGroupingType", dateTimeGroupingType));
        if (year != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "year", year));
        if (month != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "month", month));
        if (day != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "day", day));
        if (hour != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hour", hour));
        if (minute != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "minute", minute));
        if (second != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "second", second));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetDateFilterValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'dateTimeGroupingType' is set
        if (dateTimeGroupingType == null) {
            throw new ApiException("Missing the required parameter 'dateTimeGroupingType' when calling cellsAutoFilterPutWorksheetDateFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetDateFilterCall(name, sheetName, range, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * add date filter in worksheet 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsAutoFilterPutWorksheetDateFilter(String name, String sheetName, String range, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsAutoFilterPutWorksheetDateFilterWithHttpInfo(name, sheetName, range, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, matchBlanks, refresh, folder, storageName);
        return resp.getData();
    }

    /**
     * add date filter in worksheet 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsAutoFilterPutWorksheetDateFilterWithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetDateFilterValidateBeforeCall(name, sheetName, range, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, matchBlanks, refresh, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * add date filter in worksheet  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetDateFilterAsync(String name, String sheetName, String range, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetDateFilterValidateBeforeCall(name, sheetName, range, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetDynamicFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dynamicFilterType  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetDynamicFilterCall(String name, String sheetName, String range, Integer fieldIndex, String dynamicFilterType, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dynamicFilter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (dynamicFilterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dynamicFilterType", dynamicFilterType));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetDynamicFilterValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, String dynamicFilterType, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetDynamicFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetDynamicFilter(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetDynamicFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetDynamicFilter(Async)");
        }
        
        // verify the required parameter 'dynamicFilterType' is set
        if (dynamicFilterType == null) {
            throw new ApiException("Missing the required parameter 'dynamicFilterType' when calling cellsAutoFilterPutWorksheetDynamicFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetDynamicFilterCall(name, sheetName, range, fieldIndex, dynamicFilterType, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dynamicFilterType  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsAutoFilterPutWorksheetDynamicFilter(String name, String sheetName, String range, Integer fieldIndex, String dynamicFilterType, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo(name, sheetName, range, fieldIndex, dynamicFilterType, matchBlanks, refresh, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dynamicFilterType  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, String dynamicFilterType, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetDynamicFilterValidateBeforeCall(name, sheetName, range, fieldIndex, dynamicFilterType, matchBlanks, refresh, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dynamicFilterType  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetDynamicFilterAsync(String name, String sheetName, String range, Integer fieldIndex, String dynamicFilterType, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetDynamicFilterValidateBeforeCall(name, sheetName, range, fieldIndex, dynamicFilterType, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param criteria  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetFilterCall(String name, String sheetName, String range, Integer fieldIndex, String criteria, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (criteria != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria", criteria));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetFilterValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, String criteria, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetFilter(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetFilter(Async)");
        }
        
        // verify the required parameter 'criteria' is set
        if (criteria == null) {
            throw new ApiException("Missing the required parameter 'criteria' when calling cellsAutoFilterPutWorksheetFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetFilterCall(name, sheetName, range, fieldIndex, criteria, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a filter for a filter column.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param criteria  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsAutoFilterPutWorksheetFilter(String name, String sheetName, String range, Integer fieldIndex, String criteria, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsAutoFilterPutWorksheetFilterWithHttpInfo(name, sheetName, range, fieldIndex, criteria, matchBlanks, refresh, folder, storageName);
        return resp.getData();
    }

    /**
     * Adds a filter for a filter column.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param criteria  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsAutoFilterPutWorksheetFilterWithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, String criteria, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetFilterValidateBeforeCall(name, sheetName, range, fieldIndex, criteria, matchBlanks, refresh, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a filter for a filter column.              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param criteria  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetFilterAsync(String name, String sheetName, String range, Integer fieldIndex, String criteria, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetFilterValidateBeforeCall(name, sheetName, range, fieldIndex, criteria, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetFilterTop10
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param isTop  (required)
     * @param isPercent  (required)
     * @param itemCount  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetFilterTop10Call(String name, String sheetName, String range, Integer fieldIndex, Boolean isTop, Boolean isPercent, Integer itemCount, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filterTop10"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (isTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isTop", isTop));
        if (isPercent != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isPercent", isPercent));
        if (itemCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "itemCount", itemCount));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetFilterTop10ValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, Boolean isTop, Boolean isPercent, Integer itemCount, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        // verify the required parameter 'isTop' is set
        if (isTop == null) {
            throw new ApiException("Missing the required parameter 'isTop' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        // verify the required parameter 'isPercent' is set
        if (isPercent == null) {
            throw new ApiException("Missing the required parameter 'isPercent' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        // verify the required parameter 'itemCount' is set
        if (itemCount == null) {
            throw new ApiException("Missing the required parameter 'itemCount' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetFilterTop10Call(name, sheetName, range, fieldIndex, isTop, isPercent, itemCount, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Filter the top 10 item in the list
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param isTop  (required)
     * @param isPercent  (required)
     * @param itemCount  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsAutoFilterPutWorksheetFilterTop10(String name, String sheetName, String range, Integer fieldIndex, Boolean isTop, Boolean isPercent, Integer itemCount, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsAutoFilterPutWorksheetFilterTop10WithHttpInfo(name, sheetName, range, fieldIndex, isTop, isPercent, itemCount, matchBlanks, refresh, folder, storageName);
        return resp.getData();
    }

    /**
     * Filter the top 10 item in the list
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param isTop  (required)
     * @param isPercent  (required)
     * @param itemCount  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsAutoFilterPutWorksheetFilterTop10WithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, Boolean isTop, Boolean isPercent, Integer itemCount, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetFilterTop10ValidateBeforeCall(name, sheetName, range, fieldIndex, isTop, isPercent, itemCount, matchBlanks, refresh, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Filter the top 10 item in the list (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param isTop  (required)
     * @param isPercent  (required)
     * @param itemCount  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetFilterTop10Async(String name, String sheetName, String range, Integer fieldIndex, Boolean isTop, Boolean isPercent, Integer itemCount, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetFilterTop10ValidateBeforeCall(name, sheetName, range, fieldIndex, isTop, isPercent, itemCount, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetIconFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param iconSetType  (required)
     * @param iconId  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetIconFilterCall(String name, String sheetName, String range, Integer fieldIndex, String iconSetType, Integer iconId, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/iconFilter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (iconSetType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "iconSetType", iconSetType));
        if (iconId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "iconId", iconId));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetIconFilterValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, String iconSetType, Integer iconId, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetIconFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetIconFilter(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetIconFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetIconFilter(Async)");
        }
        
        // verify the required parameter 'iconSetType' is set
        if (iconSetType == null) {
            throw new ApiException("Missing the required parameter 'iconSetType' when calling cellsAutoFilterPutWorksheetIconFilter(Async)");
        }
        
        // verify the required parameter 'iconId' is set
        if (iconId == null) {
            throw new ApiException("Missing the required parameter 'iconId' when calling cellsAutoFilterPutWorksheetIconFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetIconFilterCall(name, sheetName, range, fieldIndex, iconSetType, iconId, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds an icon filter.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param iconSetType  (required)
     * @param iconId  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsAutoFilterPutWorksheetIconFilter(String name, String sheetName, String range, Integer fieldIndex, String iconSetType, Integer iconId, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsAutoFilterPutWorksheetIconFilterWithHttpInfo(name, sheetName, range, fieldIndex, iconSetType, iconId, matchBlanks, refresh, folder, storageName);
        return resp.getData();
    }

    /**
     * Adds an icon filter.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param iconSetType  (required)
     * @param iconId  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsAutoFilterPutWorksheetIconFilterWithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, String iconSetType, Integer iconId, Boolean matchBlanks, Boolean refresh, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetIconFilterValidateBeforeCall(name, sheetName, range, fieldIndex, iconSetType, iconId, matchBlanks, refresh, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds an icon filter. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param iconSetType  (required)
     * @param iconId  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetIconFilterAsync(String name, String sheetName, String range, Integer fieldIndex, String iconSetType, Integer iconId, Boolean matchBlanks, Boolean refresh, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetIconFilterValidateBeforeCall(name, sheetName, range, fieldIndex, iconSetType, iconId, matchBlanks, refresh, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoshapesGetWorksheetAutoshape
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param autoshapeNumber The autoshape number. (required)
     * @param format Exported format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoshapesGetWorksheetAutoshapeCall(String name, String sheetName, Integer autoshapeNumber, String format, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoshapes/{autoshapeNumber}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "autoshapeNumber" + "\\}", apiClient.escapeString(autoshapeNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoshapesGetWorksheetAutoshapeValidateBeforeCall(String name, String sheetName, Integer autoshapeNumber, String format, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoshapesGetWorksheetAutoshape(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoshapesGetWorksheetAutoshape(Async)");
        }
        
        // verify the required parameter 'autoshapeNumber' is set
        if (autoshapeNumber == null) {
            throw new ApiException("Missing the required parameter 'autoshapeNumber' when calling cellsAutoshapesGetWorksheetAutoshape(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoshapesGetWorksheetAutoshapeCall(name, sheetName, autoshapeNumber, format, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get autoshape info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param autoshapeNumber The autoshape number. (required)
     * @param format Exported format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsAutoshapesGetWorksheetAutoshape(String name, String sheetName, Integer autoshapeNumber, String format, String folder, String storageName) throws ApiException {
        ApiResponse<File> resp = cellsAutoshapesGetWorksheetAutoshapeWithHttpInfo(name, sheetName, autoshapeNumber, format, folder, storageName);
        return resp.getData();
    }

    /**
     * Get autoshape info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param autoshapeNumber The autoshape number. (required)
     * @param format Exported format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsAutoshapesGetWorksheetAutoshapeWithHttpInfo(String name, String sheetName, Integer autoshapeNumber, String format, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoshapesGetWorksheetAutoshapeValidateBeforeCall(name, sheetName, autoshapeNumber, format, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get autoshape info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param autoshapeNumber The autoshape number. (required)
     * @param format Exported format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoshapesGetWorksheetAutoshapeAsync(String name, String sheetName, Integer autoshapeNumber, String format, String folder, String storageName, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoshapesGetWorksheetAutoshapeValidateBeforeCall(name, sheetName, autoshapeNumber, format, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoshapesGetWorksheetAutoshapes
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoshapesGetWorksheetAutoshapesCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoshapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoshapesGetWorksheetAutoshapesValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoshapesGetWorksheetAutoshapes(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoshapesGetWorksheetAutoshapes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoshapesGetWorksheetAutoshapesCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet autoshapes info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return AutoShapesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoShapesResponse cellsAutoshapesGetWorksheetAutoshapes(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<AutoShapesResponse> resp = cellsAutoshapesGetWorksheetAutoshapesWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet autoshapes info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;AutoShapesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoShapesResponse> cellsAutoshapesGetWorksheetAutoshapesWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoshapesGetWorksheetAutoshapesValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<AutoShapesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet autoshapes info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoshapesGetWorksheetAutoshapesAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<AutoShapesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoshapesGetWorksheetAutoshapesValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoShapesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartAreaGetChartArea
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartAreaGetChartAreaCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartAreaGetChartAreaValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartAreaGetChartArea(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartAreaGetChartArea(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartAreaGetChartArea(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chart area info.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ChartAreaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChartAreaResponse cellsChartAreaGetChartArea(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        ApiResponse<ChartAreaResponse> resp = cellsChartAreaGetChartAreaWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Get chart area info.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ChartAreaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChartAreaResponse> cellsChartAreaGetChartAreaWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ChartAreaResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chart area info. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartAreaGetChartAreaAsync(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ApiCallback<ChartAreaResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChartAreaResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartAreaGetChartAreaBorder
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartAreaGetChartAreaBorderCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/border"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartAreaGetChartAreaBorderValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartAreaGetChartAreaBorder(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartAreaGetChartAreaBorder(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartAreaGetChartAreaBorder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaBorderCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chart area border info.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return LineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineResponse cellsChartAreaGetChartAreaBorder(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        ApiResponse<LineResponse> resp = cellsChartAreaGetChartAreaBorderWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Get chart area border info.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;LineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineResponse> cellsChartAreaGetChartAreaBorderWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaBorderValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<LineResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chart area border info. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartAreaGetChartAreaBorderAsync(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ApiCallback<LineResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaBorderValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartAreaGetChartAreaFillFormat
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartAreaGetChartAreaFillFormatCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/fillFormat"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartAreaGetChartAreaFillFormatValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartAreaGetChartAreaFillFormat(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartAreaGetChartAreaFillFormat(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartAreaGetChartAreaFillFormat(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaFillFormatCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chart area fill format info.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return FillFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FillFormatResponse cellsChartAreaGetChartAreaFillFormat(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        ApiResponse<FillFormatResponse> resp = cellsChartAreaGetChartAreaFillFormatWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Get chart area fill format info.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;FillFormatResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FillFormatResponse> cellsChartAreaGetChartAreaFillFormatWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaFillFormatValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<FillFormatResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chart area fill format info. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartAreaGetChartAreaFillFormatAsync(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ApiCallback<FillFormatResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaFillFormatValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FillFormatResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsDeleteWorksheetChartLegend
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetChartLegendCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsDeleteWorksheetChartLegendValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsDeleteWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsDeleteWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsDeleteWorksheetChartLegend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetChartLegendCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Hide legend in chart
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsChartsDeleteWorksheetChartLegend(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsChartsDeleteWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Hide legend in chart
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsChartsDeleteWorksheetChartLegendWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Hide legend in chart (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetChartLegendAsync(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsDeleteWorksheetChartTitle
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetChartTitleCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsDeleteWorksheetChartTitleValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsDeleteWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsDeleteWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsDeleteWorksheetChartTitle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetChartTitleCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Hide title in chart
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsChartsDeleteWorksheetChartTitle(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsChartsDeleteWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Hide title in chart
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsChartsDeleteWorksheetChartTitleWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Hide title in chart (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetChartTitleAsync(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsDeleteWorksheetClearCharts
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetClearChartsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsDeleteWorksheetClearChartsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsDeleteWorksheetClearCharts(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsDeleteWorksheetClearCharts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetClearChartsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clear the charts.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsChartsDeleteWorksheetClearCharts(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsChartsDeleteWorksheetClearChartsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Clear the charts.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsChartsDeleteWorksheetClearChartsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetClearChartsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clear the charts. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetClearChartsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetClearChartsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsDeleteWorksheetDeleteChart
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetDeleteChartCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsDeleteWorksheetDeleteChartValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsDeleteWorksheetDeleteChart(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsDeleteWorksheetDeleteChart(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsDeleteWorksheetDeleteChart(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetDeleteChartCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet chart by index.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ChartsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChartsResponse cellsChartsDeleteWorksheetDeleteChart(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        ApiResponse<ChartsResponse> resp = cellsChartsDeleteWorksheetDeleteChartWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete worksheet chart by index.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ChartsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChartsResponse> cellsChartsDeleteWorksheetDeleteChartWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetDeleteChartValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ChartsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet chart by index. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetDeleteChartAsync(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ApiCallback<ChartsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetDeleteChartValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChartsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsGetWorksheetChart
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartNumber The chart number. (required)
     * @param format The exported file format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartCall(String name, String sheetName, Integer chartNumber, String format, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartNumber}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartNumber" + "\\}", apiClient.escapeString(chartNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsGetWorksheetChartValidateBeforeCall(String name, String sheetName, Integer chartNumber, String format, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsGetWorksheetChart(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsGetWorksheetChart(Async)");
        }
        
        // verify the required parameter 'chartNumber' is set
        if (chartNumber == null) {
            throw new ApiException("Missing the required parameter 'chartNumber' when calling cellsChartsGetWorksheetChart(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartCall(name, sheetName, chartNumber, format, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chart info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartNumber The chart number. (required)
     * @param format The exported file format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsChartsGetWorksheetChart(String name, String sheetName, Integer chartNumber, String format, String folder, String storageName) throws ApiException {
        ApiResponse<File> resp = cellsChartsGetWorksheetChartWithHttpInfo(name, sheetName, chartNumber, format, folder, storageName);
        return resp.getData();
    }

    /**
     * Get chart info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartNumber The chart number. (required)
     * @param format The exported file format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsChartsGetWorksheetChartWithHttpInfo(String name, String sheetName, Integer chartNumber, String format, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartValidateBeforeCall(name, sheetName, chartNumber, format, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chart info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartNumber The chart number. (required)
     * @param format The exported file format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartAsync(String name, String sheetName, Integer chartNumber, String format, String folder, String storageName, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartValidateBeforeCall(name, sheetName, chartNumber, format, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsGetWorksheetChartLegend
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartLegendCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsGetWorksheetChartLegendValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsGetWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsGetWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsGetWorksheetChartLegend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartLegendCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chart legend
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return LegendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegendResponse cellsChartsGetWorksheetChartLegend(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        ApiResponse<LegendResponse> resp = cellsChartsGetWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Get chart legend
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;LegendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegendResponse> cellsChartsGetWorksheetChartLegendWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<LegendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chart legend (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartLegendAsync(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ApiCallback<LegendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsGetWorksheetChartTitle
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartTitleCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsGetWorksheetChartTitleValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsGetWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsGetWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsGetWorksheetChartTitle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartTitleCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chart title
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return TitleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TitleResponse cellsChartsGetWorksheetChartTitle(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        ApiResponse<TitleResponse> resp = cellsChartsGetWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Get chart title
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;TitleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TitleResponse> cellsChartsGetWorksheetChartTitleWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<TitleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chart title (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartTitleAsync(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ApiCallback<TitleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TitleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsGetWorksheetCharts
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsGetWorksheetChartsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsGetWorksheetCharts(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsGetWorksheetCharts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet charts info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ChartsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChartsResponse cellsChartsGetWorksheetCharts(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<ChartsResponse> resp = cellsChartsGetWorksheetChartsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet charts info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ChartsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChartsResponse> cellsChartsGetWorksheetChartsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ChartsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet charts info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<ChartsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChartsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsPostWorksheetChart
     * @param name  (required)
     * @param sheetName  (required)
     * @param chartIndex  (required)
     * @param chart  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPostWorksheetChartCall(String name, String sheetName, Integer chartIndex, Chart chart, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = chart;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsPostWorksheetChartValidateBeforeCall(String name, String sheetName, Integer chartIndex, Chart chart, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsPostWorksheetChart(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsPostWorksheetChart(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsPostWorksheetChart(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartCall(name, sheetName, chartIndex, chart, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update chart propreties
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param chartIndex  (required)
     * @param chart  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsChartsPostWorksheetChart(String name, String sheetName, Integer chartIndex, Chart chart, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsChartsPostWorksheetChartWithHttpInfo(name, sheetName, chartIndex, chart, folder, storageName);
        return resp.getData();
    }

    /**
     * Update chart propreties
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param chartIndex  (required)
     * @param chart  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsChartsPostWorksheetChartWithHttpInfo(String name, String sheetName, Integer chartIndex, Chart chart, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartValidateBeforeCall(name, sheetName, chartIndex, chart, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update chart propreties (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param chartIndex  (required)
     * @param chart  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPostWorksheetChartAsync(String name, String sheetName, Integer chartIndex, Chart chart, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartValidateBeforeCall(name, sheetName, chartIndex, chart, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsPostWorksheetChartLegend
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param legend  (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPostWorksheetChartLegendCall(String name, String sheetName, Integer chartIndex, Legend legend, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = legend;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsPostWorksheetChartLegendValidateBeforeCall(String name, String sheetName, Integer chartIndex, Legend legend, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsPostWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsPostWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsPostWorksheetChartLegend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartLegendCall(name, sheetName, chartIndex, legend, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update chart legend
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param legend  (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return LegendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegendResponse cellsChartsPostWorksheetChartLegend(String name, String sheetName, Integer chartIndex, Legend legend, String folder, String storageName) throws ApiException {
        ApiResponse<LegendResponse> resp = cellsChartsPostWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, legend, folder, storageName);
        return resp.getData();
    }

    /**
     * Update chart legend
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param legend  (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;LegendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegendResponse> cellsChartsPostWorksheetChartLegendWithHttpInfo(String name, String sheetName, Integer chartIndex, Legend legend, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, legend, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<LegendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update chart legend (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param legend  (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPostWorksheetChartLegendAsync(String name, String sheetName, Integer chartIndex, Legend legend, String folder, String storageName, final ApiCallback<LegendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, legend, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsPostWorksheetChartTitle
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPostWorksheetChartTitleCall(String name, String sheetName, Integer chartIndex, Title title, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = title;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsPostWorksheetChartTitleValidateBeforeCall(String name, String sheetName, Integer chartIndex, Title title, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsPostWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsPostWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsPostWorksheetChartTitle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartTitleCall(name, sheetName, chartIndex, title, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update chart title
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return TitleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TitleResponse cellsChartsPostWorksheetChartTitle(String name, String sheetName, Integer chartIndex, Title title, String folder, String storageName) throws ApiException {
        ApiResponse<TitleResponse> resp = cellsChartsPostWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, title, folder, storageName);
        return resp.getData();
    }

    /**
     * Update chart title
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;TitleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TitleResponse> cellsChartsPostWorksheetChartTitleWithHttpInfo(String name, String sheetName, Integer chartIndex, Title title, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, title, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<TitleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update chart title (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPostWorksheetChartTitleAsync(String name, String sheetName, Integer chartIndex, Title title, String folder, String storageName, final ApiCallback<TitleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, title, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TitleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsPutWorksheetAddChart
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param chartType Chart type, please refer property Type in chart resource. (required)
     * @param upperLeftRow New chart upper left row. (optional, default to 0)
     * @param upperLeftColumn New chart upperleft column. (optional, default to 0)
     * @param lowerRightRow New chart lower right row. (optional, default to 0)
     * @param lowerRightColumn New chart lower right column. (optional, default to 0)
     * @param area Specifies values from which to plot the data series.  (optional)
     * @param isVertical Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)
     * @param categoryData Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)
     * @param isAutoGetSerialName Specifies whether auto update serial name.  (optional, default to true)
     * @param title Specifies chart title name. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param dataLabels  (optional, default to true)
     * @param dataLabelsPosition  (optional, default to Above)
     * @param pivotTableSheet  (optional)
     * @param pivotTableName  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPutWorksheetAddChartCall(String name, String sheetName, String chartType, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String area, Boolean isVertical, String categoryData, Boolean isAutoGetSerialName, String title, String folder, String storageName, Boolean dataLabels, String dataLabelsPosition, String pivotTableSheet, String pivotTableName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (chartType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "chartType", chartType));
        if (upperLeftRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftRow", upperLeftRow));
        if (upperLeftColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftColumn", upperLeftColumn));
        if (lowerRightRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lowerRightRow", lowerRightRow));
        if (lowerRightColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lowerRightColumn", lowerRightColumn));
        if (area != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "area", area));
        if (isVertical != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isVertical", isVertical));
        if (categoryData != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryData", categoryData));
        if (isAutoGetSerialName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isAutoGetSerialName", isAutoGetSerialName));
        if (title != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "title", title));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));
        if (dataLabels != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataLabels", dataLabels));
        if (dataLabelsPosition != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataLabelsPosition", dataLabelsPosition));
        if (pivotTableSheet != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotTableSheet", pivotTableSheet));
        if (pivotTableName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotTableName", pivotTableName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsPutWorksheetAddChartValidateBeforeCall(String name, String sheetName, String chartType, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String area, Boolean isVertical, String categoryData, Boolean isAutoGetSerialName, String title, String folder, String storageName, Boolean dataLabels, String dataLabelsPosition, String pivotTableSheet, String pivotTableName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsPutWorksheetAddChart(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsPutWorksheetAddChart(Async)");
        }
        
        // verify the required parameter 'chartType' is set
        if (chartType == null) {
            throw new ApiException("Missing the required parameter 'chartType' when calling cellsChartsPutWorksheetAddChart(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsPutWorksheetAddChartCall(name, sheetName, chartType, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, area, isVertical, categoryData, isAutoGetSerialName, title, folder, storageName, dataLabels, dataLabelsPosition, pivotTableSheet, pivotTableName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add new chart to worksheet.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param chartType Chart type, please refer property Type in chart resource. (required)
     * @param upperLeftRow New chart upper left row. (optional, default to 0)
     * @param upperLeftColumn New chart upperleft column. (optional, default to 0)
     * @param lowerRightRow New chart lower right row. (optional, default to 0)
     * @param lowerRightColumn New chart lower right column. (optional, default to 0)
     * @param area Specifies values from which to plot the data series.  (optional)
     * @param isVertical Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)
     * @param categoryData Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)
     * @param isAutoGetSerialName Specifies whether auto update serial name.  (optional, default to true)
     * @param title Specifies chart title name. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param dataLabels  (optional, default to true)
     * @param dataLabelsPosition  (optional, default to Above)
     * @param pivotTableSheet  (optional)
     * @param pivotTableName  (optional)
     * @return ChartsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChartsResponse cellsChartsPutWorksheetAddChart(String name, String sheetName, String chartType, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String area, Boolean isVertical, String categoryData, Boolean isAutoGetSerialName, String title, String folder, String storageName, Boolean dataLabels, String dataLabelsPosition, String pivotTableSheet, String pivotTableName) throws ApiException {
        ApiResponse<ChartsResponse> resp = cellsChartsPutWorksheetAddChartWithHttpInfo(name, sheetName, chartType, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, area, isVertical, categoryData, isAutoGetSerialName, title, folder, storageName, dataLabels, dataLabelsPosition, pivotTableSheet, pivotTableName);
        return resp.getData();
    }

    /**
     * Add new chart to worksheet.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param chartType Chart type, please refer property Type in chart resource. (required)
     * @param upperLeftRow New chart upper left row. (optional, default to 0)
     * @param upperLeftColumn New chart upperleft column. (optional, default to 0)
     * @param lowerRightRow New chart lower right row. (optional, default to 0)
     * @param lowerRightColumn New chart lower right column. (optional, default to 0)
     * @param area Specifies values from which to plot the data series.  (optional)
     * @param isVertical Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)
     * @param categoryData Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)
     * @param isAutoGetSerialName Specifies whether auto update serial name.  (optional, default to true)
     * @param title Specifies chart title name. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param dataLabels  (optional, default to true)
     * @param dataLabelsPosition  (optional, default to Above)
     * @param pivotTableSheet  (optional)
     * @param pivotTableName  (optional)
     * @return ApiResponse&lt;ChartsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChartsResponse> cellsChartsPutWorksheetAddChartWithHttpInfo(String name, String sheetName, String chartType, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String area, Boolean isVertical, String categoryData, Boolean isAutoGetSerialName, String title, String folder, String storageName, Boolean dataLabels, String dataLabelsPosition, String pivotTableSheet, String pivotTableName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsPutWorksheetAddChartValidateBeforeCall(name, sheetName, chartType, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, area, isVertical, categoryData, isAutoGetSerialName, title, folder, storageName, dataLabels, dataLabelsPosition, pivotTableSheet, pivotTableName, null, null);
        Type localVarReturnType = new TypeToken<ChartsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new chart to worksheet. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param chartType Chart type, please refer property Type in chart resource. (required)
     * @param upperLeftRow New chart upper left row. (optional, default to 0)
     * @param upperLeftColumn New chart upperleft column. (optional, default to 0)
     * @param lowerRightRow New chart lower right row. (optional, default to 0)
     * @param lowerRightColumn New chart lower right column. (optional, default to 0)
     * @param area Specifies values from which to plot the data series.  (optional)
     * @param isVertical Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)
     * @param categoryData Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)
     * @param isAutoGetSerialName Specifies whether auto update serial name.  (optional, default to true)
     * @param title Specifies chart title name. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param dataLabels  (optional, default to true)
     * @param dataLabelsPosition  (optional, default to Above)
     * @param pivotTableSheet  (optional)
     * @param pivotTableName  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPutWorksheetAddChartAsync(String name, String sheetName, String chartType, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String area, Boolean isVertical, String categoryData, Boolean isAutoGetSerialName, String title, String folder, String storageName, Boolean dataLabels, String dataLabelsPosition, String pivotTableSheet, String pivotTableName, final ApiCallback<ChartsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsPutWorksheetAddChartValidateBeforeCall(name, sheetName, chartType, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, area, isVertical, categoryData, isAutoGetSerialName, title, folder, storageName, dataLabels, dataLabelsPosition, pivotTableSheet, pivotTableName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChartsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsPutWorksheetChartLegend
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPutWorksheetChartLegendCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsPutWorksheetChartLegendValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsPutWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsPutWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsPutWorksheetChartLegend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsPutWorksheetChartLegendCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Show legend in chart
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsChartsPutWorksheetChartLegend(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsChartsPutWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Show legend in chart
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsChartsPutWorksheetChartLegendWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsPutWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show legend in chart (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPutWorksheetChartLegendAsync(String name, String sheetName, Integer chartIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsPutWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsPutWorksheetChartTitle
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPutWorksheetChartTitleCall(String name, String sheetName, Integer chartIndex, Title title, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = title;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsPutWorksheetChartTitleValidateBeforeCall(String name, String sheetName, Integer chartIndex, Title title, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsPutWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsPutWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsPutWorksheetChartTitle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsPutWorksheetChartTitleCall(name, sheetName, chartIndex, title, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add chart title / Set chart title visible
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return TitleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TitleResponse cellsChartsPutWorksheetChartTitle(String name, String sheetName, Integer chartIndex, Title title, String folder, String storageName) throws ApiException {
        ApiResponse<TitleResponse> resp = cellsChartsPutWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, title, folder, storageName);
        return resp.getData();
    }

    /**
     * Add chart title / Set chart title visible
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;TitleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TitleResponse> cellsChartsPutWorksheetChartTitleWithHttpInfo(String name, String sheetName, Integer chartIndex, Title title, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsPutWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, title, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<TitleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add chart title / Set chart title visible (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPutWorksheetChartTitleAsync(String name, String sheetName, Integer chartIndex, Title title, String folder, String storageName, final ApiCallback<TitleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsPutWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, title, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TitleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsDeleteWorksheetConditionalFormatting
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingCall(String name, String sheetName, Integer index, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingValidateBeforeCall(String name, String sheetName, Integer index, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormatting(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormatting(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormatting(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingCall(name, sheetName, index, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove conditional formatting
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsConditionalFormattingsDeleteWorksheetConditionalFormatting(String name, String sheetName, Integer index, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo(name, sheetName, index, folder, storageName);
        return resp.getData();
    }

    /**
     * Remove conditional formatting
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsConditionalFormattingsDeleteWorksheetConditionalFormattingWithHttpInfo(String name, String sheetName, Integer index, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingValidateBeforeCall(name, sheetName, index, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove conditional formatting (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAsync(String name, String sheetName, Integer index, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingValidateBeforeCall(name, sheetName, index, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea
     * @param name  (required)
     * @param sheetName  (required)
     * @param startRow  (required)
     * @param startColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/area"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (totalColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalColumns", totalColumns));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaValidateBeforeCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(Async)");
        }
        
        // verify the required parameter 'startRow' is set
        if (startRow == null) {
            throw new ApiException("Missing the required parameter 'startRow' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(Async)");
        }
        
        // verify the required parameter 'startColumn' is set
        if (startColumn == null) {
            throw new ApiException("Missing the required parameter 'startColumn' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(Async)");
        }
        
        // verify the required parameter 'totalRows' is set
        if (totalRows == null) {
            throw new ApiException("Missing the required parameter 'totalRows' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(Async)");
        }
        
        // verify the required parameter 'totalColumns' is set
        if (totalColumns == null) {
            throw new ApiException("Missing the required parameter 'totalColumns' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove cell area from conditional formatting.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param startRow  (required)
     * @param startColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsConditionalFormattingsDeleteWorksheetConditionalFormattingArea(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName);
        return resp.getData();
    }

    /**
     * Remove cell area from conditional formatting.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param startRow  (required)
     * @param startColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaWithHttpInfo(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaValidateBeforeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove cell area from conditional formatting. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param startRow  (required)
     * @param startColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaAsync(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingAreaValidateBeforeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsDeleteWorksheetConditionalFormattings
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattings(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsDeleteWorksheetConditionalFormattings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clear all condition formattings
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsConditionalFormattingsDeleteWorksheetConditionalFormattings(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Clear all condition formattings
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clear all condition formattings (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsDeleteWorksheetConditionalFormattingsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsGetWorksheetConditionalFormatting
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsGetWorksheetConditionalFormattingCall(String name, String sheetName, Integer index, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsGetWorksheetConditionalFormattingValidateBeforeCall(String name, String sheetName, Integer index, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsGetWorksheetConditionalFormatting(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsGetWorksheetConditionalFormatting(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsConditionalFormattingsGetWorksheetConditionalFormatting(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsGetWorksheetConditionalFormattingCall(name, sheetName, index, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get conditional formatting
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ConditionalFormattingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConditionalFormattingResponse cellsConditionalFormattingsGetWorksheetConditionalFormatting(String name, String sheetName, Integer index, String folder, String storageName) throws ApiException {
        ApiResponse<ConditionalFormattingResponse> resp = cellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo(name, sheetName, index, folder, storageName);
        return resp.getData();
    }

    /**
     * Get conditional formatting
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ConditionalFormattingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConditionalFormattingResponse> cellsConditionalFormattingsGetWorksheetConditionalFormattingWithHttpInfo(String name, String sheetName, Integer index, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsGetWorksheetConditionalFormattingValidateBeforeCall(name, sheetName, index, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ConditionalFormattingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get conditional formatting (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsGetWorksheetConditionalFormattingAsync(String name, String sheetName, Integer index, String folder, String storageName, final ApiCallback<ConditionalFormattingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsGetWorksheetConditionalFormattingValidateBeforeCall(name, sheetName, index, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConditionalFormattingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsGetWorksheetConditionalFormattings
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsGetWorksheetConditionalFormattingsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsGetWorksheetConditionalFormattingsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsGetWorksheetConditionalFormattings(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsGetWorksheetConditionalFormattings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsGetWorksheetConditionalFormattingsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get conditional formattings 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ConditionalFormattingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConditionalFormattingsResponse cellsConditionalFormattingsGetWorksheetConditionalFormattings(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<ConditionalFormattingsResponse> resp = cellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get conditional formattings 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ConditionalFormattingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConditionalFormattingsResponse> cellsConditionalFormattingsGetWorksheetConditionalFormattingsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsGetWorksheetConditionalFormattingsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ConditionalFormattingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get conditional formattings  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsGetWorksheetConditionalFormattingsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<ConditionalFormattingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsGetWorksheetConditionalFormattingsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConditionalFormattingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsPutWorksheetConditionalFormatting
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellArea  (required)
     * @param formatCondition  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetConditionalFormattingCall(String name, String sheetName, String cellArea, FormatCondition formatCondition, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = formatCondition;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellArea != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellArea", cellArea));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetConditionalFormattingValidateBeforeCall(String name, String sheetName, String cellArea, FormatCondition formatCondition, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsPutWorksheetConditionalFormatting(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsPutWorksheetConditionalFormatting(Async)");
        }
        
        // verify the required parameter 'cellArea' is set
        if (cellArea == null) {
            throw new ApiException("Missing the required parameter 'cellArea' when calling cellsConditionalFormattingsPutWorksheetConditionalFormatting(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetConditionalFormattingCall(name, sheetName, cellArea, formatCondition, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a condition formatting.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellArea  (required)
     * @param formatCondition  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsConditionalFormattingsPutWorksheetConditionalFormatting(String name, String sheetName, String cellArea, FormatCondition formatCondition, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo(name, sheetName, cellArea, formatCondition, folder, storageName);
        return resp.getData();
    }

    /**
     * Add a condition formatting.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellArea  (required)
     * @param formatCondition  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsConditionalFormattingsPutWorksheetConditionalFormattingWithHttpInfo(String name, String sheetName, String cellArea, FormatCondition formatCondition, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetConditionalFormattingValidateBeforeCall(name, sheetName, cellArea, formatCondition, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a condition formatting. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellArea  (required)
     * @param formatCondition  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetConditionalFormattingAsync(String name, String sheetName, String cellArea, FormatCondition formatCondition, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetConditionalFormattingValidateBeforeCall(name, sheetName, cellArea, formatCondition, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsPutWorksheetFormatCondition
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionCall(String name, String sheetName, Integer index, String cellArea, String type, String operatorType, String formula1, String formula2, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellArea != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellArea", cellArea));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (operatorType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "operatorType", operatorType));
        if (formula1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "formula1", formula1));
        if (formula2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "formula2", formula2));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionValidateBeforeCall(String name, String sheetName, Integer index, String cellArea, String type, String operatorType, String formula1, String formula2, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'cellArea' is set
        if (cellArea == null) {
            throw new ApiException("Missing the required parameter 'cellArea' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'operatorType' is set
        if (operatorType == null) {
            throw new ApiException("Missing the required parameter 'operatorType' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'formula1' is set
        if (formula1 == null) {
            throw new ApiException("Missing the required parameter 'formula1' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        // verify the required parameter 'formula2' is set
        if (formula2 == null) {
            throw new ApiException("Missing the required parameter 'formula2' when calling cellsConditionalFormattingsPutWorksheetFormatCondition(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionCall(name, sheetName, index, cellArea, type, operatorType, formula1, formula2, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a format condition.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsConditionalFormattingsPutWorksheetFormatCondition(String name, String sheetName, Integer index, String cellArea, String type, String operatorType, String formula1, String formula2, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo(name, sheetName, index, cellArea, type, operatorType, formula1, formula2, folder, storageName);
        return resp.getData();
    }

    /**
     * Add a format condition.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsConditionalFormattingsPutWorksheetFormatConditionWithHttpInfo(String name, String sheetName, Integer index, String cellArea, String type, String operatorType, String formula1, String formula2, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionValidateBeforeCall(name, sheetName, index, cellArea, type, operatorType, formula1, formula2, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a format condition. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionAsync(String name, String sheetName, Integer index, String cellArea, String type, String operatorType, String formula1, String formula2, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionValidateBeforeCall(name, sheetName, index, cellArea, type, operatorType, formula1, formula2, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsPutWorksheetFormatConditionArea
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionAreaCall(String name, String sheetName, Integer index, String cellArea, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/area"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellArea != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellArea", cellArea));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionAreaValidateBeforeCall(String name, String sheetName, Integer index, String cellArea, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea(Async)");
        }
        
        // verify the required parameter 'cellArea' is set
        if (cellArea == null) {
            throw new ApiException("Missing the required parameter 'cellArea' when calling cellsConditionalFormattingsPutWorksheetFormatConditionArea(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionAreaCall(name, sheetName, index, cellArea, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * add a cell area for format condition             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsConditionalFormattingsPutWorksheetFormatConditionArea(String name, String sheetName, Integer index, String cellArea, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo(name, sheetName, index, cellArea, folder, storageName);
        return resp.getData();
    }

    /**
     * add a cell area for format condition             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsConditionalFormattingsPutWorksheetFormatConditionAreaWithHttpInfo(String name, String sheetName, Integer index, String cellArea, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionAreaValidateBeforeCall(name, sheetName, index, cellArea, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * add a cell area for format condition              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param cellArea  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionAreaAsync(String name, String sheetName, Integer index, String cellArea, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionAreaValidateBeforeCall(name, sheetName, index, cellArea, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsConditionalFormattingsPutWorksheetFormatConditionCondition
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionConditionCall(String name, String sheetName, Integer index, String type, String operatorType, String formula1, String formula2, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/conditionalFormattings/{index}/condition"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (operatorType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "operatorType", operatorType));
        if (formula1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "formula1", formula1));
        if (formula2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "formula2", formula2));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionConditionValidateBeforeCall(String name, String sheetName, Integer index, String type, String operatorType, String formula1, String formula2, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        // verify the required parameter 'operatorType' is set
        if (operatorType == null) {
            throw new ApiException("Missing the required parameter 'operatorType' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        // verify the required parameter 'formula1' is set
        if (formula1 == null) {
            throw new ApiException("Missing the required parameter 'formula1' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        // verify the required parameter 'formula2' is set
        if (formula2 == null) {
            throw new ApiException("Missing the required parameter 'formula2' when calling cellsConditionalFormattingsPutWorksheetFormatConditionCondition(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionConditionCall(name, sheetName, index, type, operatorType, formula1, formula2, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a condition for format condition.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsConditionalFormattingsPutWorksheetFormatConditionCondition(String name, String sheetName, Integer index, String type, String operatorType, String formula1, String formula2, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo(name, sheetName, index, type, operatorType, formula1, formula2, folder, storageName);
        return resp.getData();
    }

    /**
     * Add a condition for format condition.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsConditionalFormattingsPutWorksheetFormatConditionConditionWithHttpInfo(String name, String sheetName, Integer index, String type, String operatorType, String formula1, String formula2, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionConditionValidateBeforeCall(name, sheetName, index, type, operatorType, formula1, formula2, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a condition for format condition. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param type  (required)
     * @param operatorType  (required)
     * @param formula1  (required)
     * @param formula2  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsConditionalFormattingsPutWorksheetFormatConditionConditionAsync(String name, String sheetName, Integer index, String type, String operatorType, String formula1, String formula2, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsConditionalFormattingsPutWorksheetFormatConditionConditionValidateBeforeCall(name, sheetName, index, type, operatorType, formula1, formula2, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsDeleteWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsDeleteWorksheetColumnsCall(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "columnIndex" + "\\}", apiClient.escapeString(columnIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (columns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "columns", columns));
        if (updateReference != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "updateReference", updateReference));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsDeleteWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsDeleteWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsDeleteWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'columnIndex' is set
        if (columnIndex == null) {
            throw new ApiException("Missing the required parameter 'columnIndex' when calling cellsDeleteWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'columns' is set
        if (columns == null) {
            throw new ApiException("Missing the required parameter 'columns' when calling cellsDeleteWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'updateReference' is set
        if (updateReference == null) {
            throw new ApiException("Missing the required parameter 'updateReference' when calling cellsDeleteWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsDeleteWorksheetColumnsCall(name, sheetName, columnIndex, columns, updateReference, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ColumnsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ColumnsResponse cellsDeleteWorksheetColumns(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storageName) throws ApiException {
        ApiResponse<ColumnsResponse> resp = cellsDeleteWorksheetColumnsWithHttpInfo(name, sheetName, columnIndex, columns, updateReference, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ColumnsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ColumnsResponse> cellsDeleteWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsDeleteWorksheetColumnsValidateBeforeCall(name, sheetName, columnIndex, columns, updateReference, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ColumnsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsDeleteWorksheetColumnsAsync(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storageName, final ApiCallback<ColumnsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsDeleteWorksheetColumnsValidateBeforeCall(name, sheetName, columnIndex, columns, updateReference, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ColumnsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsDeleteWorksheetRow
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param rowIndex The row index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsDeleteWorksheetRowCall(String name, String sheetName, Integer rowIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "rowIndex" + "\\}", apiClient.escapeString(rowIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsDeleteWorksheetRowValidateBeforeCall(String name, String sheetName, Integer rowIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsDeleteWorksheetRow(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsDeleteWorksheetRow(Async)");
        }
        
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling cellsDeleteWorksheetRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsDeleteWorksheetRowCall(name, sheetName, rowIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet row.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param rowIndex The row index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsDeleteWorksheetRow(String name, String sheetName, Integer rowIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsDeleteWorksheetRowWithHttpInfo(name, sheetName, rowIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete worksheet row.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param rowIndex The row index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsDeleteWorksheetRowWithHttpInfo(String name, String sheetName, Integer rowIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsDeleteWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet row. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param rowIndex The row index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsDeleteWorksheetRowAsync(String name, String sheetName, Integer rowIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsDeleteWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsDeleteWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsDeleteWorksheetRowsCall(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startrow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startrow", startrow));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (updateReference != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "updateReference", updateReference));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsDeleteWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsDeleteWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsDeleteWorksheetRows(Async)");
        }
        
        // verify the required parameter 'startrow' is set
        if (startrow == null) {
            throw new ApiException("Missing the required parameter 'startrow' when calling cellsDeleteWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsDeleteWorksheetRowsCall(name, sheetName, startrow, totalRows, updateReference, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete several worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsDeleteWorksheetRows(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsDeleteWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, updateReference, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete several worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsDeleteWorksheetRowsWithHttpInfo(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsDeleteWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, updateReference, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete several worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet bame. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsDeleteWorksheetRowsAsync(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsDeleteWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, updateReference, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetCellHtmlString
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell&#39;s  name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetCellHtmlStringCall(String name, String sheetName, String cellName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetCellHtmlStringValidateBeforeCall(String name, String sheetName, String cellName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetCellHtmlString(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetCellHtmlString(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsGetCellHtmlString(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetCellHtmlStringCall(name, sheetName, cellName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read cell data by cell&#39;s name.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell&#39;s  name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object cellsGetCellHtmlString(String name, String sheetName, String cellName, String folder, String storageName) throws ApiException {
        ApiResponse<Object> resp = cellsGetCellHtmlStringWithHttpInfo(name, sheetName, cellName, folder, storageName);
        return resp.getData();
    }

    /**
     * Read cell data by cell&#39;s name.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell&#39;s  name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> cellsGetCellHtmlStringWithHttpInfo(String name, String sheetName, String cellName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetCellHtmlStringValidateBeforeCall(name, sheetName, cellName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read cell data by cell&#39;s name. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell&#39;s  name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetCellHtmlStringAsync(String name, String sheetName, String cellName, String folder, String storageName, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetCellHtmlStringValidateBeforeCall(name, sheetName, cellName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetCell
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellOrMethodName The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetCellCall(String name, String sheetName, String cellOrMethodName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellOrMethodName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellOrMethodName" + "\\}", apiClient.escapeString(cellOrMethodName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetCellValidateBeforeCall(String name, String sheetName, String cellOrMethodName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetCell(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetCell(Async)");
        }
        
        // verify the required parameter 'cellOrMethodName' is set
        if (cellOrMethodName == null) {
            throw new ApiException("Missing the required parameter 'cellOrMethodName' when calling cellsGetWorksheetCell(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetCellCall(name, sheetName, cellOrMethodName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read cell data by cell&#39;s name.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellOrMethodName The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object cellsGetWorksheetCell(String name, String sheetName, String cellOrMethodName, String folder, String storageName) throws ApiException {
        ApiResponse<Object> resp = cellsGetWorksheetCellWithHttpInfo(name, sheetName, cellOrMethodName, folder, storageName);
        return resp.getData();
    }

    /**
     * Read cell data by cell&#39;s name.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellOrMethodName The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> cellsGetWorksheetCellWithHttpInfo(String name, String sheetName, String cellOrMethodName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetCellValidateBeforeCall(name, sheetName, cellOrMethodName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read cell data by cell&#39;s name. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellOrMethodName The cell&#39;s or method name. (Method name like firstcell, endcell etc.) (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetCellAsync(String name, String sheetName, String cellOrMethodName, String folder, String storageName, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetCellValidateBeforeCall(name, sheetName, cellOrMethodName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetCellStyle
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName Cell&#39;s name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetCellStyleCall(String name, String sheetName, String cellName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetCellStyleValidateBeforeCall(String name, String sheetName, String cellName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetCellStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetCellStyle(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsGetWorksheetCellStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetCellStyleCall(name, sheetName, cellName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read cell&#39;s style info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName Cell&#39;s name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return StyleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StyleResponse cellsGetWorksheetCellStyle(String name, String sheetName, String cellName, String folder, String storageName) throws ApiException {
        ApiResponse<StyleResponse> resp = cellsGetWorksheetCellStyleWithHttpInfo(name, sheetName, cellName, folder, storageName);
        return resp.getData();
    }

    /**
     * Read cell&#39;s style info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName Cell&#39;s name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;StyleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StyleResponse> cellsGetWorksheetCellStyleWithHttpInfo(String name, String sheetName, String cellName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetCellStyleValidateBeforeCall(name, sheetName, cellName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<StyleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read cell&#39;s style info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName Cell&#39;s name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetCellStyleAsync(String name, String sheetName, String cellName, String folder, String storageName, final ApiCallback<StyleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetCellStyleValidateBeforeCall(name, sheetName, cellName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StyleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetCells
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param offest Begginig offset. (optional, default to 0)
     * @param count Maximum amount of cells in the response. (optional, default to 0)
     * @param folder Document&#39;s folder name. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetCellsCall(String name, String sheetName, Integer offest, Integer count, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offest != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offest", offest));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetCellsValidateBeforeCall(String name, String sheetName, Integer offest, Integer count, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetCells(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetCells(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetCellsCall(name, sheetName, offest, count, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cells info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param offest Begginig offset. (optional, default to 0)
     * @param count Maximum amount of cells in the response. (optional, default to 0)
     * @param folder Document&#39;s folder name. (optional)
     * @param storageName storage name. (optional)
     * @return CellsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsResponse cellsGetWorksheetCells(String name, String sheetName, Integer offest, Integer count, String folder, String storageName) throws ApiException {
        ApiResponse<CellsResponse> resp = cellsGetWorksheetCellsWithHttpInfo(name, sheetName, offest, count, folder, storageName);
        return resp.getData();
    }

    /**
     * Get cells info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param offest Begginig offset. (optional, default to 0)
     * @param count Maximum amount of cells in the response. (optional, default to 0)
     * @param folder Document&#39;s folder name. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsResponse> cellsGetWorksheetCellsWithHttpInfo(String name, String sheetName, Integer offest, Integer count, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetCellsValidateBeforeCall(name, sheetName, offest, count, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cells info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param offest Begginig offset. (optional, default to 0)
     * @param count Maximum amount of cells in the response. (optional, default to 0)
     * @param folder Document&#39;s folder name. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetCellsAsync(String name, String sheetName, Integer offest, Integer count, String folder, String storageName, final ApiCallback<CellsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetCellsValidateBeforeCall(name, sheetName, offest, count, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetColumn
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetColumnCall(String name, String sheetName, Integer columnIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "columnIndex" + "\\}", apiClient.escapeString(columnIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetColumnValidateBeforeCall(String name, String sheetName, Integer columnIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetColumn(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetColumn(Async)");
        }
        
        // verify the required parameter 'columnIndex' is set
        if (columnIndex == null) {
            throw new ApiException("Missing the required parameter 'columnIndex' when calling cellsGetWorksheetColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetColumnCall(name, sheetName, columnIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheet column data by column&#39;s index.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ColumnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ColumnResponse cellsGetWorksheetColumn(String name, String sheetName, Integer columnIndex, String folder, String storageName) throws ApiException {
        ApiResponse<ColumnResponse> resp = cellsGetWorksheetColumnWithHttpInfo(name, sheetName, columnIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Read worksheet column data by column&#39;s index.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ColumnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ColumnResponse> cellsGetWorksheetColumnWithHttpInfo(String name, String sheetName, Integer columnIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetColumnValidateBeforeCall(name, sheetName, columnIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ColumnResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheet column data by column&#39;s index. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetColumnAsync(String name, String sheetName, Integer columnIndex, String folder, String storageName, final ApiCallback<ColumnResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetColumnValidateBeforeCall(name, sheetName, columnIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ColumnResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetColumnsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetColumnsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetColumnsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheet columns info.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ColumnsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ColumnsResponse cellsGetWorksheetColumns(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<ColumnsResponse> resp = cellsGetWorksheetColumnsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Read worksheet columns info.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ColumnsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ColumnsResponse> cellsGetWorksheetColumnsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetColumnsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ColumnsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheet columns info. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetColumnsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<ColumnsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetColumnsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ColumnsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetRow
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetRowCall(String name, String sheetName, Integer rowIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "rowIndex" + "\\}", apiClient.escapeString(rowIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetRowValidateBeforeCall(String name, String sheetName, Integer rowIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetRow(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetRow(Async)");
        }
        
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling cellsGetWorksheetRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetRowCall(name, sheetName, rowIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheet row data by row&#39;s index.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return RowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RowResponse cellsGetWorksheetRow(String name, String sheetName, Integer rowIndex, String folder, String storageName) throws ApiException {
        ApiResponse<RowResponse> resp = cellsGetWorksheetRowWithHttpInfo(name, sheetName, rowIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Read worksheet row data by row&#39;s index.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;RowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RowResponse> cellsGetWorksheetRowWithHttpInfo(String name, String sheetName, Integer rowIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<RowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheet row data by row&#39;s index. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetRowAsync(String name, String sheetName, Integer rowIndex, String folder, String storageName, final ApiCallback<RowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsGetWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetRowsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsGetWorksheetRowsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsGetWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsGetWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsGetWorksheetRowsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheet rows info.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storageName storage name. (optional)
     * @return RowsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RowsResponse cellsGetWorksheetRows(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<RowsResponse> resp = cellsGetWorksheetRowsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Read worksheet rows info.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;RowsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RowsResponse> cellsGetWorksheetRowsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsGetWorksheetRowsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<RowsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheet rows info. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workdook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsGetWorksheetRowsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<RowsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsGetWorksheetRowsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RowsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsHypelinksDeleteWorksheetHyperlink
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksDeleteWorksheetHyperlinkCall(String name, String sheetName, Integer hyperlinkIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "hyperlinkIndex" + "\\}", apiClient.escapeString(hyperlinkIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsHypelinksDeleteWorksheetHyperlinkValidateBeforeCall(String name, String sheetName, Integer hyperlinkIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsHypelinksDeleteWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsHypelinksDeleteWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'hyperlinkIndex' is set
        if (hyperlinkIndex == null) {
            throw new ApiException("Missing the required parameter 'hyperlinkIndex' when calling cellsHypelinksDeleteWorksheetHyperlink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsHypelinksDeleteWorksheetHyperlinkCall(name, sheetName, hyperlinkIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet hyperlink by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsHypelinksDeleteWorksheetHyperlink(String name, String sheetName, Integer hyperlinkIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsHypelinksDeleteWorksheetHyperlinkWithHttpInfo(name, sheetName, hyperlinkIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete worksheet hyperlink by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsHypelinksDeleteWorksheetHyperlinkWithHttpInfo(String name, String sheetName, Integer hyperlinkIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsHypelinksDeleteWorksheetHyperlinkValidateBeforeCall(name, sheetName, hyperlinkIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet hyperlink by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksDeleteWorksheetHyperlinkAsync(String name, String sheetName, Integer hyperlinkIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsHypelinksDeleteWorksheetHyperlinkValidateBeforeCall(name, sheetName, hyperlinkIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsHypelinksDeleteWorksheetHyperlinks
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksDeleteWorksheetHyperlinksCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsHypelinksDeleteWorksheetHyperlinksValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsHypelinksDeleteWorksheetHyperlinks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsHypelinksDeleteWorksheetHyperlinks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsHypelinksDeleteWorksheetHyperlinksCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete all hyperlinks in worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsHypelinksDeleteWorksheetHyperlinks(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsHypelinksDeleteWorksheetHyperlinksWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete all hyperlinks in worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsHypelinksDeleteWorksheetHyperlinksWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsHypelinksDeleteWorksheetHyperlinksValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all hyperlinks in worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksDeleteWorksheetHyperlinksAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsHypelinksDeleteWorksheetHyperlinksValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsHypelinksGetWorksheetHyperlink
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksGetWorksheetHyperlinkCall(String name, String sheetName, Integer hyperlinkIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "hyperlinkIndex" + "\\}", apiClient.escapeString(hyperlinkIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsHypelinksGetWorksheetHyperlinkValidateBeforeCall(String name, String sheetName, Integer hyperlinkIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsHypelinksGetWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsHypelinksGetWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'hyperlinkIndex' is set
        if (hyperlinkIndex == null) {
            throw new ApiException("Missing the required parameter 'hyperlinkIndex' when calling cellsHypelinksGetWorksheetHyperlink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsHypelinksGetWorksheetHyperlinkCall(name, sheetName, hyperlinkIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet hyperlink by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return HyperlinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HyperlinkResponse cellsHypelinksGetWorksheetHyperlink(String name, String sheetName, Integer hyperlinkIndex, String folder, String storageName) throws ApiException {
        ApiResponse<HyperlinkResponse> resp = cellsHypelinksGetWorksheetHyperlinkWithHttpInfo(name, sheetName, hyperlinkIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet hyperlink by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;HyperlinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HyperlinkResponse> cellsHypelinksGetWorksheetHyperlinkWithHttpInfo(String name, String sheetName, Integer hyperlinkIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsHypelinksGetWorksheetHyperlinkValidateBeforeCall(name, sheetName, hyperlinkIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<HyperlinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet hyperlink by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksGetWorksheetHyperlinkAsync(String name, String sheetName, Integer hyperlinkIndex, String folder, String storageName, final ApiCallback<HyperlinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsHypelinksGetWorksheetHyperlinkValidateBeforeCall(name, sheetName, hyperlinkIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HyperlinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsHypelinksGetWorksheetHyperlinks
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksGetWorksheetHyperlinksCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsHypelinksGetWorksheetHyperlinksValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsHypelinksGetWorksheetHyperlinks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsHypelinksGetWorksheetHyperlinks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsHypelinksGetWorksheetHyperlinksCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet hyperlinks.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return HyperlinksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HyperlinksResponse cellsHypelinksGetWorksheetHyperlinks(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<HyperlinksResponse> resp = cellsHypelinksGetWorksheetHyperlinksWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet hyperlinks.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;HyperlinksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HyperlinksResponse> cellsHypelinksGetWorksheetHyperlinksWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsHypelinksGetWorksheetHyperlinksValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<HyperlinksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet hyperlinks. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksGetWorksheetHyperlinksAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<HyperlinksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsHypelinksGetWorksheetHyperlinksValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HyperlinksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsHypelinksPostWorksheetHyperlink
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param hyperlink Hyperlink object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksPostWorksheetHyperlinkCall(String name, String sheetName, Integer hyperlinkIndex, Hyperlink hyperlink, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hyperlink;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "hyperlinkIndex" + "\\}", apiClient.escapeString(hyperlinkIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsHypelinksPostWorksheetHyperlinkValidateBeforeCall(String name, String sheetName, Integer hyperlinkIndex, Hyperlink hyperlink, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsHypelinksPostWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsHypelinksPostWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'hyperlinkIndex' is set
        if (hyperlinkIndex == null) {
            throw new ApiException("Missing the required parameter 'hyperlinkIndex' when calling cellsHypelinksPostWorksheetHyperlink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsHypelinksPostWorksheetHyperlinkCall(name, sheetName, hyperlinkIndex, hyperlink, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update worksheet hyperlink by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param hyperlink Hyperlink object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return HyperlinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HyperlinkResponse cellsHypelinksPostWorksheetHyperlink(String name, String sheetName, Integer hyperlinkIndex, Hyperlink hyperlink, String folder, String storageName) throws ApiException {
        ApiResponse<HyperlinkResponse> resp = cellsHypelinksPostWorksheetHyperlinkWithHttpInfo(name, sheetName, hyperlinkIndex, hyperlink, folder, storageName);
        return resp.getData();
    }

    /**
     * Update worksheet hyperlink by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param hyperlink Hyperlink object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;HyperlinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HyperlinkResponse> cellsHypelinksPostWorksheetHyperlinkWithHttpInfo(String name, String sheetName, Integer hyperlinkIndex, Hyperlink hyperlink, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsHypelinksPostWorksheetHyperlinkValidateBeforeCall(name, sheetName, hyperlinkIndex, hyperlink, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<HyperlinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update worksheet hyperlink by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param hyperlinkIndex The hyperlink&#39;s index. (required)
     * @param hyperlink Hyperlink object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksPostWorksheetHyperlinkAsync(String name, String sheetName, Integer hyperlinkIndex, Hyperlink hyperlink, String folder, String storageName, final ApiCallback<HyperlinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsHypelinksPostWorksheetHyperlinkValidateBeforeCall(name, sheetName, hyperlinkIndex, hyperlink, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HyperlinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsHypelinksPutWorksheetHyperlink
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param firstRow  (required)
     * @param firstColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param address  (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksPutWorksheetHyperlinkCall(String name, String sheetName, Integer firstRow, Integer firstColumn, Integer totalRows, Integer totalColumns, String address, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/hyperlinks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstRow", firstRow));
        if (firstColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstColumn", firstColumn));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (totalColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalColumns", totalColumns));
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsHypelinksPutWorksheetHyperlinkValidateBeforeCall(String name, String sheetName, Integer firstRow, Integer firstColumn, Integer totalRows, Integer totalColumns, String address, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'firstRow' is set
        if (firstRow == null) {
            throw new ApiException("Missing the required parameter 'firstRow' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'firstColumn' is set
        if (firstColumn == null) {
            throw new ApiException("Missing the required parameter 'firstColumn' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'totalRows' is set
        if (totalRows == null) {
            throw new ApiException("Missing the required parameter 'totalRows' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'totalColumns' is set
        if (totalColumns == null) {
            throw new ApiException("Missing the required parameter 'totalColumns' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling cellsHypelinksPutWorksheetHyperlink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsHypelinksPutWorksheetHyperlinkCall(name, sheetName, firstRow, firstColumn, totalRows, totalColumns, address, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add worksheet hyperlink.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param firstRow  (required)
     * @param firstColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param address  (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return HyperlinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HyperlinkResponse cellsHypelinksPutWorksheetHyperlink(String name, String sheetName, Integer firstRow, Integer firstColumn, Integer totalRows, Integer totalColumns, String address, String folder, String storageName) throws ApiException {
        ApiResponse<HyperlinkResponse> resp = cellsHypelinksPutWorksheetHyperlinkWithHttpInfo(name, sheetName, firstRow, firstColumn, totalRows, totalColumns, address, folder, storageName);
        return resp.getData();
    }

    /**
     * Add worksheet hyperlink.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param firstRow  (required)
     * @param firstColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param address  (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;HyperlinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HyperlinkResponse> cellsHypelinksPutWorksheetHyperlinkWithHttpInfo(String name, String sheetName, Integer firstRow, Integer firstColumn, Integer totalRows, Integer totalColumns, String address, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsHypelinksPutWorksheetHyperlinkValidateBeforeCall(name, sheetName, firstRow, firstColumn, totalRows, totalColumns, address, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<HyperlinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add worksheet hyperlink. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param firstRow  (required)
     * @param firstColumn  (required)
     * @param totalRows  (required)
     * @param totalColumns  (required)
     * @param address  (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsHypelinksPutWorksheetHyperlinkAsync(String name, String sheetName, Integer firstRow, Integer firstColumn, Integer totalRows, Integer totalColumns, String address, String folder, String storageName, final ApiCallback<HyperlinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsHypelinksPutWorksheetHyperlinkValidateBeforeCall(name, sheetName, firstRow, firstColumn, totalRows, totalColumns, address, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HyperlinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsDeleteWorksheetListObject
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex List object index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsDeleteWorksheetListObjectCall(String name, String sheetName, Integer listObjectIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "listObjectIndex" + "\\}", apiClient.escapeString(listObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsDeleteWorksheetListObjectValidateBeforeCall(String name, String sheetName, Integer listObjectIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsDeleteWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsDeleteWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'listObjectIndex' is set
        if (listObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'listObjectIndex' when calling cellsListObjectsDeleteWorksheetListObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsDeleteWorksheetListObjectCall(name, sheetName, listObjectIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet list object by index
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex List object index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsListObjectsDeleteWorksheetListObject(String name, String sheetName, Integer listObjectIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsListObjectsDeleteWorksheetListObjectWithHttpInfo(name, sheetName, listObjectIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete worksheet list object by index
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex List object index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsListObjectsDeleteWorksheetListObjectWithHttpInfo(String name, String sheetName, Integer listObjectIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsDeleteWorksheetListObjectValidateBeforeCall(name, sheetName, listObjectIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet list object by index (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex List object index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsDeleteWorksheetListObjectAsync(String name, String sheetName, Integer listObjectIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsDeleteWorksheetListObjectValidateBeforeCall(name, sheetName, listObjectIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsDeleteWorksheetListObjects
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsDeleteWorksheetListObjectsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsDeleteWorksheetListObjectsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsDeleteWorksheetListObjects(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsDeleteWorksheetListObjects(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsDeleteWorksheetListObjectsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet list objects
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsListObjectsDeleteWorksheetListObjects(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsListObjectsDeleteWorksheetListObjectsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete worksheet list objects
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsListObjectsDeleteWorksheetListObjectsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsDeleteWorksheetListObjectsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet list objects (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsDeleteWorksheetListObjectsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsDeleteWorksheetListObjectsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsGetWorksheetListObject
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listobjectindex list object index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsGetWorksheetListObjectCall(String name, String sheetName, Integer listobjectindex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listobjectindex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "listobjectindex" + "\\}", apiClient.escapeString(listobjectindex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsGetWorksheetListObjectValidateBeforeCall(String name, String sheetName, Integer listobjectindex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsGetWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsGetWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'listobjectindex' is set
        if (listobjectindex == null) {
            throw new ApiException("Missing the required parameter 'listobjectindex' when calling cellsListObjectsGetWorksheetListObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsGetWorksheetListObjectCall(name, sheetName, listobjectindex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet list object info by index.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listobjectindex list object index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ListObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListObjectResponse cellsListObjectsGetWorksheetListObject(String name, String sheetName, Integer listobjectindex, String folder, String storageName) throws ApiException {
        ApiResponse<ListObjectResponse> resp = cellsListObjectsGetWorksheetListObjectWithHttpInfo(name, sheetName, listobjectindex, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet list object info by index.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listobjectindex list object index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ListObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListObjectResponse> cellsListObjectsGetWorksheetListObjectWithHttpInfo(String name, String sheetName, Integer listobjectindex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsGetWorksheetListObjectValidateBeforeCall(name, sheetName, listobjectindex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ListObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet list object info by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listobjectindex list object index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsGetWorksheetListObjectAsync(String name, String sheetName, Integer listobjectindex, String folder, String storageName, final ApiCallback<ListObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsGetWorksheetListObjectValidateBeforeCall(name, sheetName, listobjectindex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsGetWorksheetListObjects
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsGetWorksheetListObjectsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsGetWorksheetListObjectsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsGetWorksheetListObjects(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsGetWorksheetListObjects(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsGetWorksheetListObjectsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet listobjects info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ListObjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListObjectsResponse cellsListObjectsGetWorksheetListObjects(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<ListObjectsResponse> resp = cellsListObjectsGetWorksheetListObjectsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet listobjects info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ListObjectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListObjectsResponse> cellsListObjectsGetWorksheetListObjectsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsGetWorksheetListObjectsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ListObjectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet listobjects info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsGetWorksheetListObjectsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<ListObjectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsGetWorksheetListObjectsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListObjectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsPostWorksheetListObject
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex list Object index (required)
     * @param listObject listObject dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectCall(String name, String sheetName, Integer listObjectIndex, ListObject listObject, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = listObject;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "listObjectIndex" + "\\}", apiClient.escapeString(listObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectValidateBeforeCall(String name, String sheetName, Integer listObjectIndex, ListObject listObject, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsPostWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsPostWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'listObjectIndex' is set
        if (listObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'listObjectIndex' when calling cellsListObjectsPostWorksheetListObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectCall(name, sheetName, listObjectIndex, listObject, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update  list object 
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex list Object index (required)
     * @param listObject listObject dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsListObjectsPostWorksheetListObject(String name, String sheetName, Integer listObjectIndex, ListObject listObject, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsListObjectsPostWorksheetListObjectWithHttpInfo(name, sheetName, listObjectIndex, listObject, folder, storageName);
        return resp.getData();
    }

    /**
     * Update  list object 
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex list Object index (required)
     * @param listObject listObject dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsListObjectsPostWorksheetListObjectWithHttpInfo(String name, String sheetName, Integer listObjectIndex, ListObject listObject, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectValidateBeforeCall(name, sheetName, listObjectIndex, listObject, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update  list object  (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex list Object index (required)
     * @param listObject listObject dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectAsync(String name, String sheetName, Integer listObjectIndex, ListObject listObject, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectValidateBeforeCall(name, sheetName, listObjectIndex, listObject, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsPostWorksheetListObjectConvertToRange
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectConvertToRangeCall(String name, String sheetName, Integer listObjectIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/ConvertToRange"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "listObjectIndex" + "\\}", apiClient.escapeString(listObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectConvertToRangeValidateBeforeCall(String name, String sheetName, Integer listObjectIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsPostWorksheetListObjectConvertToRange(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsPostWorksheetListObjectConvertToRange(Async)");
        }
        
        // verify the required parameter 'listObjectIndex' is set
        if (listObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'listObjectIndex' when calling cellsListObjectsPostWorksheetListObjectConvertToRange(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectConvertToRangeCall(name, sheetName, listObjectIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsListObjectsPostWorksheetListObjectConvertToRange(String name, String sheetName, Integer listObjectIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsListObjectsPostWorksheetListObjectConvertToRangeWithHttpInfo(name, sheetName, listObjectIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsListObjectsPostWorksheetListObjectConvertToRangeWithHttpInfo(String name, String sheetName, Integer listObjectIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectConvertToRangeValidateBeforeCall(name, sheetName, listObjectIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectConvertToRangeAsync(String name, String sheetName, Integer listObjectIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectConvertToRangeValidateBeforeCall(name, sheetName, listObjectIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsPostWorksheetListObjectSortTable
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param dataSorter  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectSortTableCall(String name, String sheetName, Integer listObjectIndex, DataSorter dataSorter, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dataSorter;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/sort"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "listObjectIndex" + "\\}", apiClient.escapeString(listObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectSortTableValidateBeforeCall(String name, String sheetName, Integer listObjectIndex, DataSorter dataSorter, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsPostWorksheetListObjectSortTable(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsPostWorksheetListObjectSortTable(Async)");
        }
        
        // verify the required parameter 'listObjectIndex' is set
        if (listObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'listObjectIndex' when calling cellsListObjectsPostWorksheetListObjectSortTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectSortTableCall(name, sheetName, listObjectIndex, dataSorter, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param dataSorter  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsListObjectsPostWorksheetListObjectSortTable(String name, String sheetName, Integer listObjectIndex, DataSorter dataSorter, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsListObjectsPostWorksheetListObjectSortTableWithHttpInfo(name, sheetName, listObjectIndex, dataSorter, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param dataSorter  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsListObjectsPostWorksheetListObjectSortTableWithHttpInfo(String name, String sheetName, Integer listObjectIndex, DataSorter dataSorter, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectSortTableValidateBeforeCall(name, sheetName, listObjectIndex, dataSorter, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param dataSorter  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectSortTableAsync(String name, String sheetName, Integer listObjectIndex, DataSorter dataSorter, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectSortTableValidateBeforeCall(name, sheetName, listObjectIndex, dataSorter, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param destsheetName  (required)
     * @param request  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableCall(String name, String sheetName, Integer listObjectIndex, String destsheetName, CreatePivotTableRequest request, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/SummarizeWithPivotTable"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "listObjectIndex" + "\\}", apiClient.escapeString(listObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (destsheetName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destsheetName", destsheetName));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableValidateBeforeCall(String name, String sheetName, Integer listObjectIndex, String destsheetName, CreatePivotTableRequest request, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable(Async)");
        }
        
        // verify the required parameter 'listObjectIndex' is set
        if (listObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'listObjectIndex' when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable(Async)");
        }
        
        // verify the required parameter 'destsheetName' is set
        if (destsheetName == null) {
            throw new ApiException("Missing the required parameter 'destsheetName' when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableCall(name, sheetName, listObjectIndex, destsheetName, request, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param destsheetName  (required)
     * @param request  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable(String name, String sheetName, Integer listObjectIndex, String destsheetName, CreatePivotTableRequest request, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableWithHttpInfo(name, sheetName, listObjectIndex, destsheetName, request, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param destsheetName  (required)
     * @param request  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableWithHttpInfo(String name, String sheetName, Integer listObjectIndex, String destsheetName, CreatePivotTableRequest request, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableValidateBeforeCall(name, sheetName, listObjectIndex, destsheetName, request, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param destsheetName  (required)
     * @param request  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsync(String name, String sheetName, Integer listObjectIndex, String destsheetName, CreatePivotTableRequest request, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableValidateBeforeCall(name, sheetName, listObjectIndex, destsheetName, request, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsPutWorksheetListObject
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row of the list range. (required)
     * @param startColumn The start row of the list range. (required)
     * @param endRow The start row of the list range. (required)
     * @param endColumn The start row of the list range. (required)
     * @param hasHeaders Whether the range has headers. (optional, default to true)
     * @param listObject List Object (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPutWorksheetListObjectCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, Boolean hasHeaders, ListObject listObject, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = listObject;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (endRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endRow", endRow));
        if (endColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endColumn", endColumn));
        if (hasHeaders != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hasHeaders", hasHeaders));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsPutWorksheetListObjectValidateBeforeCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, Boolean hasHeaders, ListObject listObject, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsPutWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsPutWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'startRow' is set
        if (startRow == null) {
            throw new ApiException("Missing the required parameter 'startRow' when calling cellsListObjectsPutWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'startColumn' is set
        if (startColumn == null) {
            throw new ApiException("Missing the required parameter 'startColumn' when calling cellsListObjectsPutWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'endRow' is set
        if (endRow == null) {
            throw new ApiException("Missing the required parameter 'endRow' when calling cellsListObjectsPutWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'endColumn' is set
        if (endColumn == null) {
            throw new ApiException("Missing the required parameter 'endColumn' when calling cellsListObjectsPutWorksheetListObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsPutWorksheetListObjectCall(name, sheetName, startRow, startColumn, endRow, endColumn, hasHeaders, listObject, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a list object into worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row of the list range. (required)
     * @param startColumn The start row of the list range. (required)
     * @param endRow The start row of the list range. (required)
     * @param endColumn The start row of the list range. (required)
     * @param hasHeaders Whether the range has headers. (optional, default to true)
     * @param listObject List Object (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ListObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListObjectResponse cellsListObjectsPutWorksheetListObject(String name, String sheetName, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, Boolean hasHeaders, ListObject listObject, String folder, String storageName) throws ApiException {
        ApiResponse<ListObjectResponse> resp = cellsListObjectsPutWorksheetListObjectWithHttpInfo(name, sheetName, startRow, startColumn, endRow, endColumn, hasHeaders, listObject, folder, storageName);
        return resp.getData();
    }

    /**
     * Add a list object into worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row of the list range. (required)
     * @param startColumn The start row of the list range. (required)
     * @param endRow The start row of the list range. (required)
     * @param endColumn The start row of the list range. (required)
     * @param hasHeaders Whether the range has headers. (optional, default to true)
     * @param listObject List Object (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ListObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListObjectResponse> cellsListObjectsPutWorksheetListObjectWithHttpInfo(String name, String sheetName, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, Boolean hasHeaders, ListObject listObject, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsPutWorksheetListObjectValidateBeforeCall(name, sheetName, startRow, startColumn, endRow, endColumn, hasHeaders, listObject, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ListObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a list object into worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row of the list range. (required)
     * @param startColumn The start row of the list range. (required)
     * @param endRow The start row of the list range. (required)
     * @param endColumn The start row of the list range. (required)
     * @param hasHeaders Whether the range has headers. (optional, default to true)
     * @param listObject List Object (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPutWorksheetListObjectAsync(String name, String sheetName, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, Boolean hasHeaders, ListObject listObject, String folder, String storageName, final ApiCallback<ListObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsPutWorksheetListObjectValidateBeforeCall(name, sheetName, startRow, startColumn, endRow, endColumn, hasHeaders, listObject, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsOleObjectsDeleteWorksheetOleObject
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsDeleteWorksheetOleObjectCall(String name, String sheetName, Integer oleObjectIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "oleObjectIndex" + "\\}", apiClient.escapeString(oleObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsOleObjectsDeleteWorksheetOleObjectValidateBeforeCall(String name, String sheetName, Integer oleObjectIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsOleObjectsDeleteWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsOleObjectsDeleteWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'oleObjectIndex' is set
        if (oleObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'oleObjectIndex' when calling cellsOleObjectsDeleteWorksheetOleObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsOleObjectsDeleteWorksheetOleObjectCall(name, sheetName, oleObjectIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete OLE object.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsOleObjectsDeleteWorksheetOleObject(String name, String sheetName, Integer oleObjectIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsOleObjectsDeleteWorksheetOleObjectWithHttpInfo(name, sheetName, oleObjectIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete OLE object.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsOleObjectsDeleteWorksheetOleObjectWithHttpInfo(String name, String sheetName, Integer oleObjectIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsOleObjectsDeleteWorksheetOleObjectValidateBeforeCall(name, sheetName, oleObjectIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete OLE object. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsDeleteWorksheetOleObjectAsync(String name, String sheetName, Integer oleObjectIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsOleObjectsDeleteWorksheetOleObjectValidateBeforeCall(name, sheetName, oleObjectIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsOleObjectsDeleteWorksheetOleObjects
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsDeleteWorksheetOleObjectsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsOleObjectsDeleteWorksheetOleObjectsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsOleObjectsDeleteWorksheetOleObjects(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsOleObjectsDeleteWorksheetOleObjects(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsOleObjectsDeleteWorksheetOleObjectsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete all OLE objects.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsOleObjectsDeleteWorksheetOleObjects(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsOleObjectsDeleteWorksheetOleObjectsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete all OLE objects.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsOleObjectsDeleteWorksheetOleObjectsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsOleObjectsDeleteWorksheetOleObjectsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all OLE objects. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsDeleteWorksheetOleObjectsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsOleObjectsDeleteWorksheetOleObjectsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsOleObjectsGetWorksheetOleObject
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param objectNumber The object number. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsGetWorksheetOleObjectCall(String name, String sheetName, Integer objectNumber, String format, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{objectNumber}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "objectNumber" + "\\}", apiClient.escapeString(objectNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsOleObjectsGetWorksheetOleObjectValidateBeforeCall(String name, String sheetName, Integer objectNumber, String format, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsOleObjectsGetWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsOleObjectsGetWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'objectNumber' is set
        if (objectNumber == null) {
            throw new ApiException("Missing the required parameter 'objectNumber' when calling cellsOleObjectsGetWorksheetOleObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsOleObjectsGetWorksheetOleObjectCall(name, sheetName, objectNumber, format, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get OLE object info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param objectNumber The object number. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsOleObjectsGetWorksheetOleObject(String name, String sheetName, Integer objectNumber, String format, String folder, String storageName) throws ApiException {
        ApiResponse<File> resp = cellsOleObjectsGetWorksheetOleObjectWithHttpInfo(name, sheetName, objectNumber, format, folder, storageName);
        return resp.getData();
    }

    /**
     * Get OLE object info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param objectNumber The object number. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsOleObjectsGetWorksheetOleObjectWithHttpInfo(String name, String sheetName, Integer objectNumber, String format, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsOleObjectsGetWorksheetOleObjectValidateBeforeCall(name, sheetName, objectNumber, format, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get OLE object info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param objectNumber The object number. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsGetWorksheetOleObjectAsync(String name, String sheetName, Integer objectNumber, String format, String folder, String storageName, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsOleObjectsGetWorksheetOleObjectValidateBeforeCall(name, sheetName, objectNumber, format, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsOleObjectsGetWorksheetOleObjects
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsGetWorksheetOleObjectsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsOleObjectsGetWorksheetOleObjectsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsOleObjectsGetWorksheetOleObjects(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsOleObjectsGetWorksheetOleObjects(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsOleObjectsGetWorksheetOleObjectsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet OLE objects info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return OleObjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OleObjectsResponse cellsOleObjectsGetWorksheetOleObjects(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<OleObjectsResponse> resp = cellsOleObjectsGetWorksheetOleObjectsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet OLE objects info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;OleObjectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OleObjectsResponse> cellsOleObjectsGetWorksheetOleObjectsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsOleObjectsGetWorksheetOleObjectsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<OleObjectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet OLE objects info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsGetWorksheetOleObjectsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<OleObjectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsOleObjectsGetWorksheetOleObjectsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OleObjectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsOleObjectsPostUpdateWorksheetOleObject
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param ole Ole Object (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsPostUpdateWorksheetOleObjectCall(String name, String sheetName, Integer oleObjectIndex, OleObject ole, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ole;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "oleObjectIndex" + "\\}", apiClient.escapeString(oleObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsOleObjectsPostUpdateWorksheetOleObjectValidateBeforeCall(String name, String sheetName, Integer oleObjectIndex, OleObject ole, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsOleObjectsPostUpdateWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsOleObjectsPostUpdateWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'oleObjectIndex' is set
        if (oleObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'oleObjectIndex' when calling cellsOleObjectsPostUpdateWorksheetOleObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsOleObjectsPostUpdateWorksheetOleObjectCall(name, sheetName, oleObjectIndex, ole, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update OLE object.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param ole Ole Object (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsOleObjectsPostUpdateWorksheetOleObject(String name, String sheetName, Integer oleObjectIndex, OleObject ole, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsOleObjectsPostUpdateWorksheetOleObjectWithHttpInfo(name, sheetName, oleObjectIndex, ole, folder, storageName);
        return resp.getData();
    }

    /**
     * Update OLE object.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param ole Ole Object (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsOleObjectsPostUpdateWorksheetOleObjectWithHttpInfo(String name, String sheetName, Integer oleObjectIndex, OleObject ole, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsOleObjectsPostUpdateWorksheetOleObjectValidateBeforeCall(name, sheetName, oleObjectIndex, ole, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update OLE object. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param ole Ole Object (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsPostUpdateWorksheetOleObjectAsync(String name, String sheetName, Integer oleObjectIndex, OleObject ole, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsOleObjectsPostUpdateWorksheetOleObjectValidateBeforeCall(name, sheetName, oleObjectIndex, ole, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsOleObjectsPutWorksheetOleObject
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObject Ole Object (optional)
     * @param upperLeftRow Upper left row index (optional, default to 0)
     * @param upperLeftColumn Upper left column index (optional, default to 0)
     * @param height Height of oleObject, in unit of pixel (optional, default to 0)
     * @param width Width of oleObject, in unit of pixel (optional, default to 0)
     * @param oleFile OLE filename (optional)
     * @param imageFile Image filename (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsPutWorksheetOleObjectCall(String name, String sheetName, OleObject oleObject, Integer upperLeftRow, Integer upperLeftColumn, Integer height, Integer width, String oleFile, String imageFile, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = oleObject;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (upperLeftRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftRow", upperLeftRow));
        if (upperLeftColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftColumn", upperLeftColumn));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (oleFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "oleFile", oleFile));
        if (imageFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "imageFile", imageFile));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsOleObjectsPutWorksheetOleObjectValidateBeforeCall(String name, String sheetName, OleObject oleObject, Integer upperLeftRow, Integer upperLeftColumn, Integer height, Integer width, String oleFile, String imageFile, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsOleObjectsPutWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsOleObjectsPutWorksheetOleObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsOleObjectsPutWorksheetOleObjectCall(name, sheetName, oleObject, upperLeftRow, upperLeftColumn, height, width, oleFile, imageFile, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add OLE object
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObject Ole Object (optional)
     * @param upperLeftRow Upper left row index (optional, default to 0)
     * @param upperLeftColumn Upper left column index (optional, default to 0)
     * @param height Height of oleObject, in unit of pixel (optional, default to 0)
     * @param width Width of oleObject, in unit of pixel (optional, default to 0)
     * @param oleFile OLE filename (optional)
     * @param imageFile Image filename (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return OleObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OleObjectResponse cellsOleObjectsPutWorksheetOleObject(String name, String sheetName, OleObject oleObject, Integer upperLeftRow, Integer upperLeftColumn, Integer height, Integer width, String oleFile, String imageFile, String folder, String storageName) throws ApiException {
        ApiResponse<OleObjectResponse> resp = cellsOleObjectsPutWorksheetOleObjectWithHttpInfo(name, sheetName, oleObject, upperLeftRow, upperLeftColumn, height, width, oleFile, imageFile, folder, storageName);
        return resp.getData();
    }

    /**
     * Add OLE object
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObject Ole Object (optional)
     * @param upperLeftRow Upper left row index (optional, default to 0)
     * @param upperLeftColumn Upper left column index (optional, default to 0)
     * @param height Height of oleObject, in unit of pixel (optional, default to 0)
     * @param width Width of oleObject, in unit of pixel (optional, default to 0)
     * @param oleFile OLE filename (optional)
     * @param imageFile Image filename (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;OleObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OleObjectResponse> cellsOleObjectsPutWorksheetOleObjectWithHttpInfo(String name, String sheetName, OleObject oleObject, Integer upperLeftRow, Integer upperLeftColumn, Integer height, Integer width, String oleFile, String imageFile, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsOleObjectsPutWorksheetOleObjectValidateBeforeCall(name, sheetName, oleObject, upperLeftRow, upperLeftColumn, height, width, oleFile, imageFile, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<OleObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add OLE object (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObject Ole Object (optional)
     * @param upperLeftRow Upper left row index (optional, default to 0)
     * @param upperLeftColumn Upper left column index (optional, default to 0)
     * @param height Height of oleObject, in unit of pixel (optional, default to 0)
     * @param width Width of oleObject, in unit of pixel (optional, default to 0)
     * @param oleFile OLE filename (optional)
     * @param imageFile Image filename (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsPutWorksheetOleObjectAsync(String name, String sheetName, OleObject oleObject, Integer upperLeftRow, Integer upperLeftColumn, Integer height, Integer width, String oleFile, String imageFile, String folder, String storageName, final ApiCallback<OleObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsOleObjectsPutWorksheetOleObjectValidateBeforeCall(name, sheetName, oleObject, upperLeftRow, upperLeftColumn, height, width, oleFile, imageFile, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OleObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksDeleteHorizontalPageBreak
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteHorizontalPageBreakCall(String name, String sheetName, Integer index, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksDeleteHorizontalPageBreakValidateBeforeCall(String name, String sheetName, Integer index, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksDeleteHorizontalPageBreak(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksDeleteHorizontalPageBreak(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsPageBreaksDeleteHorizontalPageBreak(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteHorizontalPageBreakCall(name, sheetName, index, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPageBreaksDeleteHorizontalPageBreak(String name, String sheetName, Integer index, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPageBreaksDeleteHorizontalPageBreakWithHttpInfo(name, sheetName, index, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPageBreaksDeleteHorizontalPageBreakWithHttpInfo(String name, String sheetName, Integer index, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteHorizontalPageBreakValidateBeforeCall(name, sheetName, index, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteHorizontalPageBreakAsync(String name, String sheetName, Integer index, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksDeleteHorizontalPageBreakValidateBeforeCall(name, sheetName, index, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksDeleteHorizontalPageBreaks
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteHorizontalPageBreaksCall(String name, String sheetName, Integer row, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksDeleteHorizontalPageBreaksValidateBeforeCall(String name, String sheetName, Integer row, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksDeleteHorizontalPageBreaks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksDeleteHorizontalPageBreaks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteHorizontalPageBreaksCall(name, sheetName, row, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPageBreaksDeleteHorizontalPageBreaks(String name, String sheetName, Integer row, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPageBreaksDeleteHorizontalPageBreaksWithHttpInfo(name, sheetName, row, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPageBreaksDeleteHorizontalPageBreaksWithHttpInfo(String name, String sheetName, Integer row, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteHorizontalPageBreaksValidateBeforeCall(name, sheetName, row, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteHorizontalPageBreaksAsync(String name, String sheetName, Integer row, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksDeleteHorizontalPageBreaksValidateBeforeCall(name, sheetName, row, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksDeleteVerticalPageBreak
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteVerticalPageBreakCall(String name, String sheetName, Integer index, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksDeleteVerticalPageBreakValidateBeforeCall(String name, String sheetName, Integer index, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksDeleteVerticalPageBreak(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksDeleteVerticalPageBreak(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsPageBreaksDeleteVerticalPageBreak(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteVerticalPageBreakCall(name, sheetName, index, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPageBreaksDeleteVerticalPageBreak(String name, String sheetName, Integer index, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPageBreaksDeleteVerticalPageBreakWithHttpInfo(name, sheetName, index, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPageBreaksDeleteVerticalPageBreakWithHttpInfo(String name, String sheetName, Integer index, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteVerticalPageBreakValidateBeforeCall(name, sheetName, index, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteVerticalPageBreakAsync(String name, String sheetName, Integer index, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksDeleteVerticalPageBreakValidateBeforeCall(name, sheetName, index, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksDeleteVerticalPageBreaks
     * @param name  (required)
     * @param sheetName  (required)
     * @param column  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteVerticalPageBreaksCall(String name, String sheetName, Integer column, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksDeleteVerticalPageBreaksValidateBeforeCall(String name, String sheetName, Integer column, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksDeleteVerticalPageBreaks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksDeleteVerticalPageBreaks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteVerticalPageBreaksCall(name, sheetName, column, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param column  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPageBreaksDeleteVerticalPageBreaks(String name, String sheetName, Integer column, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPageBreaksDeleteVerticalPageBreaksWithHttpInfo(name, sheetName, column, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param column  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPageBreaksDeleteVerticalPageBreaksWithHttpInfo(String name, String sheetName, Integer column, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteVerticalPageBreaksValidateBeforeCall(name, sheetName, column, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param column  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteVerticalPageBreaksAsync(String name, String sheetName, Integer column, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksDeleteVerticalPageBreaksValidateBeforeCall(name, sheetName, column, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksGetHorizontalPageBreak
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetHorizontalPageBreakCall(String name, String sheetName, Integer index, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksGetHorizontalPageBreakValidateBeforeCall(String name, String sheetName, Integer index, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksGetHorizontalPageBreak(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksGetHorizontalPageBreak(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsPageBreaksGetHorizontalPageBreak(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksGetHorizontalPageBreakCall(name, sheetName, index, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return HorizontalPageBreakResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HorizontalPageBreakResponse cellsPageBreaksGetHorizontalPageBreak(String name, String sheetName, Integer index, String folder, String storageName) throws ApiException {
        ApiResponse<HorizontalPageBreakResponse> resp = cellsPageBreaksGetHorizontalPageBreakWithHttpInfo(name, sheetName, index, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;HorizontalPageBreakResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HorizontalPageBreakResponse> cellsPageBreaksGetHorizontalPageBreakWithHttpInfo(String name, String sheetName, Integer index, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksGetHorizontalPageBreakValidateBeforeCall(name, sheetName, index, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<HorizontalPageBreakResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetHorizontalPageBreakAsync(String name, String sheetName, Integer index, String folder, String storageName, final ApiCallback<HorizontalPageBreakResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksGetHorizontalPageBreakValidateBeforeCall(name, sheetName, index, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HorizontalPageBreakResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksGetHorizontalPageBreaks
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetHorizontalPageBreaksCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksGetHorizontalPageBreaksValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksGetHorizontalPageBreaks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksGetHorizontalPageBreaks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksGetHorizontalPageBreaksCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return HorizontalPageBreaksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HorizontalPageBreaksResponse cellsPageBreaksGetHorizontalPageBreaks(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<HorizontalPageBreaksResponse> resp = cellsPageBreaksGetHorizontalPageBreaksWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;HorizontalPageBreaksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HorizontalPageBreaksResponse> cellsPageBreaksGetHorizontalPageBreaksWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksGetHorizontalPageBreaksValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<HorizontalPageBreaksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetHorizontalPageBreaksAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<HorizontalPageBreaksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksGetHorizontalPageBreaksValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HorizontalPageBreaksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksGetVerticalPageBreak
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetVerticalPageBreakCall(String name, String sheetName, Integer index, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksGetVerticalPageBreakValidateBeforeCall(String name, String sheetName, Integer index, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksGetVerticalPageBreak(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksGetVerticalPageBreak(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsPageBreaksGetVerticalPageBreak(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksGetVerticalPageBreakCall(name, sheetName, index, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return VerticalPageBreakResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerticalPageBreakResponse cellsPageBreaksGetVerticalPageBreak(String name, String sheetName, Integer index, String folder, String storageName) throws ApiException {
        ApiResponse<VerticalPageBreakResponse> resp = cellsPageBreaksGetVerticalPageBreakWithHttpInfo(name, sheetName, index, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;VerticalPageBreakResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerticalPageBreakResponse> cellsPageBreaksGetVerticalPageBreakWithHttpInfo(String name, String sheetName, Integer index, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksGetVerticalPageBreakValidateBeforeCall(name, sheetName, index, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<VerticalPageBreakResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetVerticalPageBreakAsync(String name, String sheetName, Integer index, String folder, String storageName, final ApiCallback<VerticalPageBreakResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksGetVerticalPageBreakValidateBeforeCall(name, sheetName, index, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerticalPageBreakResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksGetVerticalPageBreaks
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetVerticalPageBreaksCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksGetVerticalPageBreaksValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksGetVerticalPageBreaks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksGetVerticalPageBreaks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksGetVerticalPageBreaksCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return VerticalPageBreaksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerticalPageBreaksResponse cellsPageBreaksGetVerticalPageBreaks(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<VerticalPageBreaksResponse> resp = cellsPageBreaksGetVerticalPageBreaksWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;VerticalPageBreaksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerticalPageBreaksResponse> cellsPageBreaksGetVerticalPageBreaksWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksGetVerticalPageBreaksValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<VerticalPageBreaksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetVerticalPageBreaksAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<VerticalPageBreaksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksGetVerticalPageBreaksValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerticalPageBreaksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksPutHorizontalPageBreak
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param row  (optional)
     * @param column  (optional)
     * @param startColumn  (optional)
     * @param endColumn  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksPutHorizontalPageBreakCall(String name, String sheetName, String cellname, Integer row, Integer column, Integer startColumn, Integer endColumn, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellname", cellname));
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (endColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endColumn", endColumn));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksPutHorizontalPageBreakValidateBeforeCall(String name, String sheetName, String cellname, Integer row, Integer column, Integer startColumn, Integer endColumn, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksPutHorizontalPageBreak(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksPutHorizontalPageBreak(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksPutHorizontalPageBreakCall(name, sheetName, cellname, row, column, startColumn, endColumn, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param row  (optional)
     * @param column  (optional)
     * @param startColumn  (optional)
     * @param endColumn  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPageBreaksPutHorizontalPageBreak(String name, String sheetName, String cellname, Integer row, Integer column, Integer startColumn, Integer endColumn, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPageBreaksPutHorizontalPageBreakWithHttpInfo(name, sheetName, cellname, row, column, startColumn, endColumn, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param row  (optional)
     * @param column  (optional)
     * @param startColumn  (optional)
     * @param endColumn  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPageBreaksPutHorizontalPageBreakWithHttpInfo(String name, String sheetName, String cellname, Integer row, Integer column, Integer startColumn, Integer endColumn, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksPutHorizontalPageBreakValidateBeforeCall(name, sheetName, cellname, row, column, startColumn, endColumn, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param row  (optional)
     * @param column  (optional)
     * @param startColumn  (optional)
     * @param endColumn  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksPutHorizontalPageBreakAsync(String name, String sheetName, String cellname, Integer row, Integer column, Integer startColumn, Integer endColumn, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksPutHorizontalPageBreakValidateBeforeCall(name, sheetName, cellname, row, column, startColumn, endColumn, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksPutVerticalPageBreak
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param column  (optional)
     * @param row  (optional)
     * @param startRow  (optional)
     * @param endRow  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksPutVerticalPageBreakCall(String name, String sheetName, String cellname, Integer column, Integer row, Integer startRow, Integer endRow, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellname", cellname));
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (endRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endRow", endRow));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksPutVerticalPageBreakValidateBeforeCall(String name, String sheetName, String cellname, Integer column, Integer row, Integer startRow, Integer endRow, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksPutVerticalPageBreak(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksPutVerticalPageBreak(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksPutVerticalPageBreakCall(name, sheetName, cellname, column, row, startRow, endRow, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param column  (optional)
     * @param row  (optional)
     * @param startRow  (optional)
     * @param endRow  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPageBreaksPutVerticalPageBreak(String name, String sheetName, String cellname, Integer column, Integer row, Integer startRow, Integer endRow, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPageBreaksPutVerticalPageBreakWithHttpInfo(name, sheetName, cellname, column, row, startRow, endRow, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param column  (optional)
     * @param row  (optional)
     * @param startRow  (optional)
     * @param endRow  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPageBreaksPutVerticalPageBreakWithHttpInfo(String name, String sheetName, String cellname, Integer column, Integer row, Integer startRow, Integer endRow, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksPutVerticalPageBreakValidateBeforeCall(name, sheetName, cellname, column, row, startRow, endRow, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param column  (optional)
     * @param row  (optional)
     * @param startRow  (optional)
     * @param endRow  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksPutVerticalPageBreakAsync(String name, String sheetName, String cellname, Integer column, Integer row, Integer startRow, Integer endRow, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksPutVerticalPageBreakValidateBeforeCall(name, sheetName, cellname, column, row, startRow, endRow, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageSetupDeleteHeaderFooter
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupDeleteHeaderFooterCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/clearheaderfooter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageSetupDeleteHeaderFooterValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageSetupDeleteHeaderFooter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageSetupDeleteHeaderFooter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageSetupDeleteHeaderFooterCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * clear header footer
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPageSetupDeleteHeaderFooter(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPageSetupDeleteHeaderFooterWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * clear header footer
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPageSetupDeleteHeaderFooterWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageSetupDeleteHeaderFooterValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * clear header footer (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupDeleteHeaderFooterAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageSetupDeleteHeaderFooterValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageSetupGetFooter
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupGetFooterCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/footer"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageSetupGetFooterValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageSetupGetFooter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageSetupGetFooter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageSetupGetFooterCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get page footer information
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return PageSectionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageSectionsResponse cellsPageSetupGetFooter(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<PageSectionsResponse> resp = cellsPageSetupGetFooterWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * get page footer information
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;PageSectionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageSectionsResponse> cellsPageSetupGetFooterWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageSetupGetFooterValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<PageSectionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get page footer information (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupGetFooterAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<PageSectionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageSetupGetFooterValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageSectionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageSetupGetHeader
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupGetHeaderCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/header"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageSetupGetHeaderValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageSetupGetHeader(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageSetupGetHeader(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageSetupGetHeaderCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get page header information
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return PageSectionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageSectionsResponse cellsPageSetupGetHeader(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<PageSectionsResponse> resp = cellsPageSetupGetHeaderWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * get page header information
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;PageSectionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageSectionsResponse> cellsPageSetupGetHeaderWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageSetupGetHeaderValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<PageSectionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get page header information (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupGetHeaderAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<PageSectionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageSetupGetHeaderValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageSectionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageSetupGetPageSetup
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupGetPageSetupCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageSetupGetPageSetupValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageSetupGetPageSetup(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageSetupGetPageSetup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageSetupGetPageSetupCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Page Setup information.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return PageSetupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageSetupResponse cellsPageSetupGetPageSetup(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<PageSetupResponse> resp = cellsPageSetupGetPageSetupWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get Page Setup information.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;PageSetupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageSetupResponse> cellsPageSetupGetPageSetupWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageSetupGetPageSetupValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<PageSetupResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Page Setup information.              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupGetPageSetupAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<PageSetupResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageSetupGetPageSetupValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageSetupResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageSetupPostFooter
     * @param name  (required)
     * @param sheetName  (required)
     * @param section  (required)
     * @param script  (required)
     * @param isFirstPage  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupPostFooterCall(String name, String sheetName, Integer section, String script, Boolean isFirstPage, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/footer"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (section != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "section", section));
        if (script != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "script", script));
        if (isFirstPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isFirstPage", isFirstPage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageSetupPostFooterValidateBeforeCall(String name, String sheetName, Integer section, String script, Boolean isFirstPage, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageSetupPostFooter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageSetupPostFooter(Async)");
        }
        
        // verify the required parameter 'section' is set
        if (section == null) {
            throw new ApiException("Missing the required parameter 'section' when calling cellsPageSetupPostFooter(Async)");
        }
        
        // verify the required parameter 'script' is set
        if (script == null) {
            throw new ApiException("Missing the required parameter 'script' when calling cellsPageSetupPostFooter(Async)");
        }
        
        // verify the required parameter 'isFirstPage' is set
        if (isFirstPage == null) {
            throw new ApiException("Missing the required parameter 'isFirstPage' when calling cellsPageSetupPostFooter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageSetupPostFooterCall(name, sheetName, section, script, isFirstPage, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * update  page footer information 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param section  (required)
     * @param script  (required)
     * @param isFirstPage  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPageSetupPostFooter(String name, String sheetName, Integer section, String script, Boolean isFirstPage, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPageSetupPostFooterWithHttpInfo(name, sheetName, section, script, isFirstPage, folder, storageName);
        return resp.getData();
    }

    /**
     * update  page footer information 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param section  (required)
     * @param script  (required)
     * @param isFirstPage  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPageSetupPostFooterWithHttpInfo(String name, String sheetName, Integer section, String script, Boolean isFirstPage, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageSetupPostFooterValidateBeforeCall(name, sheetName, section, script, isFirstPage, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * update  page footer information  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param section  (required)
     * @param script  (required)
     * @param isFirstPage  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupPostFooterAsync(String name, String sheetName, Integer section, String script, Boolean isFirstPage, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageSetupPostFooterValidateBeforeCall(name, sheetName, section, script, isFirstPage, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageSetupPostHeader
     * @param name  (required)
     * @param sheetName  (required)
     * @param section  (required)
     * @param script  (required)
     * @param isFirstPage  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupPostHeaderCall(String name, String sheetName, Integer section, String script, Boolean isFirstPage, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup/header"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (section != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "section", section));
        if (script != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "script", script));
        if (isFirstPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isFirstPage", isFirstPage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageSetupPostHeaderValidateBeforeCall(String name, String sheetName, Integer section, String script, Boolean isFirstPage, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageSetupPostHeader(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageSetupPostHeader(Async)");
        }
        
        // verify the required parameter 'section' is set
        if (section == null) {
            throw new ApiException("Missing the required parameter 'section' when calling cellsPageSetupPostHeader(Async)");
        }
        
        // verify the required parameter 'script' is set
        if (script == null) {
            throw new ApiException("Missing the required parameter 'script' when calling cellsPageSetupPostHeader(Async)");
        }
        
        // verify the required parameter 'isFirstPage' is set
        if (isFirstPage == null) {
            throw new ApiException("Missing the required parameter 'isFirstPage' when calling cellsPageSetupPostHeader(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageSetupPostHeaderCall(name, sheetName, section, script, isFirstPage, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * update  page header information 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param section  (required)
     * @param script  (required)
     * @param isFirstPage  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPageSetupPostHeader(String name, String sheetName, Integer section, String script, Boolean isFirstPage, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPageSetupPostHeaderWithHttpInfo(name, sheetName, section, script, isFirstPage, folder, storageName);
        return resp.getData();
    }

    /**
     * update  page header information 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param section  (required)
     * @param script  (required)
     * @param isFirstPage  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPageSetupPostHeaderWithHttpInfo(String name, String sheetName, Integer section, String script, Boolean isFirstPage, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageSetupPostHeaderValidateBeforeCall(name, sheetName, section, script, isFirstPage, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * update  page header information  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param section  (required)
     * @param script  (required)
     * @param isFirstPage  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupPostHeaderAsync(String name, String sheetName, Integer section, String script, Boolean isFirstPage, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageSetupPostHeaderValidateBeforeCall(name, sheetName, section, script, isFirstPage, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageSetupPostPageSetup
     * @param name  (required)
     * @param sheetName  (required)
     * @param pageSetup  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupPostPageSetupCall(String name, String sheetName, PageSetup pageSetup, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pageSetup;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pagesetup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageSetupPostPageSetupValidateBeforeCall(String name, String sheetName, PageSetup pageSetup, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageSetupPostPageSetup(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageSetupPostPageSetup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageSetupPostPageSetupCall(name, sheetName, pageSetup, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Page Setup information.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pageSetup  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPageSetupPostPageSetup(String name, String sheetName, PageSetup pageSetup, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPageSetupPostPageSetupWithHttpInfo(name, sheetName, pageSetup, folder, storageName);
        return resp.getData();
    }

    /**
     * Update Page Setup information.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pageSetup  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPageSetupPostPageSetupWithHttpInfo(String name, String sheetName, PageSetup pageSetup, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageSetupPostPageSetupValidateBeforeCall(name, sheetName, pageSetup, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Page Setup information. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pageSetup  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageSetupPostPageSetupAsync(String name, String sheetName, PageSetup pageSetup, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageSetupPostPageSetupValidateBeforeCall(name, sheetName, pageSetup, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPicturesDeleteWorksheetPicture
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param pictureIndex Picture index (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesDeleteWorksheetPictureCall(String name, String sheetName, Integer pictureIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pictureIndex" + "\\}", apiClient.escapeString(pictureIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPicturesDeleteWorksheetPictureValidateBeforeCall(String name, String sheetName, Integer pictureIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPicturesDeleteWorksheetPicture(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPicturesDeleteWorksheetPicture(Async)");
        }
        
        // verify the required parameter 'pictureIndex' is set
        if (pictureIndex == null) {
            throw new ApiException("Missing the required parameter 'pictureIndex' when calling cellsPicturesDeleteWorksheetPicture(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPicturesDeleteWorksheetPictureCall(name, sheetName, pictureIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a picture object in worksheet
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param pictureIndex Picture index (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPicturesDeleteWorksheetPicture(String name, String sheetName, Integer pictureIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPicturesDeleteWorksheetPictureWithHttpInfo(name, sheetName, pictureIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete a picture object in worksheet
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param pictureIndex Picture index (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPicturesDeleteWorksheetPictureWithHttpInfo(String name, String sheetName, Integer pictureIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPicturesDeleteWorksheetPictureValidateBeforeCall(name, sheetName, pictureIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a picture object in worksheet (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param pictureIndex Picture index (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesDeleteWorksheetPictureAsync(String name, String sheetName, Integer pictureIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPicturesDeleteWorksheetPictureValidateBeforeCall(name, sheetName, pictureIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPicturesDeleteWorksheetPictures
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesDeleteWorksheetPicturesCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPicturesDeleteWorksheetPicturesValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPicturesDeleteWorksheetPictures(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPicturesDeleteWorksheetPictures(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPicturesDeleteWorksheetPicturesCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete all pictures in worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPicturesDeleteWorksheetPictures(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPicturesDeleteWorksheetPicturesWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete all pictures in worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPicturesDeleteWorksheetPicturesWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPicturesDeleteWorksheetPicturesValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all pictures in worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesDeleteWorksheetPicturesAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPicturesDeleteWorksheetPicturesValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPicturesGetWorksheetPicture
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture index. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesGetWorksheetPictureCall(String name, String sheetName, Integer pictureIndex, String format, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pictureIndex" + "\\}", apiClient.escapeString(pictureIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPicturesGetWorksheetPictureValidateBeforeCall(String name, String sheetName, Integer pictureIndex, String format, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPicturesGetWorksheetPicture(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPicturesGetWorksheetPicture(Async)");
        }
        
        // verify the required parameter 'pictureIndex' is set
        if (pictureIndex == null) {
            throw new ApiException("Missing the required parameter 'pictureIndex' when calling cellsPicturesGetWorksheetPicture(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPicturesGetWorksheetPictureCall(name, sheetName, pictureIndex, format, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * GRead worksheet picture by number.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture index. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsPicturesGetWorksheetPicture(String name, String sheetName, Integer pictureIndex, String format, String folder, String storageName) throws ApiException {
        ApiResponse<File> resp = cellsPicturesGetWorksheetPictureWithHttpInfo(name, sheetName, pictureIndex, format, folder, storageName);
        return resp.getData();
    }

    /**
     * GRead worksheet picture by number.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture index. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsPicturesGetWorksheetPictureWithHttpInfo(String name, String sheetName, Integer pictureIndex, String format, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPicturesGetWorksheetPictureValidateBeforeCall(name, sheetName, pictureIndex, format, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GRead worksheet picture by number. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture index. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesGetWorksheetPictureAsync(String name, String sheetName, Integer pictureIndex, String format, String folder, String storageName, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPicturesGetWorksheetPictureValidateBeforeCall(name, sheetName, pictureIndex, format, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPicturesGetWorksheetPictures
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesGetWorksheetPicturesCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPicturesGetWorksheetPicturesValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPicturesGetWorksheetPictures(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPicturesGetWorksheetPictures(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPicturesGetWorksheetPicturesCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheet pictures.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return PicturesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PicturesResponse cellsPicturesGetWorksheetPictures(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<PicturesResponse> resp = cellsPicturesGetWorksheetPicturesWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Read worksheet pictures.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;PicturesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PicturesResponse> cellsPicturesGetWorksheetPicturesWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPicturesGetWorksheetPicturesValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<PicturesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheet pictures. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesGetWorksheetPicturesAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<PicturesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPicturesGetWorksheetPicturesValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PicturesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPicturesPostWorksheetPicture
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture&#39;s index. (required)
     * @param picture Picture object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesPostWorksheetPictureCall(String name, String sheetName, Integer pictureIndex, Picture picture, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = picture;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pictureIndex" + "\\}", apiClient.escapeString(pictureIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPicturesPostWorksheetPictureValidateBeforeCall(String name, String sheetName, Integer pictureIndex, Picture picture, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPicturesPostWorksheetPicture(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPicturesPostWorksheetPicture(Async)");
        }
        
        // verify the required parameter 'pictureIndex' is set
        if (pictureIndex == null) {
            throw new ApiException("Missing the required parameter 'pictureIndex' when calling cellsPicturesPostWorksheetPicture(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPicturesPostWorksheetPictureCall(name, sheetName, pictureIndex, picture, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update worksheet picture by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture&#39;s index. (required)
     * @param picture Picture object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return PictureResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PictureResponse cellsPicturesPostWorksheetPicture(String name, String sheetName, Integer pictureIndex, Picture picture, String folder, String storageName) throws ApiException {
        ApiResponse<PictureResponse> resp = cellsPicturesPostWorksheetPictureWithHttpInfo(name, sheetName, pictureIndex, picture, folder, storageName);
        return resp.getData();
    }

    /**
     * Update worksheet picture by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture&#39;s index. (required)
     * @param picture Picture object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;PictureResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PictureResponse> cellsPicturesPostWorksheetPictureWithHttpInfo(String name, String sheetName, Integer pictureIndex, Picture picture, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPicturesPostWorksheetPictureValidateBeforeCall(name, sheetName, pictureIndex, picture, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<PictureResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update worksheet picture by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture&#39;s index. (required)
     * @param picture Picture object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesPostWorksheetPictureAsync(String name, String sheetName, Integer pictureIndex, Picture picture, String folder, String storageName, final ApiCallback<PictureResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPicturesPostWorksheetPictureValidateBeforeCall(name, sheetName, pictureIndex, picture, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PictureResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPicturesPutWorksheetAddPicture
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param picture Pictute object (optional)
     * @param upperLeftRow The image upper left row. (optional, default to 0)
     * @param upperLeftColumn The image upper left column. (optional, default to 0)
     * @param lowerRightRow The image low right row. (optional, default to 0)
     * @param lowerRightColumn The image low right column. (optional, default to 0)
     * @param picturePath The picture path, if not provided the picture data is inspected in the request body. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesPutWorksheetAddPictureCall(String name, String sheetName, Picture picture, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String picturePath, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = picture;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (upperLeftRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftRow", upperLeftRow));
        if (upperLeftColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftColumn", upperLeftColumn));
        if (lowerRightRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lowerRightRow", lowerRightRow));
        if (lowerRightColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lowerRightColumn", lowerRightColumn));
        if (picturePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "picturePath", picturePath));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPicturesPutWorksheetAddPictureValidateBeforeCall(String name, String sheetName, Picture picture, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String picturePath, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPicturesPutWorksheetAddPicture(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPicturesPutWorksheetAddPicture(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPicturesPutWorksheetAddPictureCall(name, sheetName, picture, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, picturePath, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new worksheet picture.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param picture Pictute object (optional)
     * @param upperLeftRow The image upper left row. (optional, default to 0)
     * @param upperLeftColumn The image upper left column. (optional, default to 0)
     * @param lowerRightRow The image low right row. (optional, default to 0)
     * @param lowerRightColumn The image low right column. (optional, default to 0)
     * @param picturePath The picture path, if not provided the picture data is inspected in the request body. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return PicturesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PicturesResponse cellsPicturesPutWorksheetAddPicture(String name, String sheetName, Picture picture, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String picturePath, String folder, String storageName) throws ApiException {
        ApiResponse<PicturesResponse> resp = cellsPicturesPutWorksheetAddPictureWithHttpInfo(name, sheetName, picture, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, picturePath, folder, storageName);
        return resp.getData();
    }

    /**
     * Add a new worksheet picture.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param picture Pictute object (optional)
     * @param upperLeftRow The image upper left row. (optional, default to 0)
     * @param upperLeftColumn The image upper left column. (optional, default to 0)
     * @param lowerRightRow The image low right row. (optional, default to 0)
     * @param lowerRightColumn The image low right column. (optional, default to 0)
     * @param picturePath The picture path, if not provided the picture data is inspected in the request body. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;PicturesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PicturesResponse> cellsPicturesPutWorksheetAddPictureWithHttpInfo(String name, String sheetName, Picture picture, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String picturePath, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPicturesPutWorksheetAddPictureValidateBeforeCall(name, sheetName, picture, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, picturePath, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<PicturesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a new worksheet picture. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param picture Pictute object (optional)
     * @param upperLeftRow The image upper left row. (optional, default to 0)
     * @param upperLeftColumn The image upper left column. (optional, default to 0)
     * @param lowerRightRow The image low right row. (optional, default to 0)
     * @param lowerRightColumn The image low right column. (optional, default to 0)
     * @param picturePath The picture path, if not provided the picture data is inspected in the request body. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesPutWorksheetAddPictureAsync(String name, String sheetName, Picture picture, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String picturePath, String folder, String storageName, final ApiCallback<PicturesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPicturesPutWorksheetAddPictureValidateBeforeCall(name, sheetName, picture, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, picturePath, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PicturesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesDeletePivotTableField
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeletePivotTableFieldCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pivotFieldType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotFieldType", pivotFieldType));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesDeletePivotTableFieldValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesDeletePivotTableField(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesDeletePivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesDeletePivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotFieldType' is set
        if (pivotFieldType == null) {
            throw new ApiException("Missing the required parameter 'pivotFieldType' when calling cellsPivotTablesDeletePivotTableField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesDeletePivotTableFieldCall(name, sheetName, pivotTableIndex, pivotFieldType, request, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete pivot field into into pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesDeletePivotTableField(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesDeletePivotTableFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, request, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete pivot field into into pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesDeletePivotTableFieldWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesDeletePivotTableFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, request, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete pivot field into into pivot table (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeletePivotTableFieldAsync(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesDeletePivotTableFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, request, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesDeleteWorksheetPivotTable
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableCall(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesDeleteWorksheetPivotTable(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesDeleteWorksheetPivotTable(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesDeleteWorksheetPivotTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableCall(name, sheetName, pivotTableIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet pivot table by index
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesDeleteWorksheetPivotTable(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo(name, sheetName, pivotTableIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete worksheet pivot table by index
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableValidateBeforeCall(name, sheetName, pivotTableIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet pivot table by index (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableAsync(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableValidateBeforeCall(name, sheetName, pivotTableIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesDeleteWorksheetPivotTableFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableFilterCall(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{fieldIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()))
            .replaceAll("\\{" + "fieldIndex" + "\\}", apiClient.escapeString(fieldIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableFilterValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesDeleteWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesDeleteWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesDeleteWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsPivotTablesDeleteWorksheetPivotTableFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableFilterCall(name, sheetName, pivotTableIndex, fieldIndex, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * delete  pivot filter for piovt table             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesDeleteWorksheetPivotTableFilter(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo(name, sheetName, pivotTableIndex, fieldIndex, needReCalculate, folder, storageName);
        return resp.getData();
    }

    /**
     * delete  pivot filter for piovt table             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableFilterValidateBeforeCall(name, sheetName, pivotTableIndex, fieldIndex, needReCalculate, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * delete  pivot filter for piovt table              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableFilterAsync(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, Boolean needReCalculate, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableFilterValidateBeforeCall(name, sheetName, pivotTableIndex, fieldIndex, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesDeleteWorksheetPivotTableFilters
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableFiltersCall(String name, String sheetName, Integer pivotTableIndex, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableFiltersValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesDeleteWorksheetPivotTableFilters(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesDeleteWorksheetPivotTableFilters(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesDeleteWorksheetPivotTableFilters(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableFiltersCall(name, sheetName, pivotTableIndex, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * delete all pivot filters for piovt table
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesDeleteWorksheetPivotTableFilters(String name, String sheetName, Integer pivotTableIndex, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo(name, sheetName, pivotTableIndex, needReCalculate, folder, storageName);
        return resp.getData();
    }

    /**
     * delete all pivot filters for piovt table
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableFiltersValidateBeforeCall(name, sheetName, pivotTableIndex, needReCalculate, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * delete all pivot filters for piovt table (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableFiltersAsync(String name, String sheetName, Integer pivotTableIndex, Boolean needReCalculate, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableFiltersValidateBeforeCall(name, sheetName, pivotTableIndex, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesDeleteWorksheetPivotTables
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTablesCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTablesValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesDeleteWorksheetPivotTables(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesDeleteWorksheetPivotTables(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTablesCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet pivot tables
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesDeleteWorksheetPivotTables(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete worksheet pivot tables
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTablesValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet pivot tables (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTablesAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTablesValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesGetPivotTableField
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldIndex The field index in the base fields. (required)
     * @param pivotFieldType The fields area type. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetPivotTableFieldCall(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pivotFieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotFieldIndex", pivotFieldIndex));
        if (pivotFieldType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotFieldType", pivotFieldType));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesGetPivotTableFieldValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesGetPivotTableField(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesGetPivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesGetPivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotFieldIndex' is set
        if (pivotFieldIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotFieldIndex' when calling cellsPivotTablesGetPivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotFieldType' is set
        if (pivotFieldType == null) {
            throw new ApiException("Missing the required parameter 'pivotFieldType' when calling cellsPivotTablesGetPivotTableField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesGetPivotTableFieldCall(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get pivot field into into pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldIndex The field index in the base fields. (required)
     * @param pivotFieldType The fields area type. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return PivotFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PivotFieldResponse cellsPivotTablesGetPivotTableField(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, String folder, String storageName) throws ApiException {
        ApiResponse<PivotFieldResponse> resp = cellsPivotTablesGetPivotTableFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, folder, storageName);
        return resp.getData();
    }

    /**
     * Get pivot field into into pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldIndex The field index in the base fields. (required)
     * @param pivotFieldType The fields area type. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;PivotFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PivotFieldResponse> cellsPivotTablesGetPivotTableFieldWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesGetPivotTableFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<PivotFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pivot field into into pivot table (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldIndex The field index in the base fields. (required)
     * @param pivotFieldType The fields area type. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetPivotTableFieldAsync(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, String folder, String storageName, final ApiCallback<PivotFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesGetPivotTableFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PivotFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesGetWorksheetPivotTable
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivottableIndex  (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableCall(String name, String sheetName, Integer pivottableIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivottableIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivottableIndex" + "\\}", apiClient.escapeString(pivottableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableValidateBeforeCall(String name, String sheetName, Integer pivottableIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesGetWorksheetPivotTable(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesGetWorksheetPivotTable(Async)");
        }
        
        // verify the required parameter 'pivottableIndex' is set
        if (pivottableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivottableIndex' when calling cellsPivotTablesGetWorksheetPivotTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableCall(name, sheetName, pivottableIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet pivottable info by index.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivottableIndex  (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return PivotTableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PivotTableResponse cellsPivotTablesGetWorksheetPivotTable(String name, String sheetName, Integer pivottableIndex, String folder, String storageName) throws ApiException {
        ApiResponse<PivotTableResponse> resp = cellsPivotTablesGetWorksheetPivotTableWithHttpInfo(name, sheetName, pivottableIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet pivottable info by index.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivottableIndex  (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;PivotTableResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PivotTableResponse> cellsPivotTablesGetWorksheetPivotTableWithHttpInfo(String name, String sheetName, Integer pivottableIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableValidateBeforeCall(name, sheetName, pivottableIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<PivotTableResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet pivottable info by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivottableIndex  (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableAsync(String name, String sheetName, Integer pivottableIndex, String folder, String storageName, final ApiCallback<PivotTableResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableValidateBeforeCall(name, sheetName, pivottableIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PivotTableResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesGetWorksheetPivotTableFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filterIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableFilterCall(String name, String sheetName, Integer pivotTableIndex, Integer filterIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{filterIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()))
            .replaceAll("\\{" + "filterIndex" + "\\}", apiClient.escapeString(filterIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableFilterValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Integer filterIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesGetWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesGetWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesGetWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'filterIndex' is set
        if (filterIndex == null) {
            throw new ApiException("Missing the required parameter 'filterIndex' when calling cellsPivotTablesGetWorksheetPivotTableFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableFilterCall(name, sheetName, pivotTableIndex, filterIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filterIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return PivotFilterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PivotFilterResponse cellsPivotTablesGetWorksheetPivotTableFilter(String name, String sheetName, Integer pivotTableIndex, Integer filterIndex, String folder, String storageName) throws ApiException {
        ApiResponse<PivotFilterResponse> resp = cellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo(name, sheetName, pivotTableIndex, filterIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filterIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;PivotFilterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PivotFilterResponse> cellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Integer filterIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableFilterValidateBeforeCall(name, sheetName, pivotTableIndex, filterIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<PivotFilterResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filterIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableFilterAsync(String name, String sheetName, Integer pivotTableIndex, Integer filterIndex, String folder, String storageName, final ApiCallback<PivotFilterResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableFilterValidateBeforeCall(name, sheetName, pivotTableIndex, filterIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PivotFilterResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesGetWorksheetPivotTableFilters
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableFiltersCall(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableFiltersValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesGetWorksheetPivotTableFilters(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesGetWorksheetPivotTableFilters(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesGetWorksheetPivotTableFilters(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableFiltersCall(name, sheetName, pivotTableIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return PivotFiltersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PivotFiltersResponse cellsPivotTablesGetWorksheetPivotTableFilters(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName) throws ApiException {
        ApiResponse<PivotFiltersResponse> resp = cellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo(name, sheetName, pivotTableIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;PivotFiltersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PivotFiltersResponse> cellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableFiltersValidateBeforeCall(name, sheetName, pivotTableIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<PivotFiltersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableFiltersAsync(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName, final ApiCallback<PivotFiltersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableFiltersValidateBeforeCall(name, sheetName, pivotTableIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PivotFiltersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesGetWorksheetPivotTables
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTablesCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTablesValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesGetWorksheetPivotTables(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesGetWorksheetPivotTables(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTablesCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet pivottables info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return PivotTablesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PivotTablesResponse cellsPivotTablesGetWorksheetPivotTables(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<PivotTablesResponse> resp = cellsPivotTablesGetWorksheetPivotTablesWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet pivottables info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;PivotTablesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PivotTablesResponse> cellsPivotTablesGetWorksheetPivotTablesWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTablesValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<PivotTablesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet pivottables info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTablesAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<PivotTablesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTablesValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PivotTablesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostPivotTableCellStyle
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param column  (required)
     * @param row  (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableCellStyleCall(String name, String sheetName, Integer pivotTableIndex, Integer column, Integer row, Style style, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = style;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Format"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostPivotTableCellStyleValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Integer column, Integer row, Style style, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostPivotTableCellStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostPivotTableCellStyle(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostPivotTableCellStyle(Async)");
        }
        
        // verify the required parameter 'column' is set
        if (column == null) {
            throw new ApiException("Missing the required parameter 'column' when calling cellsPivotTablesPostPivotTableCellStyle(Async)");
        }
        
        // verify the required parameter 'row' is set
        if (row == null) {
            throw new ApiException("Missing the required parameter 'row' when calling cellsPivotTablesPostPivotTableCellStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableCellStyleCall(name, sheetName, pivotTableIndex, column, row, style, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update cell style for pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param column  (required)
     * @param row  (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesPostPivotTableCellStyle(String name, String sheetName, Integer pivotTableIndex, Integer column, Integer row, Style style, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesPostPivotTableCellStyleWithHttpInfo(name, sheetName, pivotTableIndex, column, row, style, needReCalculate, folder, storageName);
        return resp.getData();
    }

    /**
     * Update cell style for pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param column  (required)
     * @param row  (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesPostPivotTableCellStyleWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Integer column, Integer row, Style style, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableCellStyleValidateBeforeCall(name, sheetName, pivotTableIndex, column, row, style, needReCalculate, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update cell style for pivot table (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param column  (required)
     * @param row  (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableCellStyleAsync(String name, String sheetName, Integer pivotTableIndex, Integer column, Integer row, Style style, Boolean needReCalculate, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableCellStyleValidateBeforeCall(name, sheetName, pivotTableIndex, column, row, style, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostPivotTableFieldHideItem
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldType  (required)
     * @param fieldIndex  (required)
     * @param itemIndex  (required)
     * @param isHide  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableFieldHideItemCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, Integer fieldIndex, Integer itemIndex, Boolean isHide, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Hide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pivotFieldType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotFieldType", pivotFieldType));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (itemIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "itemIndex", itemIndex));
        if (isHide != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isHide", isHide));
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostPivotTableFieldHideItemValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, Integer fieldIndex, Integer itemIndex, Boolean isHide, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        // verify the required parameter 'pivotFieldType' is set
        if (pivotFieldType == null) {
            throw new ApiException("Missing the required parameter 'pivotFieldType' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        // verify the required parameter 'itemIndex' is set
        if (itemIndex == null) {
            throw new ApiException("Missing the required parameter 'itemIndex' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        // verify the required parameter 'isHide' is set
        if (isHide == null) {
            throw new ApiException("Missing the required parameter 'isHide' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableFieldHideItemCall(name, sheetName, pivotTableIndex, pivotFieldType, fieldIndex, itemIndex, isHide, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldType  (required)
     * @param fieldIndex  (required)
     * @param itemIndex  (required)
     * @param isHide  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesPostPivotTableFieldHideItem(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, Integer fieldIndex, Integer itemIndex, Boolean isHide, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, fieldIndex, itemIndex, isHide, needReCalculate, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldType  (required)
     * @param fieldIndex  (required)
     * @param itemIndex  (required)
     * @param isHide  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, Integer fieldIndex, Integer itemIndex, Boolean isHide, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableFieldHideItemValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, fieldIndex, itemIndex, isHide, needReCalculate, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldType  (required)
     * @param fieldIndex  (required)
     * @param itemIndex  (required)
     * @param isHide  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableFieldHideItemAsync(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, Integer fieldIndex, Integer itemIndex, Boolean isHide, Boolean needReCalculate, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableFieldHideItemValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, fieldIndex, itemIndex, isHide, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostPivotTableFieldMoveTo
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param from  (required)
     * @param to  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableFieldMoveToCall(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, String from, String to, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Move"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostPivotTableFieldMoveToValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, String from, String to, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostPivotTableFieldMoveTo(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostPivotTableFieldMoveTo(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostPivotTableFieldMoveTo(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsPivotTablesPostPivotTableFieldMoveTo(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling cellsPivotTablesPostPivotTableFieldMoveTo(Async)");
        }
        
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling cellsPivotTablesPostPivotTableFieldMoveTo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableFieldMoveToCall(name, sheetName, pivotTableIndex, fieldIndex, from, to, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param from  (required)
     * @param to  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesPostPivotTableFieldMoveTo(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, String from, String to, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo(name, sheetName, pivotTableIndex, fieldIndex, from, to, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param from  (required)
     * @param to  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, String from, String to, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableFieldMoveToValidateBeforeCall(name, sheetName, pivotTableIndex, fieldIndex, from, to, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param from  (required)
     * @param to  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableFieldMoveToAsync(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, String from, String to, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableFieldMoveToValidateBeforeCall(name, sheetName, pivotTableIndex, fieldIndex, from, to, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostPivotTableStyle
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableStyleCall(String name, String sheetName, Integer pivotTableIndex, Style style, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = style;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/FormatAll"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostPivotTableStyleValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Style style, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostPivotTableStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostPivotTableStyle(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostPivotTableStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableStyleCall(name, sheetName, pivotTableIndex, style, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update style for pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesPostPivotTableStyle(String name, String sheetName, Integer pivotTableIndex, Style style, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesPostPivotTableStyleWithHttpInfo(name, sheetName, pivotTableIndex, style, needReCalculate, folder, storageName);
        return resp.getData();
    }

    /**
     * Update style for pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesPostPivotTableStyleWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Style style, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableStyleValidateBeforeCall(name, sheetName, pivotTableIndex, style, needReCalculate, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update style for pivot table (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableStyleAsync(String name, String sheetName, Integer pivotTableIndex, Style style, Boolean needReCalculate, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableStyleValidateBeforeCall(name, sheetName, pivotTableIndex, style, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostPivotTableUpdatePivotField
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldIndex  (required)
     * @param pivotFieldType  (required)
     * @param pivotField  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableUpdatePivotFieldCall(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, PivotField pivotField, Boolean needReCalculate, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pivotField;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFields/{pivotFieldIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()))
            .replaceAll("\\{" + "pivotFieldIndex" + "\\}", apiClient.escapeString(pivotFieldIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pivotFieldType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotFieldType", pivotFieldType));
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostPivotTableUpdatePivotFieldValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, PivotField pivotField, Boolean needReCalculate, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostPivotTableUpdatePivotField(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostPivotTableUpdatePivotField(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostPivotTableUpdatePivotField(Async)");
        }
        
        // verify the required parameter 'pivotFieldIndex' is set
        if (pivotFieldIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotFieldIndex' when calling cellsPivotTablesPostPivotTableUpdatePivotField(Async)");
        }
        
        // verify the required parameter 'pivotFieldType' is set
        if (pivotFieldType == null) {
            throw new ApiException("Missing the required parameter 'pivotFieldType' when calling cellsPivotTablesPostPivotTableUpdatePivotField(Async)");
        }
        
        // verify the required parameter 'pivotField' is set
        if (pivotField == null) {
            throw new ApiException("Missing the required parameter 'pivotField' when calling cellsPivotTablesPostPivotTableUpdatePivotField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableUpdatePivotFieldCall(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, pivotField, needReCalculate, folder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldIndex  (required)
     * @param pivotFieldType  (required)
     * @param pivotField  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesPostPivotTableUpdatePivotField(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, PivotField pivotField, Boolean needReCalculate, String folder) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesPostPivotTableUpdatePivotFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, pivotField, needReCalculate, folder);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldIndex  (required)
     * @param pivotFieldType  (required)
     * @param pivotField  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesPostPivotTableUpdatePivotFieldWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, PivotField pivotField, Boolean needReCalculate, String folder) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableUpdatePivotFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, pivotField, needReCalculate, folder, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldIndex  (required)
     * @param pivotFieldType  (required)
     * @param pivotField  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableUpdatePivotFieldAsync(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, PivotField pivotField, Boolean needReCalculate, String folder, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableUpdatePivotFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, pivotField, needReCalculate, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostPivotTableUpdatePivotFields
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldType  (required)
     * @param pivotField  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableUpdatePivotFieldsCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotField pivotField, Boolean needReCalculate, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pivotField;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFields"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pivotFieldType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotFieldType", pivotFieldType));
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostPivotTableUpdatePivotFieldsValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotField pivotField, Boolean needReCalculate, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostPivotTableUpdatePivotFields(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostPivotTableUpdatePivotFields(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostPivotTableUpdatePivotFields(Async)");
        }
        
        // verify the required parameter 'pivotFieldType' is set
        if (pivotFieldType == null) {
            throw new ApiException("Missing the required parameter 'pivotFieldType' when calling cellsPivotTablesPostPivotTableUpdatePivotFields(Async)");
        }
        
        // verify the required parameter 'pivotField' is set
        if (pivotField == null) {
            throw new ApiException("Missing the required parameter 'pivotField' when calling cellsPivotTablesPostPivotTableUpdatePivotFields(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableUpdatePivotFieldsCall(name, sheetName, pivotTableIndex, pivotFieldType, pivotField, needReCalculate, folder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldType  (required)
     * @param pivotField  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesPostPivotTableUpdatePivotFields(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotField pivotField, Boolean needReCalculate, String folder) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesPostPivotTableUpdatePivotFieldsWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, pivotField, needReCalculate, folder);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldType  (required)
     * @param pivotField  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesPostPivotTableUpdatePivotFieldsWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotField pivotField, Boolean needReCalculate, String folder) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableUpdatePivotFieldsValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, pivotField, needReCalculate, folder, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldType  (required)
     * @param pivotField  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableUpdatePivotFieldsAsync(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotField pivotField, Boolean needReCalculate, String folder, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableUpdatePivotFieldsValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, pivotField, needReCalculate, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostWorksheetPivotTableCalculate
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostWorksheetPivotTableCalculateCall(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Calculate"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostWorksheetPivotTableCalculateValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostWorksheetPivotTableCalculate(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostWorksheetPivotTableCalculate(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostWorksheetPivotTableCalculate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostWorksheetPivotTableCalculateCall(name, sheetName, pivotTableIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculates pivottable&#39;s data to cells.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesPostWorksheetPivotTableCalculate(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo(name, sheetName, pivotTableIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Calculates pivottable&#39;s data to cells.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostWorksheetPivotTableCalculateValidateBeforeCall(name, sheetName, pivotTableIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculates pivottable&#39;s data to cells. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostWorksheetPivotTableCalculateAsync(String name, String sheetName, Integer pivotTableIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostWorksheetPivotTableCalculateValidateBeforeCall(name, sheetName, pivotTableIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostWorksheetPivotTableMove
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param row  (optional)
     * @param column  (optional)
     * @param destCellName  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostWorksheetPivotTableMoveCall(String name, String sheetName, Integer pivotTableIndex, Integer row, Integer column, String destCellName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Move"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (destCellName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destCellName", destCellName));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostWorksheetPivotTableMoveValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Integer row, Integer column, String destCellName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostWorksheetPivotTableMove(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostWorksheetPivotTableMove(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostWorksheetPivotTableMove(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostWorksheetPivotTableMoveCall(name, sheetName, pivotTableIndex, row, column, destCellName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param row  (optional)
     * @param column  (optional)
     * @param destCellName  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesPostWorksheetPivotTableMove(String name, String sheetName, Integer pivotTableIndex, Integer row, Integer column, String destCellName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo(name, sheetName, pivotTableIndex, row, column, destCellName, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param row  (optional)
     * @param column  (optional)
     * @param destCellName  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Integer row, Integer column, String destCellName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostWorksheetPivotTableMoveValidateBeforeCall(name, sheetName, pivotTableIndex, row, column, destCellName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param row  (optional)
     * @param column  (optional)
     * @param destCellName  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostWorksheetPivotTableMoveAsync(String name, String sheetName, Integer pivotTableIndex, Integer row, Integer column, String destCellName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostWorksheetPivotTableMoveValidateBeforeCall(name, sheetName, pivotTableIndex, row, column, destCellName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPutPivotTableField
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPutPivotTableFieldCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pivotFieldType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotFieldType", pivotFieldType));
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPutPivotTableFieldValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPutPivotTableField(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPutPivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPutPivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotFieldType' is set
        if (pivotFieldType == null) {
            throw new ApiException("Missing the required parameter 'pivotFieldType' when calling cellsPivotTablesPutPivotTableField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPutPivotTableFieldCall(name, sheetName, pivotTableIndex, pivotFieldType, request, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add pivot field into into pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesPutPivotTableField(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesPutPivotTableFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, request, needReCalculate, folder, storageName);
        return resp.getData();
    }

    /**
     * Add pivot field into into pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesPutPivotTableFieldWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPutPivotTableFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, request, needReCalculate, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add pivot field into into pivot table (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPutPivotTableFieldAsync(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, Boolean needReCalculate, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPutPivotTableFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, request, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPutWorksheetPivotTable
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param request CreatePivotTableRequest dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param sourceData The data for the new PivotTable cache. (optional)
     * @param destCellName The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param tableName The name of the new PivotTable report. (optional)
     * @param useSameSource Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPutWorksheetPivotTableCall(String name, String sheetName, CreatePivotTableRequest request, String folder, String storageName, String sourceData, String destCellName, String tableName, Boolean useSameSource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));
        if (sourceData != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceData", sourceData));
        if (destCellName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destCellName", destCellName));
        if (tableName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tableName", tableName));
        if (useSameSource != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "useSameSource", useSameSource));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPutWorksheetPivotTableValidateBeforeCall(String name, String sheetName, CreatePivotTableRequest request, String folder, String storageName, String sourceData, String destCellName, String tableName, Boolean useSameSource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPutWorksheetPivotTable(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPutWorksheetPivotTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPutWorksheetPivotTableCall(name, sheetName, request, folder, storageName, sourceData, destCellName, tableName, useSameSource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a pivot table into worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param request CreatePivotTableRequest dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param sourceData The data for the new PivotTable cache. (optional)
     * @param destCellName The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param tableName The name of the new PivotTable report. (optional)
     * @param useSameSource Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     * @return PivotTableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PivotTableResponse cellsPivotTablesPutWorksheetPivotTable(String name, String sheetName, CreatePivotTableRequest request, String folder, String storageName, String sourceData, String destCellName, String tableName, Boolean useSameSource) throws ApiException {
        ApiResponse<PivotTableResponse> resp = cellsPivotTablesPutWorksheetPivotTableWithHttpInfo(name, sheetName, request, folder, storageName, sourceData, destCellName, tableName, useSameSource);
        return resp.getData();
    }

    /**
     * Add a pivot table into worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param request CreatePivotTableRequest dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param sourceData The data for the new PivotTable cache. (optional)
     * @param destCellName The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param tableName The name of the new PivotTable report. (optional)
     * @param useSameSource Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     * @return ApiResponse&lt;PivotTableResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PivotTableResponse> cellsPivotTablesPutWorksheetPivotTableWithHttpInfo(String name, String sheetName, CreatePivotTableRequest request, String folder, String storageName, String sourceData, String destCellName, String tableName, Boolean useSameSource) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPutWorksheetPivotTableValidateBeforeCall(name, sheetName, request, folder, storageName, sourceData, destCellName, tableName, useSameSource, null, null);
        Type localVarReturnType = new TypeToken<PivotTableResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a pivot table into worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param request CreatePivotTableRequest dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param sourceData The data for the new PivotTable cache. (optional)
     * @param destCellName The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param tableName The name of the new PivotTable report. (optional)
     * @param useSameSource Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPutWorksheetPivotTableAsync(String name, String sheetName, CreatePivotTableRequest request, String folder, String storageName, String sourceData, String destCellName, String tableName, Boolean useSameSource, final ApiCallback<PivotTableResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPutWorksheetPivotTableValidateBeforeCall(name, sheetName, request, folder, storageName, sourceData, destCellName, tableName, useSameSource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PivotTableResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPutWorksheetPivotTableFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filter  (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPutWorksheetPivotTableFilterCall(String name, String sheetName, Integer pivotTableIndex, PivotFilter filter, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = filter;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPutWorksheetPivotTableFilterValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, PivotFilter filter, Boolean needReCalculate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPutWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPutWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPutWorksheetPivotTableFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPutWorksheetPivotTableFilterCall(name, sheetName, pivotTableIndex, filter, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add pivot filter for piovt table index
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filter  (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPivotTablesPutWorksheetPivotTableFilter(String name, String sheetName, Integer pivotTableIndex, PivotFilter filter, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo(name, sheetName, pivotTableIndex, filter, needReCalculate, folder, storageName);
        return resp.getData();
    }

    /**
     * Add pivot filter for piovt table index
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filter  (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, PivotFilter filter, Boolean needReCalculate, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPutWorksheetPivotTableFilterValidateBeforeCall(name, sheetName, pivotTableIndex, filter, needReCalculate, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add pivot filter for piovt table index (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filter  (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPutWorksheetPivotTableFilterAsync(String name, String sheetName, Integer pivotTableIndex, PivotFilter filter, Boolean needReCalculate, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPutWorksheetPivotTableFilterValidateBeforeCall(name, sheetName, pivotTableIndex, filter, needReCalculate, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostCellCalculate
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostCellCalculateCall(String name, String sheetName, String cellName, CalculationOptions options, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = options;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/calculate"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostCellCalculateValidateBeforeCall(String name, String sheetName, String cellName, CalculationOptions options, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostCellCalculate(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostCellCalculate(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsPostCellCalculate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostCellCalculateCall(name, sheetName, cellName, options, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cell calculate formula
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostCellCalculate(String name, String sheetName, String cellName, CalculationOptions options, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostCellCalculateWithHttpInfo(name, sheetName, cellName, options, folder, storageName);
        return resp.getData();
    }

    /**
     * Cell calculate formula
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostCellCalculateWithHttpInfo(String name, String sheetName, String cellName, CalculationOptions options, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostCellCalculateValidateBeforeCall(name, sheetName, cellName, options, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cell calculate formula (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostCellCalculateAsync(String name, String sheetName, String cellName, CalculationOptions options, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostCellCalculateValidateBeforeCall(name, sheetName, cellName, options, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostCellCharacters
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostCellCharactersCall(String name, String sheetName, String cellName, List<FontSetting> options, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = options;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/characters"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostCellCharactersValidateBeforeCall(String name, String sheetName, String cellName, List<FontSetting> options, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostCellCharacters(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostCellCharacters(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsPostCellCharacters(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostCellCharactersCall(name, sheetName, cellName, options, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set cell characters 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostCellCharacters(String name, String sheetName, String cellName, List<FontSetting> options, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostCellCharactersWithHttpInfo(name, sheetName, cellName, options, folder, storageName);
        return resp.getData();
    }

    /**
     * Set cell characters 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostCellCharactersWithHttpInfo(String name, String sheetName, String cellName, List<FontSetting> options, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostCellCharactersValidateBeforeCall(name, sheetName, cellName, options, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set cell characters  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellName  (required)
     * @param options  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostCellCharactersAsync(String name, String sheetName, String cellName, List<FontSetting> options, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostCellCharactersValidateBeforeCall(name, sheetName, cellName, options, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostClearContents
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostClearContentsCall(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/clearcontents"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (endRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endRow", endRow));
        if (endColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endColumn", endColumn));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostClearContentsValidateBeforeCall(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostClearContents(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostClearContents(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostClearContentsCall(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clear cells contents.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostClearContents(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostClearContentsWithHttpInfo(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storageName);
        return resp.getData();
    }

    /**
     * Clear cells contents.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostClearContentsWithHttpInfo(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostClearContentsValidateBeforeCall(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clear cells contents. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostClearContentsAsync(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostClearContentsValidateBeforeCall(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostClearFormats
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostClearFormatsCall(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/clearformats"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (endRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endRow", endRow));
        if (endColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endColumn", endColumn));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostClearFormatsValidateBeforeCall(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostClearFormats(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostClearFormats(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostClearFormatsCall(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clear cells contents.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostClearFormats(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostClearFormatsWithHttpInfo(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storageName);
        return resp.getData();
    }

    /**
     * Clear cells contents.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostClearFormatsWithHttpInfo(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostClearFormatsValidateBeforeCall(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clear cells contents. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (optional)
     * @param startRow The start row. (optional)
     * @param startColumn The start column. (optional)
     * @param endRow The end row. (optional)
     * @param endColumn The end column. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostClearFormatsAsync(String name, String sheetName, String range, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostClearFormatsValidateBeforeCall(name, sheetName, range, startRow, startColumn, endRow, endColumn, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostColumnStyle
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param style Style dto (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostColumnStyleCall(String name, String sheetName, Integer columnIndex, Style style, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = style;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}/style"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "columnIndex" + "\\}", apiClient.escapeString(columnIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostColumnStyleValidateBeforeCall(String name, String sheetName, Integer columnIndex, Style style, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostColumnStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostColumnStyle(Async)");
        }
        
        // verify the required parameter 'columnIndex' is set
        if (columnIndex == null) {
            throw new ApiException("Missing the required parameter 'columnIndex' when calling cellsPostColumnStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostColumnStyleCall(name, sheetName, columnIndex, style, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set column style
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param style Style dto (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostColumnStyle(String name, String sheetName, Integer columnIndex, Style style, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostColumnStyleWithHttpInfo(name, sheetName, columnIndex, style, folder, storageName);
        return resp.getData();
    }

    /**
     * Set column style
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param style Style dto (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostColumnStyleWithHttpInfo(String name, String sheetName, Integer columnIndex, Style style, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostColumnStyleValidateBeforeCall(name, sheetName, columnIndex, style, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set column style (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param style Style dto (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostColumnStyleAsync(String name, String sheetName, Integer columnIndex, Style style, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostColumnStyleValidateBeforeCall(name, sheetName, columnIndex, style, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostCopyCellIntoCell
     * @param name Workbook name. (required)
     * @param destCellName Destination cell name (required)
     * @param sheetName Destination worksheet name. (required)
     * @param worksheet Source worksheet name. (required)
     * @param cellname Source cell name (optional)
     * @param row Source row (optional)
     * @param column Source column (optional)
     * @param folder Folder name (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostCopyCellIntoCellCall(String name, String destCellName, String sheetName, String worksheet, String cellname, Integer row, Integer column, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{destCellName}/copy"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "destCellName" + "\\}", apiClient.escapeString(destCellName.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (worksheet != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "worksheet", worksheet));
        if (cellname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellname", cellname));
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostCopyCellIntoCellValidateBeforeCall(String name, String destCellName, String sheetName, String worksheet, String cellname, Integer row, Integer column, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostCopyCellIntoCell(Async)");
        }
        
        // verify the required parameter 'destCellName' is set
        if (destCellName == null) {
            throw new ApiException("Missing the required parameter 'destCellName' when calling cellsPostCopyCellIntoCell(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostCopyCellIntoCell(Async)");
        }
        
        // verify the required parameter 'worksheet' is set
        if (worksheet == null) {
            throw new ApiException("Missing the required parameter 'worksheet' when calling cellsPostCopyCellIntoCell(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostCopyCellIntoCellCall(name, destCellName, sheetName, worksheet, cellname, row, column, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Copy cell into cell
     * 
     * @param name Workbook name. (required)
     * @param destCellName Destination cell name (required)
     * @param sheetName Destination worksheet name. (required)
     * @param worksheet Source worksheet name. (required)
     * @param cellname Source cell name (optional)
     * @param row Source row (optional)
     * @param column Source column (optional)
     * @param folder Folder name (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostCopyCellIntoCell(String name, String destCellName, String sheetName, String worksheet, String cellname, Integer row, Integer column, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostCopyCellIntoCellWithHttpInfo(name, destCellName, sheetName, worksheet, cellname, row, column, folder, storageName);
        return resp.getData();
    }

    /**
     * Copy cell into cell
     * 
     * @param name Workbook name. (required)
     * @param destCellName Destination cell name (required)
     * @param sheetName Destination worksheet name. (required)
     * @param worksheet Source worksheet name. (required)
     * @param cellname Source cell name (optional)
     * @param row Source row (optional)
     * @param column Source column (optional)
     * @param folder Folder name (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostCopyCellIntoCellWithHttpInfo(String name, String destCellName, String sheetName, String worksheet, String cellname, Integer row, Integer column, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostCopyCellIntoCellValidateBeforeCall(name, destCellName, sheetName, worksheet, cellname, row, column, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Copy cell into cell (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param destCellName Destination cell name (required)
     * @param sheetName Destination worksheet name. (required)
     * @param worksheet Source worksheet name. (required)
     * @param cellname Source cell name (optional)
     * @param row Source row (optional)
     * @param column Source column (optional)
     * @param folder Folder name (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostCopyCellIntoCellAsync(String name, String destCellName, String sheetName, String worksheet, String cellname, Integer row, Integer column, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostCopyCellIntoCellValidateBeforeCall(name, destCellName, sheetName, worksheet, cellname, row, column, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostCopyWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceColumnIndex Source column index (required)
     * @param destinationColumnIndex Destination column index (required)
     * @param columnNumber The copied column number (required)
     * @param worksheet The Worksheet (optional, default to )
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostCopyWorksheetColumnsCall(String name, String sheetName, Integer sourceColumnIndex, Integer destinationColumnIndex, Integer columnNumber, String worksheet, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/copy"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (sourceColumnIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceColumnIndex", sourceColumnIndex));
        if (destinationColumnIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destinationColumnIndex", destinationColumnIndex));
        if (columnNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "columnNumber", columnNumber));
        if (worksheet != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "worksheet", worksheet));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostCopyWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer sourceColumnIndex, Integer destinationColumnIndex, Integer columnNumber, String worksheet, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostCopyWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostCopyWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sourceColumnIndex' is set
        if (sourceColumnIndex == null) {
            throw new ApiException("Missing the required parameter 'sourceColumnIndex' when calling cellsPostCopyWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'destinationColumnIndex' is set
        if (destinationColumnIndex == null) {
            throw new ApiException("Missing the required parameter 'destinationColumnIndex' when calling cellsPostCopyWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'columnNumber' is set
        if (columnNumber == null) {
            throw new ApiException("Missing the required parameter 'columnNumber' when calling cellsPostCopyWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostCopyWorksheetColumnsCall(name, sheetName, sourceColumnIndex, destinationColumnIndex, columnNumber, worksheet, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Copy worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceColumnIndex Source column index (required)
     * @param destinationColumnIndex Destination column index (required)
     * @param columnNumber The copied column number (required)
     * @param worksheet The Worksheet (optional, default to )
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostCopyWorksheetColumns(String name, String sheetName, Integer sourceColumnIndex, Integer destinationColumnIndex, Integer columnNumber, String worksheet, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostCopyWorksheetColumnsWithHttpInfo(name, sheetName, sourceColumnIndex, destinationColumnIndex, columnNumber, worksheet, folder, storageName);
        return resp.getData();
    }

    /**
     * Copy worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceColumnIndex Source column index (required)
     * @param destinationColumnIndex Destination column index (required)
     * @param columnNumber The copied column number (required)
     * @param worksheet The Worksheet (optional, default to )
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostCopyWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer sourceColumnIndex, Integer destinationColumnIndex, Integer columnNumber, String worksheet, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostCopyWorksheetColumnsValidateBeforeCall(name, sheetName, sourceColumnIndex, destinationColumnIndex, columnNumber, worksheet, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Copy worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceColumnIndex Source column index (required)
     * @param destinationColumnIndex Destination column index (required)
     * @param columnNumber The copied column number (required)
     * @param worksheet The Worksheet (optional, default to )
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostCopyWorksheetColumnsAsync(String name, String sheetName, Integer sourceColumnIndex, Integer destinationColumnIndex, Integer columnNumber, String worksheet, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostCopyWorksheetColumnsValidateBeforeCall(name, sheetName, sourceColumnIndex, destinationColumnIndex, columnNumber, worksheet, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostCopyWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceRowIndex Source row index (required)
     * @param destinationRowIndex Destination row index (required)
     * @param rowNumber The copied row number (required)
     * @param worksheet worksheet (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostCopyWorksheetRowsCall(String name, String sheetName, Integer sourceRowIndex, Integer destinationRowIndex, Integer rowNumber, String worksheet, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/copy"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (sourceRowIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceRowIndex", sourceRowIndex));
        if (destinationRowIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destinationRowIndex", destinationRowIndex));
        if (rowNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "rowNumber", rowNumber));
        if (worksheet != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "worksheet", worksheet));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostCopyWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer sourceRowIndex, Integer destinationRowIndex, Integer rowNumber, String worksheet, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostCopyWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostCopyWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sourceRowIndex' is set
        if (sourceRowIndex == null) {
            throw new ApiException("Missing the required parameter 'sourceRowIndex' when calling cellsPostCopyWorksheetRows(Async)");
        }
        
        // verify the required parameter 'destinationRowIndex' is set
        if (destinationRowIndex == null) {
            throw new ApiException("Missing the required parameter 'destinationRowIndex' when calling cellsPostCopyWorksheetRows(Async)");
        }
        
        // verify the required parameter 'rowNumber' is set
        if (rowNumber == null) {
            throw new ApiException("Missing the required parameter 'rowNumber' when calling cellsPostCopyWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostCopyWorksheetRowsCall(name, sheetName, sourceRowIndex, destinationRowIndex, rowNumber, worksheet, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Copy worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceRowIndex Source row index (required)
     * @param destinationRowIndex Destination row index (required)
     * @param rowNumber The copied row number (required)
     * @param worksheet worksheet (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostCopyWorksheetRows(String name, String sheetName, Integer sourceRowIndex, Integer destinationRowIndex, Integer rowNumber, String worksheet, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostCopyWorksheetRowsWithHttpInfo(name, sheetName, sourceRowIndex, destinationRowIndex, rowNumber, worksheet, folder, storageName);
        return resp.getData();
    }

    /**
     * Copy worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceRowIndex Source row index (required)
     * @param destinationRowIndex Destination row index (required)
     * @param rowNumber The copied row number (required)
     * @param worksheet worksheet (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostCopyWorksheetRowsWithHttpInfo(String name, String sheetName, Integer sourceRowIndex, Integer destinationRowIndex, Integer rowNumber, String worksheet, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostCopyWorksheetRowsValidateBeforeCall(name, sheetName, sourceRowIndex, destinationRowIndex, rowNumber, worksheet, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Copy worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param sourceRowIndex Source row index (required)
     * @param destinationRowIndex Destination row index (required)
     * @param rowNumber The copied row number (required)
     * @param worksheet worksheet (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostCopyWorksheetRowsAsync(String name, String sheetName, Integer sourceRowIndex, Integer destinationRowIndex, Integer rowNumber, String worksheet, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostCopyWorksheetRowsValidateBeforeCall(name, sheetName, sourceRowIndex, destinationRowIndex, rowNumber, worksheet, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostGroupWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param hide columns visible state (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostGroupWorksheetColumnsCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/group"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstIndex", firstIndex));
        if (lastIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastIndex", lastIndex));
        if (hide != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hide", hide));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostGroupWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostGroupWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostGroupWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'firstIndex' is set
        if (firstIndex == null) {
            throw new ApiException("Missing the required parameter 'firstIndex' when calling cellsPostGroupWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'lastIndex' is set
        if (lastIndex == null) {
            throw new ApiException("Missing the required parameter 'lastIndex' when calling cellsPostGroupWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostGroupWorksheetColumnsCall(name, sheetName, firstIndex, lastIndex, hide, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Group worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param hide columns visible state (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostGroupWorksheetColumns(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostGroupWorksheetColumnsWithHttpInfo(name, sheetName, firstIndex, lastIndex, hide, folder, storageName);
        return resp.getData();
    }

    /**
     * Group worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param hide columns visible state (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostGroupWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostGroupWorksheetColumnsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, hide, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Group worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param hide columns visible state (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostGroupWorksheetColumnsAsync(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostGroupWorksheetColumnsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, hide, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostGroupWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param hide rows visible state (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostGroupWorksheetRowsCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/group"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstIndex", firstIndex));
        if (lastIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastIndex", lastIndex));
        if (hide != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hide", hide));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostGroupWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostGroupWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostGroupWorksheetRows(Async)");
        }
        
        // verify the required parameter 'firstIndex' is set
        if (firstIndex == null) {
            throw new ApiException("Missing the required parameter 'firstIndex' when calling cellsPostGroupWorksheetRows(Async)");
        }
        
        // verify the required parameter 'lastIndex' is set
        if (lastIndex == null) {
            throw new ApiException("Missing the required parameter 'lastIndex' when calling cellsPostGroupWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostGroupWorksheetRowsCall(name, sheetName, firstIndex, lastIndex, hide, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Group worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param hide rows visible state (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostGroupWorksheetRows(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostGroupWorksheetRowsWithHttpInfo(name, sheetName, firstIndex, lastIndex, hide, folder, storageName);
        return resp.getData();
    }

    /**
     * Group worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param hide rows visible state (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostGroupWorksheetRowsWithHttpInfo(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostGroupWorksheetRowsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, hide, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Group worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param hide rows visible state (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostGroupWorksheetRowsAsync(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean hide, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostGroupWorksheetRowsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, hide, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostHideWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startColumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostHideWorksheetColumnsCall(String name, String sheetName, Integer startColumn, Integer totalColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/hide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (totalColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalColumns", totalColumns));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostHideWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer startColumn, Integer totalColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostHideWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostHideWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'startColumn' is set
        if (startColumn == null) {
            throw new ApiException("Missing the required parameter 'startColumn' when calling cellsPostHideWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'totalColumns' is set
        if (totalColumns == null) {
            throw new ApiException("Missing the required parameter 'totalColumns' when calling cellsPostHideWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostHideWorksheetColumnsCall(name, sheetName, startColumn, totalColumns, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Hide worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startColumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostHideWorksheetColumns(String name, String sheetName, Integer startColumn, Integer totalColumns, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostHideWorksheetColumnsWithHttpInfo(name, sheetName, startColumn, totalColumns, folder, storageName);
        return resp.getData();
    }

    /**
     * Hide worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startColumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostHideWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer startColumn, Integer totalColumns, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostHideWorksheetColumnsValidateBeforeCall(name, sheetName, startColumn, totalColumns, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Hide worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startColumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostHideWorksheetColumnsAsync(String name, String sheetName, Integer startColumn, Integer totalColumns, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostHideWorksheetColumnsValidateBeforeCall(name, sheetName, startColumn, totalColumns, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostHideWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostHideWorksheetRowsCall(String name, String sheetName, Integer startrow, Integer totalRows, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/hide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startrow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startrow", startrow));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostHideWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer startrow, Integer totalRows, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostHideWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostHideWorksheetRows(Async)");
        }
        
        // verify the required parameter 'startrow' is set
        if (startrow == null) {
            throw new ApiException("Missing the required parameter 'startrow' when calling cellsPostHideWorksheetRows(Async)");
        }
        
        // verify the required parameter 'totalRows' is set
        if (totalRows == null) {
            throw new ApiException("Missing the required parameter 'totalRows' when calling cellsPostHideWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostHideWorksheetRowsCall(name, sheetName, startrow, totalRows, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Hide worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostHideWorksheetRows(String name, String sheetName, Integer startrow, Integer totalRows, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostHideWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, folder, storageName);
        return resp.getData();
    }

    /**
     * Hide worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostHideWorksheetRowsWithHttpInfo(String name, String sheetName, Integer startrow, Integer totalRows, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostHideWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Hide worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostHideWorksheetRowsAsync(String name, String sheetName, Integer startrow, Integer totalRows, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostHideWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostRowStyle
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param style Style dto (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostRowStyleCall(String name, String sheetName, Integer rowIndex, Style style, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = style;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}/style"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "rowIndex" + "\\}", apiClient.escapeString(rowIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostRowStyleValidateBeforeCall(String name, String sheetName, Integer rowIndex, Style style, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostRowStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostRowStyle(Async)");
        }
        
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling cellsPostRowStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostRowStyleCall(name, sheetName, rowIndex, style, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set row style.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param style Style dto (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostRowStyle(String name, String sheetName, Integer rowIndex, Style style, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostRowStyleWithHttpInfo(name, sheetName, rowIndex, style, folder, storageName);
        return resp.getData();
    }

    /**
     * Set row style.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param style Style dto (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostRowStyleWithHttpInfo(String name, String sheetName, Integer rowIndex, Style style, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostRowStyleValidateBeforeCall(name, sheetName, rowIndex, style, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set row style. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param style Style dto (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostRowStyleAsync(String name, String sheetName, Integer rowIndex, Style style, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostRowStyleValidateBeforeCall(name, sheetName, rowIndex, style, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostSetCellHtmlString
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param htmlString  (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostSetCellHtmlStringCall(String name, String sheetName, String cellName, byte[] htmlString, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = htmlString;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostSetCellHtmlStringValidateBeforeCall(String name, String sheetName, String cellName, byte[] htmlString, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostSetCellHtmlString(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostSetCellHtmlString(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsPostSetCellHtmlString(Async)");
        }
        
        // verify the required parameter 'htmlString' is set
        if (htmlString == null) {
            throw new ApiException("Missing the required parameter 'htmlString' when calling cellsPostSetCellHtmlString(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostSetCellHtmlStringCall(name, sheetName, cellName, htmlString, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set htmlstring value into cell
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param htmlString  (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellResponse cellsPostSetCellHtmlString(String name, String sheetName, String cellName, byte[] htmlString, String folder, String storageName) throws ApiException {
        ApiResponse<CellResponse> resp = cellsPostSetCellHtmlStringWithHttpInfo(name, sheetName, cellName, htmlString, folder, storageName);
        return resp.getData();
    }

    /**
     * Set htmlstring value into cell
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param htmlString  (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellResponse> cellsPostSetCellHtmlStringWithHttpInfo(String name, String sheetName, String cellName, byte[] htmlString, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostSetCellHtmlStringValidateBeforeCall(name, sheetName, cellName, htmlString, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set htmlstring value into cell (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param htmlString  (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostSetCellHtmlStringAsync(String name, String sheetName, String cellName, byte[] htmlString, String folder, String storageName, final ApiCallback<CellResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostSetCellHtmlStringValidateBeforeCall(name, sheetName, cellName, htmlString, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostSetCellRangeValue
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param value Range value (required)
     * @param type Value data type (like \&quot;int\&quot;) (required)
     * @param folder Folder name (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostSetCellRangeValueCall(String name, String sheetName, String cellarea, String value, String type, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellarea != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellarea", cellarea));
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "value", value));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostSetCellRangeValueValidateBeforeCall(String name, String sheetName, String cellarea, String value, String type, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostSetCellRangeValue(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostSetCellRangeValue(Async)");
        }
        
        // verify the required parameter 'cellarea' is set
        if (cellarea == null) {
            throw new ApiException("Missing the required parameter 'cellarea' when calling cellsPostSetCellRangeValue(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cellsPostSetCellRangeValue(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling cellsPostSetCellRangeValue(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostSetCellRangeValueCall(name, sheetName, cellarea, value, type, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set cell range value 
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param value Range value (required)
     * @param type Value data type (like \&quot;int\&quot;) (required)
     * @param folder Folder name (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostSetCellRangeValue(String name, String sheetName, String cellarea, String value, String type, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostSetCellRangeValueWithHttpInfo(name, sheetName, cellarea, value, type, folder, storageName);
        return resp.getData();
    }

    /**
     * Set cell range value 
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param value Range value (required)
     * @param type Value data type (like \&quot;int\&quot;) (required)
     * @param folder Folder name (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostSetCellRangeValueWithHttpInfo(String name, String sheetName, String cellarea, String value, String type, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostSetCellRangeValueValidateBeforeCall(name, sheetName, cellarea, value, type, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set cell range value  (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellarea Cell area (like \&quot;A1:C2\&quot;) (required)
     * @param value Range value (required)
     * @param type Value data type (like \&quot;int\&quot;) (required)
     * @param folder Folder name (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostSetCellRangeValueAsync(String name, String sheetName, String cellarea, String value, String type, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostSetCellRangeValueValidateBeforeCall(name, sheetName, cellarea, value, type, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostSetWorksheetColumnWidth
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param width The width. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostSetWorksheetColumnWidthCall(String name, String sheetName, Integer columnIndex, Double width, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "columnIndex" + "\\}", apiClient.escapeString(columnIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostSetWorksheetColumnWidthValidateBeforeCall(String name, String sheetName, Integer columnIndex, Double width, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostSetWorksheetColumnWidth(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostSetWorksheetColumnWidth(Async)");
        }
        
        // verify the required parameter 'columnIndex' is set
        if (columnIndex == null) {
            throw new ApiException("Missing the required parameter 'columnIndex' when calling cellsPostSetWorksheetColumnWidth(Async)");
        }
        
        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling cellsPostSetWorksheetColumnWidth(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostSetWorksheetColumnWidthCall(name, sheetName, columnIndex, width, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set worksheet column width.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param width The width. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ColumnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ColumnResponse cellsPostSetWorksheetColumnWidth(String name, String sheetName, Integer columnIndex, Double width, String folder, String storageName) throws ApiException {
        ApiResponse<ColumnResponse> resp = cellsPostSetWorksheetColumnWidthWithHttpInfo(name, sheetName, columnIndex, width, folder, storageName);
        return resp.getData();
    }

    /**
     * Set worksheet column width.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param width The width. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ColumnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ColumnResponse> cellsPostSetWorksheetColumnWidthWithHttpInfo(String name, String sheetName, Integer columnIndex, Double width, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostSetWorksheetColumnWidthValidateBeforeCall(name, sheetName, columnIndex, width, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ColumnResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set worksheet column width. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param width The width. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostSetWorksheetColumnWidthAsync(String name, String sheetName, Integer columnIndex, Double width, String folder, String storageName, final ApiCallback<ColumnResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostSetWorksheetColumnWidthValidateBeforeCall(name, sheetName, columnIndex, width, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ColumnResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUngroupWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUngroupWorksheetColumnsCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/ungroup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstIndex", firstIndex));
        if (lastIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastIndex", lastIndex));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUngroupWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUngroupWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUngroupWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'firstIndex' is set
        if (firstIndex == null) {
            throw new ApiException("Missing the required parameter 'firstIndex' when calling cellsPostUngroupWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'lastIndex' is set
        if (lastIndex == null) {
            throw new ApiException("Missing the required parameter 'lastIndex' when calling cellsPostUngroupWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUngroupWorksheetColumnsCall(name, sheetName, firstIndex, lastIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Ungroup worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostUngroupWorksheetColumns(String name, String sheetName, Integer firstIndex, Integer lastIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostUngroupWorksheetColumnsWithHttpInfo(name, sheetName, firstIndex, lastIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Ungroup worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostUngroupWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer firstIndex, Integer lastIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUngroupWorksheetColumnsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Ungroup worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first column index to be operated. (required)
     * @param lastIndex The last column index to be operated. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUngroupWorksheetColumnsAsync(String name, String sheetName, Integer firstIndex, Integer lastIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUngroupWorksheetColumnsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUngroupWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param isAll Is all row to be operated (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUngroupWorksheetRowsCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean isAll, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/ungroup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstIndex", firstIndex));
        if (lastIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastIndex", lastIndex));
        if (isAll != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isAll", isAll));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUngroupWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean isAll, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUngroupWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUngroupWorksheetRows(Async)");
        }
        
        // verify the required parameter 'firstIndex' is set
        if (firstIndex == null) {
            throw new ApiException("Missing the required parameter 'firstIndex' when calling cellsPostUngroupWorksheetRows(Async)");
        }
        
        // verify the required parameter 'lastIndex' is set
        if (lastIndex == null) {
            throw new ApiException("Missing the required parameter 'lastIndex' when calling cellsPostUngroupWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUngroupWorksheetRowsCall(name, sheetName, firstIndex, lastIndex, isAll, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Ungroup worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param isAll Is all row to be operated (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostUngroupWorksheetRows(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean isAll, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostUngroupWorksheetRowsWithHttpInfo(name, sheetName, firstIndex, lastIndex, isAll, folder, storageName);
        return resp.getData();
    }

    /**
     * Ungroup worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param isAll Is all row to be operated (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostUngroupWorksheetRowsWithHttpInfo(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean isAll, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUngroupWorksheetRowsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, isAll, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Ungroup worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param firstIndex The first row index to be operated. (required)
     * @param lastIndex The last row index to be operated. (required)
     * @param isAll Is all row to be operated (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUngroupWorksheetRowsAsync(String name, String sheetName, Integer firstIndex, Integer lastIndex, Boolean isAll, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUngroupWorksheetRowsValidateBeforeCall(name, sheetName, firstIndex, lastIndex, isAll, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUnhideWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startcolumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param width The new column width. (optional, default to 50.0)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUnhideWorksheetColumnsCall(String name, String sheetName, Integer startcolumn, Integer totalColumns, Double width, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/unhide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startcolumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startcolumn", startcolumn));
        if (totalColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalColumns", totalColumns));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUnhideWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer startcolumn, Integer totalColumns, Double width, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUnhideWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUnhideWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'startcolumn' is set
        if (startcolumn == null) {
            throw new ApiException("Missing the required parameter 'startcolumn' when calling cellsPostUnhideWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'totalColumns' is set
        if (totalColumns == null) {
            throw new ApiException("Missing the required parameter 'totalColumns' when calling cellsPostUnhideWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUnhideWorksheetColumnsCall(name, sheetName, startcolumn, totalColumns, width, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unhide worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startcolumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param width The new column width. (optional, default to 50.0)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostUnhideWorksheetColumns(String name, String sheetName, Integer startcolumn, Integer totalColumns, Double width, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostUnhideWorksheetColumnsWithHttpInfo(name, sheetName, startcolumn, totalColumns, width, folder, storageName);
        return resp.getData();
    }

    /**
     * Unhide worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startcolumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param width The new column width. (optional, default to 50.0)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostUnhideWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer startcolumn, Integer totalColumns, Double width, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUnhideWorksheetColumnsValidateBeforeCall(name, sheetName, startcolumn, totalColumns, width, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unhide worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startcolumn The begin column index to be operated. (required)
     * @param totalColumns Number of columns to be operated. (required)
     * @param width The new column width. (optional, default to 50.0)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUnhideWorksheetColumnsAsync(String name, String sheetName, Integer startcolumn, Integer totalColumns, Double width, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUnhideWorksheetColumnsValidateBeforeCall(name, sheetName, startcolumn, totalColumns, width, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUnhideWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param height The new row height. (optional, default to 15.0)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUnhideWorksheetRowsCall(String name, String sheetName, Integer startrow, Integer totalRows, Double height, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/unhide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startrow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startrow", startrow));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUnhideWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer startrow, Integer totalRows, Double height, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUnhideWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUnhideWorksheetRows(Async)");
        }
        
        // verify the required parameter 'startrow' is set
        if (startrow == null) {
            throw new ApiException("Missing the required parameter 'startrow' when calling cellsPostUnhideWorksheetRows(Async)");
        }
        
        // verify the required parameter 'totalRows' is set
        if (totalRows == null) {
            throw new ApiException("Missing the required parameter 'totalRows' when calling cellsPostUnhideWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUnhideWorksheetRowsCall(name, sheetName, startrow, totalRows, height, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unhide worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param height The new row height. (optional, default to 15.0)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostUnhideWorksheetRows(String name, String sheetName, Integer startrow, Integer totalRows, Double height, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostUnhideWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, height, folder, storageName);
        return resp.getData();
    }

    /**
     * Unhide worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param height The new row height. (optional, default to 15.0)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostUnhideWorksheetRowsWithHttpInfo(String name, String sheetName, Integer startrow, Integer totalRows, Double height, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUnhideWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, height, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unhide worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (required)
     * @param height The new row height. (optional, default to 15.0)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUnhideWorksheetRowsAsync(String name, String sheetName, Integer startrow, Integer totalRows, Double height, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUnhideWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, height, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUpdateWorksheetCellStyle
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUpdateWorksheetCellStyleCall(String name, String sheetName, String cellName, Style style, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = style;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUpdateWorksheetCellStyleValidateBeforeCall(String name, String sheetName, String cellName, Style style, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUpdateWorksheetCellStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUpdateWorksheetCellStyle(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsPostUpdateWorksheetCellStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetCellStyleCall(name, sheetName, cellName, style, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update cell&#39;s style.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return StyleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StyleResponse cellsPostUpdateWorksheetCellStyle(String name, String sheetName, String cellName, Style style, String folder, String storageName) throws ApiException {
        ApiResponse<StyleResponse> resp = cellsPostUpdateWorksheetCellStyleWithHttpInfo(name, sheetName, cellName, style, folder, storageName);
        return resp.getData();
    }

    /**
     * Update cell&#39;s style.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;StyleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StyleResponse> cellsPostUpdateWorksheetCellStyleWithHttpInfo(String name, String sheetName, String cellName, Style style, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetCellStyleValidateBeforeCall(name, sheetName, cellName, style, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<StyleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update cell&#39;s style. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUpdateWorksheetCellStyleAsync(String name, String sheetName, String cellName, Style style, String folder, String storageName, final ApiCallback<StyleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetCellStyleValidateBeforeCall(name, sheetName, cellName, style, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StyleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUpdateWorksheetRangeStyle
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUpdateWorksheetRangeStyleCall(String name, String sheetName, String range, Style style, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = style;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/style"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUpdateWorksheetRangeStyleValidateBeforeCall(String name, String sheetName, String range, Style style, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUpdateWorksheetRangeStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUpdateWorksheetRangeStyle(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsPostUpdateWorksheetRangeStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetRangeStyleCall(name, sheetName, range, style, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update cell&#39;s range style.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostUpdateWorksheetRangeStyle(String name, String sheetName, String range, Style style, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostUpdateWorksheetRangeStyleWithHttpInfo(name, sheetName, range, style, folder, storageName);
        return resp.getData();
    }

    /**
     * Update cell&#39;s range style.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostUpdateWorksheetRangeStyleWithHttpInfo(String name, String sheetName, String range, Style style, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetRangeStyleValidateBeforeCall(name, sheetName, range, style, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update cell&#39;s range style. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range The range. (required)
     * @param style with update style settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUpdateWorksheetRangeStyleAsync(String name, String sheetName, String range, Style style, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetRangeStyleValidateBeforeCall(name, sheetName, range, style, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostUpdateWorksheetRow
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param height The new row height. (optional, default to 0.0)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostUpdateWorksheetRowCall(String name, String sheetName, Integer rowIndex, Double height, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "rowIndex" + "\\}", apiClient.escapeString(rowIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostUpdateWorksheetRowValidateBeforeCall(String name, String sheetName, Integer rowIndex, Double height, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostUpdateWorksheetRow(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostUpdateWorksheetRow(Async)");
        }
        
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling cellsPostUpdateWorksheetRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetRowCall(name, sheetName, rowIndex, height, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update worksheet row.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param height The new row height. (optional, default to 0.0)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return RowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RowResponse cellsPostUpdateWorksheetRow(String name, String sheetName, Integer rowIndex, Double height, String folder, String storageName) throws ApiException {
        ApiResponse<RowResponse> resp = cellsPostUpdateWorksheetRowWithHttpInfo(name, sheetName, rowIndex, height, folder, storageName);
        return resp.getData();
    }

    /**
     * Update worksheet row.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param height The new row height. (optional, default to 0.0)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;RowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RowResponse> cellsPostUpdateWorksheetRowWithHttpInfo(String name, String sheetName, Integer rowIndex, Double height, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, height, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<RowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update worksheet row. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The row index. (required)
     * @param height The new row height. (optional, default to 0.0)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostUpdateWorksheetRowAsync(String name, String sheetName, Integer rowIndex, Double height, String folder, String storageName, final ApiCallback<RowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostUpdateWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, height, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostWorksheetCellSetValue
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param value The cell value. (optional)
     * @param type The value type. (optional)
     * @param formula Formula for cell (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostWorksheetCellSetValueCall(String name, String sheetName, String cellName, String value, String type, String formula, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "value", value));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (formula != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "formula", formula));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostWorksheetCellSetValueValidateBeforeCall(String name, String sheetName, String cellName, String value, String type, String formula, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostWorksheetCellSetValue(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostWorksheetCellSetValue(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsPostWorksheetCellSetValue(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostWorksheetCellSetValueCall(name, sheetName, cellName, value, type, formula, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set cell value.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param value The cell value. (optional)
     * @param type The value type. (optional)
     * @param formula Formula for cell (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellResponse cellsPostWorksheetCellSetValue(String name, String sheetName, String cellName, String value, String type, String formula, String folder, String storageName) throws ApiException {
        ApiResponse<CellResponse> resp = cellsPostWorksheetCellSetValueWithHttpInfo(name, sheetName, cellName, value, type, formula, folder, storageName);
        return resp.getData();
    }

    /**
     * Set cell value.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param value The cell value. (optional)
     * @param type The value type. (optional)
     * @param formula Formula for cell (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellResponse> cellsPostWorksheetCellSetValueWithHttpInfo(String name, String sheetName, String cellName, String value, String type, String formula, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostWorksheetCellSetValueValidateBeforeCall(name, sheetName, cellName, value, type, formula, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set cell value. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name. (required)
     * @param value The cell value. (optional)
     * @param type The value type. (optional)
     * @param formula Formula for cell (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostWorksheetCellSetValueAsync(String name, String sheetName, String cellName, String value, String type, String formula, String folder, String storageName, final ApiCallback<CellResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostWorksheetCellSetValueValidateBeforeCall(name, sheetName, cellName, value, type, formula, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostWorksheetMerge
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostWorksheetMergeCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/merge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (totalColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalColumns", totalColumns));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostWorksheetMergeValidateBeforeCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostWorksheetMerge(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostWorksheetMerge(Async)");
        }
        
        // verify the required parameter 'startRow' is set
        if (startRow == null) {
            throw new ApiException("Missing the required parameter 'startRow' when calling cellsPostWorksheetMerge(Async)");
        }
        
        // verify the required parameter 'startColumn' is set
        if (startColumn == null) {
            throw new ApiException("Missing the required parameter 'startColumn' when calling cellsPostWorksheetMerge(Async)");
        }
        
        // verify the required parameter 'totalRows' is set
        if (totalRows == null) {
            throw new ApiException("Missing the required parameter 'totalRows' when calling cellsPostWorksheetMerge(Async)");
        }
        
        // verify the required parameter 'totalColumns' is set
        if (totalColumns == null) {
            throw new ApiException("Missing the required parameter 'totalColumns' when calling cellsPostWorksheetMerge(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostWorksheetMergeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Merge cells.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostWorksheetMerge(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostWorksheetMergeWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName);
        return resp.getData();
    }

    /**
     * Merge cells.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostWorksheetMergeWithHttpInfo(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostWorksheetMergeValidateBeforeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merge cells. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostWorksheetMergeAsync(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostWorksheetMergeValidateBeforeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPostWorksheetUnmerge
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPostWorksheetUnmergeCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/unmerge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (totalColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalColumns", totalColumns));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPostWorksheetUnmergeValidateBeforeCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPostWorksheetUnmerge(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPostWorksheetUnmerge(Async)");
        }
        
        // verify the required parameter 'startRow' is set
        if (startRow == null) {
            throw new ApiException("Missing the required parameter 'startRow' when calling cellsPostWorksheetUnmerge(Async)");
        }
        
        // verify the required parameter 'startColumn' is set
        if (startColumn == null) {
            throw new ApiException("Missing the required parameter 'startColumn' when calling cellsPostWorksheetUnmerge(Async)");
        }
        
        // verify the required parameter 'totalRows' is set
        if (totalRows == null) {
            throw new ApiException("Missing the required parameter 'totalRows' when calling cellsPostWorksheetUnmerge(Async)");
        }
        
        // verify the required parameter 'totalColumns' is set
        if (totalColumns == null) {
            throw new ApiException("Missing the required parameter 'totalColumns' when calling cellsPostWorksheetUnmerge(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPostWorksheetUnmergeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unmerge cells.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPostWorksheetUnmerge(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPostWorksheetUnmergeWithHttpInfo(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName);
        return resp.getData();
    }

    /**
     * Unmerge cells.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPostWorksheetUnmergeWithHttpInfo(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPostWorksheetUnmergeValidateBeforeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unmerge cells. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row. (required)
     * @param startColumn The start column. (required)
     * @param totalRows The total rows (required)
     * @param totalColumns The total columns. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPostWorksheetUnmergeAsync(String name, String sheetName, Integer startRow, Integer startColumn, Integer totalRows, Integer totalColumns, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPostWorksheetUnmergeValidateBeforeCall(name, sheetName, startRow, startColumn, totalRows, totalColumns, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPropertiesDeleteDocumentProperties
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPropertiesDeleteDocumentPropertiesCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/documentproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPropertiesDeleteDocumentPropertiesValidateBeforeCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPropertiesDeleteDocumentProperties(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPropertiesDeleteDocumentPropertiesCall(name, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete all custom document properties and clean built-in ones.
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsDocumentPropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsDocumentPropertiesResponse cellsPropertiesDeleteDocumentProperties(String name, String folder, String storageName) throws ApiException {
        ApiResponse<CellsDocumentPropertiesResponse> resp = cellsPropertiesDeleteDocumentPropertiesWithHttpInfo(name, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete all custom document properties and clean built-in ones.
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsDocumentPropertiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsDocumentPropertiesResponse> cellsPropertiesDeleteDocumentPropertiesWithHttpInfo(String name, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPropertiesDeleteDocumentPropertiesValidateBeforeCall(name, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsDocumentPropertiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all custom document properties and clean built-in ones. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPropertiesDeleteDocumentPropertiesAsync(String name, String folder, String storageName, final ApiCallback<CellsDocumentPropertiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPropertiesDeleteDocumentPropertiesValidateBeforeCall(name, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsDocumentPropertiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPropertiesDeleteDocumentProperty
     * @param name The document name. (required)
     * @param propertyName The property name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPropertiesDeleteDocumentPropertyCall(String name, String propertyName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "propertyName" + "\\}", apiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPropertiesDeleteDocumentPropertyValidateBeforeCall(String name, String propertyName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPropertiesDeleteDocumentProperty(Async)");
        }
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling cellsPropertiesDeleteDocumentProperty(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPropertiesDeleteDocumentPropertyCall(name, propertyName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete document property.
     * 
     * @param name The document name. (required)
     * @param propertyName The property name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsDocumentPropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsDocumentPropertiesResponse cellsPropertiesDeleteDocumentProperty(String name, String propertyName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsDocumentPropertiesResponse> resp = cellsPropertiesDeleteDocumentPropertyWithHttpInfo(name, propertyName, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete document property.
     * 
     * @param name The document name. (required)
     * @param propertyName The property name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsDocumentPropertiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsDocumentPropertiesResponse> cellsPropertiesDeleteDocumentPropertyWithHttpInfo(String name, String propertyName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPropertiesDeleteDocumentPropertyValidateBeforeCall(name, propertyName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsDocumentPropertiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document property. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param propertyName The property name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPropertiesDeleteDocumentPropertyAsync(String name, String propertyName, String folder, String storageName, final ApiCallback<CellsDocumentPropertiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPropertiesDeleteDocumentPropertyValidateBeforeCall(name, propertyName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsDocumentPropertiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPropertiesGetDocumentProperties
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPropertiesGetDocumentPropertiesCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/documentproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPropertiesGetDocumentPropertiesValidateBeforeCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPropertiesGetDocumentProperties(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPropertiesGetDocumentPropertiesCall(name, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read document properties.
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsDocumentPropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsDocumentPropertiesResponse cellsPropertiesGetDocumentProperties(String name, String folder, String storageName) throws ApiException {
        ApiResponse<CellsDocumentPropertiesResponse> resp = cellsPropertiesGetDocumentPropertiesWithHttpInfo(name, folder, storageName);
        return resp.getData();
    }

    /**
     * Read document properties.
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsDocumentPropertiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsDocumentPropertiesResponse> cellsPropertiesGetDocumentPropertiesWithHttpInfo(String name, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPropertiesGetDocumentPropertiesValidateBeforeCall(name, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsDocumentPropertiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document properties. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPropertiesGetDocumentPropertiesAsync(String name, String folder, String storageName, final ApiCallback<CellsDocumentPropertiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPropertiesGetDocumentPropertiesValidateBeforeCall(name, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsDocumentPropertiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPropertiesGetDocumentProperty
     * @param name The document name. (required)
     * @param propertyName The property name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPropertiesGetDocumentPropertyCall(String name, String propertyName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "propertyName" + "\\}", apiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPropertiesGetDocumentPropertyValidateBeforeCall(String name, String propertyName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPropertiesGetDocumentProperty(Async)");
        }
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling cellsPropertiesGetDocumentProperty(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPropertiesGetDocumentPropertyCall(name, propertyName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read document property by name.
     * 
     * @param name The document name. (required)
     * @param propertyName The property name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsDocumentPropertyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsDocumentPropertyResponse cellsPropertiesGetDocumentProperty(String name, String propertyName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsDocumentPropertyResponse> resp = cellsPropertiesGetDocumentPropertyWithHttpInfo(name, propertyName, folder, storageName);
        return resp.getData();
    }

    /**
     * Read document property by name.
     * 
     * @param name The document name. (required)
     * @param propertyName The property name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsDocumentPropertyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsDocumentPropertyResponse> cellsPropertiesGetDocumentPropertyWithHttpInfo(String name, String propertyName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPropertiesGetDocumentPropertyValidateBeforeCall(name, propertyName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsDocumentPropertyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document property by name. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param propertyName The property name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPropertiesGetDocumentPropertyAsync(String name, String propertyName, String folder, String storageName, final ApiCallback<CellsDocumentPropertyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPropertiesGetDocumentPropertyValidateBeforeCall(name, propertyName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsDocumentPropertyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPropertiesPutDocumentProperty
     * @param name The document name. (required)
     * @param propertyName The property name. (required)
     * @param property with new property value. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPropertiesPutDocumentPropertyCall(String name, String propertyName, CellsDocumentProperty property, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = property;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "propertyName" + "\\}", apiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPropertiesPutDocumentPropertyValidateBeforeCall(String name, String propertyName, CellsDocumentProperty property, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPropertiesPutDocumentProperty(Async)");
        }
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling cellsPropertiesPutDocumentProperty(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPropertiesPutDocumentPropertyCall(name, propertyName, property, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set/create document property.
     * 
     * @param name The document name. (required)
     * @param propertyName The property name. (required)
     * @param property with new property value. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsDocumentPropertyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsDocumentPropertyResponse cellsPropertiesPutDocumentProperty(String name, String propertyName, CellsDocumentProperty property, String folder, String storageName) throws ApiException {
        ApiResponse<CellsDocumentPropertyResponse> resp = cellsPropertiesPutDocumentPropertyWithHttpInfo(name, propertyName, property, folder, storageName);
        return resp.getData();
    }

    /**
     * Set/create document property.
     * 
     * @param name The document name. (required)
     * @param propertyName The property name. (required)
     * @param property with new property value. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsDocumentPropertyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsDocumentPropertyResponse> cellsPropertiesPutDocumentPropertyWithHttpInfo(String name, String propertyName, CellsDocumentProperty property, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPropertiesPutDocumentPropertyValidateBeforeCall(name, propertyName, property, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsDocumentPropertyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set/create document property. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param propertyName The property name. (required)
     * @param property with new property value. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPropertiesPutDocumentPropertyAsync(String name, String propertyName, CellsDocumentProperty property, String folder, String storageName, final ApiCallback<CellsDocumentPropertyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPropertiesPutDocumentPropertyValidateBeforeCall(name, propertyName, property, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsDocumentPropertyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPutInsertWorksheetColumns
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (optional, default to true)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPutInsertWorksheetColumnsCall(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "columnIndex" + "\\}", apiClient.escapeString(columnIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (columns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "columns", columns));
        if (updateReference != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "updateReference", updateReference));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPutInsertWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPutInsertWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPutInsertWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'columnIndex' is set
        if (columnIndex == null) {
            throw new ApiException("Missing the required parameter 'columnIndex' when calling cellsPutInsertWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'columns' is set
        if (columns == null) {
            throw new ApiException("Missing the required parameter 'columns' when calling cellsPutInsertWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPutInsertWorksheetColumnsCall(name, sheetName, columnIndex, columns, updateReference, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (optional, default to true)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ColumnsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ColumnsResponse cellsPutInsertWorksheetColumns(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storageName) throws ApiException {
        ApiResponse<ColumnsResponse> resp = cellsPutInsertWorksheetColumnsWithHttpInfo(name, sheetName, columnIndex, columns, updateReference, folder, storageName);
        return resp.getData();
    }

    /**
     * Insert worksheet columns.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (optional, default to true)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ColumnsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ColumnsResponse> cellsPutInsertWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPutInsertWorksheetColumnsValidateBeforeCall(name, sheetName, columnIndex, columns, updateReference, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ColumnsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert worksheet columns. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param columnIndex The column index. (required)
     * @param columns The columns. (required)
     * @param updateReference The update reference. (optional, default to true)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPutInsertWorksheetColumnsAsync(String name, String sheetName, Integer columnIndex, Integer columns, Boolean updateReference, String folder, String storageName, final ApiCallback<ColumnsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPutInsertWorksheetColumnsValidateBeforeCall(name, sheetName, columnIndex, columns, updateReference, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ColumnsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPutInsertWorksheetRow
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The new row index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPutInsertWorksheetRowCall(String name, String sheetName, Integer rowIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "rowIndex" + "\\}", apiClient.escapeString(rowIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPutInsertWorksheetRowValidateBeforeCall(String name, String sheetName, Integer rowIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPutInsertWorksheetRow(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPutInsertWorksheetRow(Async)");
        }
        
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling cellsPutInsertWorksheetRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPutInsertWorksheetRowCall(name, sheetName, rowIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert new worksheet row.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The new row index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return RowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RowResponse cellsPutInsertWorksheetRow(String name, String sheetName, Integer rowIndex, String folder, String storageName) throws ApiException {
        ApiResponse<RowResponse> resp = cellsPutInsertWorksheetRowWithHttpInfo(name, sheetName, rowIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Insert new worksheet row.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The new row index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;RowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RowResponse> cellsPutInsertWorksheetRowWithHttpInfo(String name, String sheetName, Integer rowIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPutInsertWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<RowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert new worksheet row. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param rowIndex The new row index. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPutInsertWorksheetRowAsync(String name, String sheetName, Integer rowIndex, String folder, String storageName, final ApiCallback<RowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPutInsertWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPutInsertWorksheetRows
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPutInsertWorksheetRowsCall(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/cells/rows"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startrow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startrow", startrow));
        if (totalRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "totalRows", totalRows));
        if (updateReference != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "updateReference", updateReference));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPutInsertWorksheetRowsValidateBeforeCall(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPutInsertWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPutInsertWorksheetRows(Async)");
        }
        
        // verify the required parameter 'startrow' is set
        if (startrow == null) {
            throw new ApiException("Missing the required parameter 'startrow' when calling cellsPutInsertWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPutInsertWorksheetRowsCall(name, sheetName, startrow, totalRows, updateReference, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert several new worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsPutInsertWorksheetRows(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsPutInsertWorksheetRowsWithHttpInfo(name, sheetName, startrow, totalRows, updateReference, folder, storageName);
        return resp.getData();
    }

    /**
     * Insert several new worksheet rows.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsPutInsertWorksheetRowsWithHttpInfo(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsPutInsertWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, updateReference, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert several new worksheet rows. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startrow The begin row index to be operated. (required)
     * @param totalRows Number of rows to be operated. (optional, default to 1)
     * @param updateReference Indicates if update references in other worksheets. (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPutInsertWorksheetRowsAsync(String name, String sheetName, Integer startrow, Integer totalRows, Boolean updateReference, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPutInsertWorksheetRowsValidateBeforeCall(name, sheetName, startrow, totalRows, updateReference, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesGetWorksheetCellsRangeValue
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param firstRow the first row of the range (optional)
     * @param firstColumn the first column of the range (optional)
     * @param rowCount the count of rows in the range (optional)
     * @param columnCount the count of columns in the range (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesGetWorksheetCellsRangeValueCall(String name, String sheetName, String namerange, Integer firstRow, Integer firstColumn, Integer rowCount, Integer columnCount, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/value"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (namerange != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "namerange", namerange));
        if (firstRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstRow", firstRow));
        if (firstColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstColumn", firstColumn));
        if (rowCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "rowCount", rowCount));
        if (columnCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "columnCount", columnCount));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesGetWorksheetCellsRangeValueValidateBeforeCall(String name, String sheetName, String namerange, Integer firstRow, Integer firstColumn, Integer rowCount, Integer columnCount, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesGetWorksheetCellsRangeValue(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesGetWorksheetCellsRangeValue(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesGetWorksheetCellsRangeValueCall(name, sheetName, namerange, firstRow, firstColumn, rowCount, columnCount, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cells list in a range by range name or row column indexes  
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param firstRow the first row of the range (optional)
     * @param firstColumn the first column of the range (optional)
     * @param rowCount the count of rows in the range (optional)
     * @param columnCount the count of columns in the range (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return RangeValueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RangeValueResponse cellsRangesGetWorksheetCellsRangeValue(String name, String sheetName, String namerange, Integer firstRow, Integer firstColumn, Integer rowCount, Integer columnCount, String folder, String storageName) throws ApiException {
        ApiResponse<RangeValueResponse> resp = cellsRangesGetWorksheetCellsRangeValueWithHttpInfo(name, sheetName, namerange, firstRow, firstColumn, rowCount, columnCount, folder, storageName);
        return resp.getData();
    }

    /**
     * Get cells list in a range by range name or row column indexes  
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param firstRow the first row of the range (optional)
     * @param firstColumn the first column of the range (optional)
     * @param rowCount the count of rows in the range (optional)
     * @param columnCount the count of columns in the range (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;RangeValueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RangeValueResponse> cellsRangesGetWorksheetCellsRangeValueWithHttpInfo(String name, String sheetName, String namerange, Integer firstRow, Integer firstColumn, Integer rowCount, Integer columnCount, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesGetWorksheetCellsRangeValueValidateBeforeCall(name, sheetName, namerange, firstRow, firstColumn, rowCount, columnCount, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<RangeValueResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cells list in a range by range name or row column indexes   (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param firstRow the first row of the range (optional)
     * @param firstColumn the first column of the range (optional)
     * @param rowCount the count of rows in the range (optional)
     * @param columnCount the count of columns in the range (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesGetWorksheetCellsRangeValueAsync(String name, String sheetName, String namerange, Integer firstRow, Integer firstColumn, Integer rowCount, Integer columnCount, String folder, String storageName, final ApiCallback<RangeValueResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesGetWorksheetCellsRangeValueValidateBeforeCall(name, sheetName, namerange, firstRow, firstColumn, rowCount, columnCount, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RangeValueResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeColumnWidth
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeColumnWidthCall(String name, String sheetName, Double value, Range range, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = range;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/columnWidth"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "value", value));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeColumnWidthValidateBeforeCall(String name, String sheetName, Double value, Range range, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeColumnWidth(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeColumnWidth(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cellsRangesPostWorksheetCellsRangeColumnWidth(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeColumnWidthCall(name, sheetName, value, range, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set column width of range
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsRangesPostWorksheetCellsRangeColumnWidth(String name, String sheetName, Double value, Range range, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo(name, sheetName, value, range, folder, storageName);
        return resp.getData();
    }

    /**
     * Set column width of range
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo(String name, String sheetName, Double value, Range range, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeColumnWidthValidateBeforeCall(name, sheetName, value, range, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set column width of range (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeColumnWidthAsync(String name, String sheetName, Double value, Range range, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeColumnWidthValidateBeforeCall(name, sheetName, value, range, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeMerge
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeMergeCall(String name, String sheetName, Range range, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = range;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/merge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeMergeValidateBeforeCall(String name, String sheetName, Range range, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeMerge(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeMerge(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeMergeCall(name, sheetName, range, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Combines a range of cells into a single cell.              
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsRangesPostWorksheetCellsRangeMerge(String name, String sheetName, Range range, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsRangesPostWorksheetCellsRangeMergeWithHttpInfo(name, sheetName, range, folder, storageName);
        return resp.getData();
    }

    /**
     * Combines a range of cells into a single cell.              
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsRangesPostWorksheetCellsRangeMergeWithHttpInfo(String name, String sheetName, Range range, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeMergeValidateBeforeCall(name, sheetName, range, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Combines a range of cells into a single cell.               (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeMergeAsync(String name, String sheetName, Range range, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeMergeValidateBeforeCall(name, sheetName, range, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeMoveTo
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param destRow The start row of the dest range. (required)
     * @param destColumn The start column of the dest range. (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeMoveToCall(String name, String sheetName, Integer destRow, Integer destColumn, Range range, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = range;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/moveto"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (destRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destRow", destRow));
        if (destColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destColumn", destColumn));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeMoveToValidateBeforeCall(String name, String sheetName, Integer destRow, Integer destColumn, Range range, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeMoveTo(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeMoveTo(Async)");
        }
        
        // verify the required parameter 'destRow' is set
        if (destRow == null) {
            throw new ApiException("Missing the required parameter 'destRow' when calling cellsRangesPostWorksheetCellsRangeMoveTo(Async)");
        }
        
        // verify the required parameter 'destColumn' is set
        if (destColumn == null) {
            throw new ApiException("Missing the required parameter 'destColumn' when calling cellsRangesPostWorksheetCellsRangeMoveTo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeMoveToCall(name, sheetName, destRow, destColumn, range, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move the current range to the dest range.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param destRow The start row of the dest range. (required)
     * @param destColumn The start column of the dest range. (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsRangesPostWorksheetCellsRangeMoveTo(String name, String sheetName, Integer destRow, Integer destColumn, Range range, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo(name, sheetName, destRow, destColumn, range, folder, storageName);
        return resp.getData();
    }

    /**
     * Move the current range to the dest range.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param destRow The start row of the dest range. (required)
     * @param destColumn The start column of the dest range. (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo(String name, String sheetName, Integer destRow, Integer destColumn, Range range, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeMoveToValidateBeforeCall(name, sheetName, destRow, destColumn, range, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move the current range to the dest range.              (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param destRow The start row of the dest range. (required)
     * @param destColumn The start column of the dest range. (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeMoveToAsync(String name, String sheetName, Integer destRow, Integer destColumn, Range range, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeMoveToValidateBeforeCall(name, sheetName, destRow, destColumn, range, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeOutlineBorder
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set OutlineBorder Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeOutlineBorderCall(String name, String sheetName, RangeSetOutlineBorderRequest rangeOperate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = rangeOperate;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/outlineBorder"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeOutlineBorderValidateBeforeCall(String name, String sheetName, RangeSetOutlineBorderRequest rangeOperate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeOutlineBorder(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeOutlineBorder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeOutlineBorderCall(name, sheetName, rangeOperate, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sets outline border around a range of cells.
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set OutlineBorder Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsRangesPostWorksheetCellsRangeOutlineBorder(String name, String sheetName, RangeSetOutlineBorderRequest rangeOperate, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo(name, sheetName, rangeOperate, folder, storageName);
        return resp.getData();
    }

    /**
     * Sets outline border around a range of cells.
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set OutlineBorder Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo(String name, String sheetName, RangeSetOutlineBorderRequest rangeOperate, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeOutlineBorderValidateBeforeCall(name, sheetName, rangeOperate, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets outline border around a range of cells. (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set OutlineBorder Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeOutlineBorderAsync(String name, String sheetName, RangeSetOutlineBorderRequest rangeOperate, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeOutlineBorderValidateBeforeCall(name, sheetName, rangeOperate, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeRowHeight
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeRowHeightCall(String name, String sheetName, Double value, Range range, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = range;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/rowHeight"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "value", value));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeRowHeightValidateBeforeCall(String name, String sheetName, Double value, Range range, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeRowHeight(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeRowHeight(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cellsRangesPostWorksheetCellsRangeRowHeight(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeRowHeightCall(name, sheetName, value, range, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * set row height of range
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsRangesPostWorksheetCellsRangeRowHeight(String name, String sheetName, Double value, Range range, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo(name, sheetName, value, range, folder, storageName);
        return resp.getData();
    }

    /**
     * set row height of range
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo(String name, String sheetName, Double value, Range range, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeRowHeightValidateBeforeCall(name, sheetName, value, range, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * set row height of range (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeRowHeightAsync(String name, String sheetName, Double value, Range range, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeRowHeightValidateBeforeCall(name, sheetName, value, range, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeStyle
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set Style Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeStyleCall(String name, String sheetName, RangeSetStyleRequest rangeOperate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = rangeOperate;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/style"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeStyleValidateBeforeCall(String name, String sheetName, RangeSetStyleRequest rangeOperate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeStyleCall(name, sheetName, rangeOperate, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sets the style of the range.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set Style Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsRangesPostWorksheetCellsRangeStyle(String name, String sheetName, RangeSetStyleRequest rangeOperate, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsRangesPostWorksheetCellsRangeStyleWithHttpInfo(name, sheetName, rangeOperate, folder, storageName);
        return resp.getData();
    }

    /**
     * Sets the style of the range.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set Style Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsRangesPostWorksheetCellsRangeStyleWithHttpInfo(String name, String sheetName, RangeSetStyleRequest rangeOperate, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeStyleValidateBeforeCall(name, sheetName, rangeOperate, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets the style of the range.              (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set Style Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeStyleAsync(String name, String sheetName, RangeSetStyleRequest rangeOperate, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeStyleValidateBeforeCall(name, sheetName, rangeOperate, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeUnmerge
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeUnmergeCall(String name, String sheetName, Range range, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = range;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/unmerge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeUnmergeValidateBeforeCall(String name, String sheetName, Range range, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeUnmerge(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeUnmerge(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeUnmergeCall(name, sheetName, range, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unmerges merged cells of this range.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsRangesPostWorksheetCellsRangeUnmerge(String name, String sheetName, Range range, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo(name, sheetName, range, folder, storageName);
        return resp.getData();
    }

    /**
     * Unmerges merged cells of this range.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo(String name, String sheetName, Range range, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeUnmergeValidateBeforeCall(name, sheetName, range, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unmerges merged cells of this range.              (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeUnmergeAsync(String name, String sheetName, Range range, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeUnmergeValidateBeforeCall(name, sheetName, range, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeValue
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param value Input value (required)
     * @param range range in worksheet  (optional)
     * @param isConverted True: converted to other data type if appropriate. (optional, default to false)
     * @param setStyle True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeValueCall(String name, String sheetName, String value, Range range, Boolean isConverted, Boolean setStyle, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = range;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/value"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "Value", value));
        if (isConverted != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isConverted", isConverted));
        if (setStyle != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "setStyle", setStyle));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeValueValidateBeforeCall(String name, String sheetName, String value, Range range, Boolean isConverted, Boolean setStyle, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeValue(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeValue(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cellsRangesPostWorksheetCellsRangeValue(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeValueCall(name, sheetName, value, range, isConverted, setStyle, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param value Input value (required)
     * @param range range in worksheet  (optional)
     * @param isConverted True: converted to other data type if appropriate. (optional, default to false)
     * @param setStyle True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsRangesPostWorksheetCellsRangeValue(String name, String sheetName, String value, Range range, Boolean isConverted, Boolean setStyle, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsRangesPostWorksheetCellsRangeValueWithHttpInfo(name, sheetName, value, range, isConverted, setStyle, folder, storageName);
        return resp.getData();
    }

    /**
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param value Input value (required)
     * @param range range in worksheet  (optional)
     * @param isConverted True: converted to other data type if appropriate. (optional, default to false)
     * @param setStyle True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsRangesPostWorksheetCellsRangeValueWithHttpInfo(String name, String sheetName, String value, Range range, Boolean isConverted, Boolean setStyle, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeValueValidateBeforeCall(name, sheetName, value, range, isConverted, setStyle, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.              (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param value Input value (required)
     * @param range range in worksheet  (optional)
     * @param isConverted True: converted to other data type if appropriate. (optional, default to false)
     * @param setStyle True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeValueAsync(String name, String sheetName, String value, Range range, Boolean isConverted, Boolean setStyle, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeValueValidateBeforeCall(name, sheetName, value, range, isConverted, setStyle, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRanges
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate copydata,copystyle,copyto,copyvalue (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangesCall(String name, String sheetName, RangeCopyRequest rangeOperate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = rangeOperate;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangesValidateBeforeCall(String name, String sheetName, RangeCopyRequest rangeOperate, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRanges(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRanges(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangesCall(name, sheetName, rangeOperate, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * copy range in the worksheet
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate copydata,copystyle,copyto,copyvalue (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsRangesPostWorksheetCellsRanges(String name, String sheetName, RangeCopyRequest rangeOperate, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsRangesPostWorksheetCellsRangesWithHttpInfo(name, sheetName, rangeOperate, folder, storageName);
        return resp.getData();
    }

    /**
     * copy range in the worksheet
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate copydata,copystyle,copyto,copyvalue (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsRangesPostWorksheetCellsRangesWithHttpInfo(String name, String sheetName, RangeCopyRequest rangeOperate, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangesValidateBeforeCall(name, sheetName, rangeOperate, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * copy range in the worksheet (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate copydata,copystyle,copyto,copyvalue (optional)
     * @param folder Workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangesAsync(String name, String sheetName, RangeCopyRequest rangeOperate, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangesValidateBeforeCall(name, sheetName, rangeOperate, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsSaveAsPostDocumentSaveAs
     * @param name The document name. (required)
     * @param saveOptions Save options. (optional)
     * @param newfilename The new file name. (optional)
     * @param isAutoFitRows Autofit rows. (optional, default to false)
     * @param isAutoFitColumns Autofit columns. (optional, default to false)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsSaveAsPostDocumentSaveAsCall(String name, SaveOptions saveOptions, String newfilename, Boolean isAutoFitRows, Boolean isAutoFitColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = saveOptions;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/SaveAs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (newfilename != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "newfilename", newfilename));
        if (isAutoFitRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isAutoFitRows", isAutoFitRows));
        if (isAutoFitColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isAutoFitColumns", isAutoFitColumns));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsSaveAsPostDocumentSaveAsValidateBeforeCall(String name, SaveOptions saveOptions, String newfilename, Boolean isAutoFitRows, Boolean isAutoFitColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsSaveAsPostDocumentSaveAs(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsSaveAsPostDocumentSaveAsCall(name, saveOptions, newfilename, isAutoFitRows, isAutoFitColumns, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Convert document and save result to storage.
     * 
     * @param name The document name. (required)
     * @param saveOptions Save options. (optional)
     * @param newfilename The new file name. (optional)
     * @param isAutoFitRows Autofit rows. (optional, default to false)
     * @param isAutoFitColumns Autofit columns. (optional, default to false)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return SaveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaveResponse cellsSaveAsPostDocumentSaveAs(String name, SaveOptions saveOptions, String newfilename, Boolean isAutoFitRows, Boolean isAutoFitColumns, String folder, String storageName) throws ApiException {
        ApiResponse<SaveResponse> resp = cellsSaveAsPostDocumentSaveAsWithHttpInfo(name, saveOptions, newfilename, isAutoFitRows, isAutoFitColumns, folder, storageName);
        return resp.getData();
    }

    /**
     * Convert document and save result to storage.
     * 
     * @param name The document name. (required)
     * @param saveOptions Save options. (optional)
     * @param newfilename The new file name. (optional)
     * @param isAutoFitRows Autofit rows. (optional, default to false)
     * @param isAutoFitColumns Autofit columns. (optional, default to false)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;SaveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaveResponse> cellsSaveAsPostDocumentSaveAsWithHttpInfo(String name, SaveOptions saveOptions, String newfilename, Boolean isAutoFitRows, Boolean isAutoFitColumns, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsSaveAsPostDocumentSaveAsValidateBeforeCall(name, saveOptions, newfilename, isAutoFitRows, isAutoFitColumns, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<SaveResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document and save result to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param saveOptions Save options. (optional)
     * @param newfilename The new file name. (optional)
     * @param isAutoFitRows Autofit rows. (optional, default to false)
     * @param isAutoFitColumns Autofit columns. (optional, default to false)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsSaveAsPostDocumentSaveAsAsync(String name, SaveOptions saveOptions, String newfilename, Boolean isAutoFitRows, Boolean isAutoFitColumns, String folder, String storageName, final ApiCallback<SaveResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsSaveAsPostDocumentSaveAsValidateBeforeCall(name, saveOptions, newfilename, isAutoFitRows, isAutoFitColumns, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaveResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsShapesDeleteWorksheetShape
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeindex shape index in worksheet shapes. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsShapesDeleteWorksheetShapeCall(String name, String sheetName, Integer shapeindex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "shapeindex" + "\\}", apiClient.escapeString(shapeindex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsShapesDeleteWorksheetShapeValidateBeforeCall(String name, String sheetName, Integer shapeindex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsShapesDeleteWorksheetShape(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsShapesDeleteWorksheetShape(Async)");
        }
        
        // verify the required parameter 'shapeindex' is set
        if (shapeindex == null) {
            throw new ApiException("Missing the required parameter 'shapeindex' when calling cellsShapesDeleteWorksheetShape(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsShapesDeleteWorksheetShapeCall(name, sheetName, shapeindex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a shape in worksheet
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeindex shape index in worksheet shapes. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsShapesDeleteWorksheetShape(String name, String sheetName, Integer shapeindex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsShapesDeleteWorksheetShapeWithHttpInfo(name, sheetName, shapeindex, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete a shape in worksheet
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeindex shape index in worksheet shapes. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsShapesDeleteWorksheetShapeWithHttpInfo(String name, String sheetName, Integer shapeindex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsShapesDeleteWorksheetShapeValidateBeforeCall(name, sheetName, shapeindex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a shape in worksheet (asynchronously)
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeindex shape index in worksheet shapes. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsShapesDeleteWorksheetShapeAsync(String name, String sheetName, Integer shapeindex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsShapesDeleteWorksheetShapeValidateBeforeCall(name, sheetName, shapeindex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsShapesDeleteWorksheetShapes
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsShapesDeleteWorksheetShapesCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsShapesDeleteWorksheetShapesValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsShapesDeleteWorksheetShapes(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsShapesDeleteWorksheetShapes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsShapesDeleteWorksheetShapesCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * delete all shapes in worksheet
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsShapesDeleteWorksheetShapes(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsShapesDeleteWorksheetShapesWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * delete all shapes in worksheet
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsShapesDeleteWorksheetShapesWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsShapesDeleteWorksheetShapesValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * delete all shapes in worksheet (asynchronously)
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsShapesDeleteWorksheetShapesAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsShapesDeleteWorksheetShapesValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsShapesGetWorksheetShape
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeindex shape index in worksheet shapes. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsShapesGetWorksheetShapeCall(String name, String sheetName, Integer shapeindex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "shapeindex" + "\\}", apiClient.escapeString(shapeindex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsShapesGetWorksheetShapeValidateBeforeCall(String name, String sheetName, Integer shapeindex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsShapesGetWorksheetShape(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsShapesGetWorksheetShape(Async)");
        }
        
        // verify the required parameter 'shapeindex' is set
        if (shapeindex == null) {
            throw new ApiException("Missing the required parameter 'shapeindex' when calling cellsShapesGetWorksheetShape(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsShapesGetWorksheetShapeCall(name, sheetName, shapeindex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet shape
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeindex shape index in worksheet shapes. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ShapeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeResponse cellsShapesGetWorksheetShape(String name, String sheetName, Integer shapeindex, String folder, String storageName) throws ApiException {
        ApiResponse<ShapeResponse> resp = cellsShapesGetWorksheetShapeWithHttpInfo(name, sheetName, shapeindex, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet shape
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeindex shape index in worksheet shapes. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ShapeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeResponse> cellsShapesGetWorksheetShapeWithHttpInfo(String name, String sheetName, Integer shapeindex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsShapesGetWorksheetShapeValidateBeforeCall(name, sheetName, shapeindex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ShapeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet shape (asynchronously)
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeindex shape index in worksheet shapes. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsShapesGetWorksheetShapeAsync(String name, String sheetName, Integer shapeindex, String folder, String storageName, final ApiCallback<ShapeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsShapesGetWorksheetShapeValidateBeforeCall(name, sheetName, shapeindex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShapeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsShapesGetWorksheetShapes
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsShapesGetWorksheetShapesCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsShapesGetWorksheetShapesValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsShapesGetWorksheetShapes(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsShapesGetWorksheetShapes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsShapesGetWorksheetShapesCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet shapes 
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ShapesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapesResponse cellsShapesGetWorksheetShapes(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<ShapesResponse> resp = cellsShapesGetWorksheetShapesWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet shapes 
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ShapesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapesResponse> cellsShapesGetWorksheetShapesWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsShapesGetWorksheetShapesValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ShapesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet shapes  (asynchronously)
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsShapesGetWorksheetShapesAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<ShapesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsShapesGetWorksheetShapesValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShapesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsShapesPostWorksheetShape
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeindex shape index in worksheet shapes. (required)
     * @param dto  (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsShapesPostWorksheetShapeCall(String name, String sheetName, Integer shapeindex, Shape dto, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dto;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "shapeindex" + "\\}", apiClient.escapeString(shapeindex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsShapesPostWorksheetShapeValidateBeforeCall(String name, String sheetName, Integer shapeindex, Shape dto, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsShapesPostWorksheetShape(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsShapesPostWorksheetShape(Async)");
        }
        
        // verify the required parameter 'shapeindex' is set
        if (shapeindex == null) {
            throw new ApiException("Missing the required parameter 'shapeindex' when calling cellsShapesPostWorksheetShape(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsShapesPostWorksheetShapeCall(name, sheetName, shapeindex, dto, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a shape in worksheet
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeindex shape index in worksheet shapes. (required)
     * @param dto  (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsShapesPostWorksheetShape(String name, String sheetName, Integer shapeindex, Shape dto, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsShapesPostWorksheetShapeWithHttpInfo(name, sheetName, shapeindex, dto, folder, storageName);
        return resp.getData();
    }

    /**
     * Update a shape in worksheet
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeindex shape index in worksheet shapes. (required)
     * @param dto  (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsShapesPostWorksheetShapeWithHttpInfo(String name, String sheetName, Integer shapeindex, Shape dto, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsShapesPostWorksheetShapeValidateBeforeCall(name, sheetName, shapeindex, dto, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a shape in worksheet (asynchronously)
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeindex shape index in worksheet shapes. (required)
     * @param dto  (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsShapesPostWorksheetShapeAsync(String name, String sheetName, Integer shapeindex, Shape dto, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsShapesPostWorksheetShapeValidateBeforeCall(name, sheetName, shapeindex, dto, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsShapesPutWorksheetShape
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeDTO  (optional)
     * @param drawingType shape object type (optional)
     * @param upperLeftRow Upper left row index. (optional)
     * @param upperLeftColumn Upper left column index. (optional)
     * @param top Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)
     * @param left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)
     * @param width Represents the height of Spinner, in unit of pixel. (optional)
     * @param height Represents the width of Spinner, in unit of pixel. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsShapesPutWorksheetShapeCall(String name, String sheetName, Shape shapeDTO, String drawingType, Integer upperLeftRow, Integer upperLeftColumn, Integer top, Integer left, Integer width, Integer height, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = shapeDTO;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (drawingType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "DrawingType", drawingType));
        if (upperLeftRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftRow", upperLeftRow));
        if (upperLeftColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftColumn", upperLeftColumn));
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "top", top));
        if (left != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "left", left));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsShapesPutWorksheetShapeValidateBeforeCall(String name, String sheetName, Shape shapeDTO, String drawingType, Integer upperLeftRow, Integer upperLeftColumn, Integer top, Integer left, Integer width, Integer height, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsShapesPutWorksheetShape(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsShapesPutWorksheetShape(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsShapesPutWorksheetShapeCall(name, sheetName, shapeDTO, drawingType, upperLeftRow, upperLeftColumn, top, left, width, height, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add shape in worksheet
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeDTO  (optional)
     * @param drawingType shape object type (optional)
     * @param upperLeftRow Upper left row index. (optional)
     * @param upperLeftColumn Upper left column index. (optional)
     * @param top Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)
     * @param left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)
     * @param width Represents the height of Spinner, in unit of pixel. (optional)
     * @param height Represents the width of Spinner, in unit of pixel. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ShapeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeResponse cellsShapesPutWorksheetShape(String name, String sheetName, Shape shapeDTO, String drawingType, Integer upperLeftRow, Integer upperLeftColumn, Integer top, Integer left, Integer width, Integer height, String folder, String storageName) throws ApiException {
        ApiResponse<ShapeResponse> resp = cellsShapesPutWorksheetShapeWithHttpInfo(name, sheetName, shapeDTO, drawingType, upperLeftRow, upperLeftColumn, top, left, width, height, folder, storageName);
        return resp.getData();
    }

    /**
     * Add shape in worksheet
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeDTO  (optional)
     * @param drawingType shape object type (optional)
     * @param upperLeftRow Upper left row index. (optional)
     * @param upperLeftColumn Upper left column index. (optional)
     * @param top Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)
     * @param left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)
     * @param width Represents the height of Spinner, in unit of pixel. (optional)
     * @param height Represents the width of Spinner, in unit of pixel. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ShapeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeResponse> cellsShapesPutWorksheetShapeWithHttpInfo(String name, String sheetName, Shape shapeDTO, String drawingType, Integer upperLeftRow, Integer upperLeftColumn, Integer top, Integer left, Integer width, Integer height, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsShapesPutWorksheetShapeValidateBeforeCall(name, sheetName, shapeDTO, drawingType, upperLeftRow, upperLeftColumn, top, left, width, height, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ShapeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add shape in worksheet (asynchronously)
     * 
     * @param name document name. (required)
     * @param sheetName worksheet name. (required)
     * @param shapeDTO  (optional)
     * @param drawingType shape object type (optional)
     * @param upperLeftRow Upper left row index. (optional)
     * @param upperLeftColumn Upper left column index. (optional)
     * @param top Represents the vertical offset of Spinner from its left row, in unit of pixel. (optional)
     * @param left Represents the horizontal offset of Spinner from its left column, in unit of pixel. (optional)
     * @param width Represents the height of Spinner, in unit of pixel. (optional)
     * @param height Represents the width of Spinner, in unit of pixel. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsShapesPutWorksheetShapeAsync(String name, String sheetName, Shape shapeDTO, String drawingType, Integer upperLeftRow, Integer upperLeftColumn, Integer top, Integer left, Integer width, Integer height, String folder, String storageName, final ApiCallback<ShapeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsShapesPutWorksheetShapeValidateBeforeCall(name, sheetName, shapeDTO, drawingType, upperLeftRow, upperLeftColumn, top, left, width, height, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShapeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsSparklineGroupsDeleteWorksheetSparklineGroup
     * @param name  (required)
     * @param sheetName  (required)
     * @param sparklineGroupIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsSparklineGroupsDeleteWorksheetSparklineGroupCall(String name, String sheetName, Integer sparklineGroupIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups/{sparklineGroupIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "sparklineGroupIndex" + "\\}", apiClient.escapeString(sparklineGroupIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsSparklineGroupsDeleteWorksheetSparklineGroupValidateBeforeCall(String name, String sheetName, Integer sparklineGroupIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsSparklineGroupsDeleteWorksheetSparklineGroup(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsSparklineGroupsDeleteWorksheetSparklineGroup(Async)");
        }
        
        // verify the required parameter 'sparklineGroupIndex' is set
        if (sparklineGroupIndex == null) {
            throw new ApiException("Missing the required parameter 'sparklineGroupIndex' when calling cellsSparklineGroupsDeleteWorksheetSparklineGroup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsSparklineGroupsDeleteWorksheetSparklineGroupCall(name, sheetName, sparklineGroupIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sparklineGroupIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsSparklineGroupsDeleteWorksheetSparklineGroup(String name, String sheetName, Integer sparklineGroupIndex, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsSparklineGroupsDeleteWorksheetSparklineGroupWithHttpInfo(name, sheetName, sparklineGroupIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sparklineGroupIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsSparklineGroupsDeleteWorksheetSparklineGroupWithHttpInfo(String name, String sheetName, Integer sparklineGroupIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsSparklineGroupsDeleteWorksheetSparklineGroupValidateBeforeCall(name, sheetName, sparklineGroupIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sparklineGroupIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsSparklineGroupsDeleteWorksheetSparklineGroupAsync(String name, String sheetName, Integer sparklineGroupIndex, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsSparklineGroupsDeleteWorksheetSparklineGroupValidateBeforeCall(name, sheetName, sparklineGroupIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsSparklineGroupsDeleteWorksheetSparklineGroups
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsSparklineGroupsDeleteWorksheetSparklineGroupsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsSparklineGroupsDeleteWorksheetSparklineGroupsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsSparklineGroupsDeleteWorksheetSparklineGroups(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsSparklineGroupsDeleteWorksheetSparklineGroups(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsSparklineGroupsDeleteWorksheetSparklineGroupsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsSparklineGroupsDeleteWorksheetSparklineGroups(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsSparklineGroupsDeleteWorksheetSparklineGroupsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsSparklineGroupsDeleteWorksheetSparklineGroupsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsSparklineGroupsDeleteWorksheetSparklineGroupsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsSparklineGroupsDeleteWorksheetSparklineGroupsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsSparklineGroupsDeleteWorksheetSparklineGroupsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsSparklineGroupsGetWorksheetSparklineGroup
     * @param name  (required)
     * @param sheetName  (required)
     * @param sparklineGroupIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsSparklineGroupsGetWorksheetSparklineGroupCall(String name, String sheetName, Integer sparklineGroupIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups/{sparklineGroupIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "sparklineGroupIndex" + "\\}", apiClient.escapeString(sparklineGroupIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsSparklineGroupsGetWorksheetSparklineGroupValidateBeforeCall(String name, String sheetName, Integer sparklineGroupIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsSparklineGroupsGetWorksheetSparklineGroup(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsSparklineGroupsGetWorksheetSparklineGroup(Async)");
        }
        
        // verify the required parameter 'sparklineGroupIndex' is set
        if (sparklineGroupIndex == null) {
            throw new ApiException("Missing the required parameter 'sparklineGroupIndex' when calling cellsSparklineGroupsGetWorksheetSparklineGroup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsSparklineGroupsGetWorksheetSparklineGroupCall(name, sheetName, sparklineGroupIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sparklineGroupIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return SparklineGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SparklineGroupResponse cellsSparklineGroupsGetWorksheetSparklineGroup(String name, String sheetName, Integer sparklineGroupIndex, String folder, String storageName) throws ApiException {
        ApiResponse<SparklineGroupResponse> resp = cellsSparklineGroupsGetWorksheetSparklineGroupWithHttpInfo(name, sheetName, sparklineGroupIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sparklineGroupIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;SparklineGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SparklineGroupResponse> cellsSparklineGroupsGetWorksheetSparklineGroupWithHttpInfo(String name, String sheetName, Integer sparklineGroupIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsSparklineGroupsGetWorksheetSparklineGroupValidateBeforeCall(name, sheetName, sparklineGroupIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<SparklineGroupResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sparklineGroupIndex  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsSparklineGroupsGetWorksheetSparklineGroupAsync(String name, String sheetName, Integer sparklineGroupIndex, String folder, String storageName, final ApiCallback<SparklineGroupResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsSparklineGroupsGetWorksheetSparklineGroupValidateBeforeCall(name, sheetName, sparklineGroupIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SparklineGroupResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsSparklineGroupsGetWorksheetSparklineGroups
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsSparklineGroupsGetWorksheetSparklineGroupsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsSparklineGroupsGetWorksheetSparklineGroupsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsSparklineGroupsGetWorksheetSparklineGroups(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsSparklineGroupsGetWorksheetSparklineGroups(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsSparklineGroupsGetWorksheetSparklineGroupsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet charts description.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return SparklineGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SparklineGroupsResponse cellsSparklineGroupsGetWorksheetSparklineGroups(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<SparklineGroupsResponse> resp = cellsSparklineGroupsGetWorksheetSparklineGroupsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet charts description.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;SparklineGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SparklineGroupsResponse> cellsSparklineGroupsGetWorksheetSparklineGroupsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsSparklineGroupsGetWorksheetSparklineGroupsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<SparklineGroupsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet charts description. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsSparklineGroupsGetWorksheetSparklineGroupsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<SparklineGroupsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsSparklineGroupsGetWorksheetSparklineGroupsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SparklineGroupsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsSparklineGroupsPostWorksheetSparklineGroup
     * @param name  (required)
     * @param sheetName  (required)
     * @param sparklineGroupIndex  (required)
     * @param sparklineGroup  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsSparklineGroupsPostWorksheetSparklineGroupCall(String name, String sheetName, Integer sparklineGroupIndex, SparklineGroup sparklineGroup, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sparklineGroup;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups/{sparklineGroupIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "sparklineGroupIndex" + "\\}", apiClient.escapeString(sparklineGroupIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsSparklineGroupsPostWorksheetSparklineGroupValidateBeforeCall(String name, String sheetName, Integer sparklineGroupIndex, SparklineGroup sparklineGroup, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsSparklineGroupsPostWorksheetSparklineGroup(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsSparklineGroupsPostWorksheetSparklineGroup(Async)");
        }
        
        // verify the required parameter 'sparklineGroupIndex' is set
        if (sparklineGroupIndex == null) {
            throw new ApiException("Missing the required parameter 'sparklineGroupIndex' when calling cellsSparklineGroupsPostWorksheetSparklineGroup(Async)");
        }
        
        // verify the required parameter 'sparklineGroup' is set
        if (sparklineGroup == null) {
            throw new ApiException("Missing the required parameter 'sparklineGroup' when calling cellsSparklineGroupsPostWorksheetSparklineGroup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsSparklineGroupsPostWorksheetSparklineGroupCall(name, sheetName, sparklineGroupIndex, sparklineGroup, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sparklineGroupIndex  (required)
     * @param sparklineGroup  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsSparklineGroupsPostWorksheetSparklineGroup(String name, String sheetName, Integer sparklineGroupIndex, SparklineGroup sparklineGroup, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsSparklineGroupsPostWorksheetSparklineGroupWithHttpInfo(name, sheetName, sparklineGroupIndex, sparklineGroup, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sparklineGroupIndex  (required)
     * @param sparklineGroup  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsSparklineGroupsPostWorksheetSparklineGroupWithHttpInfo(String name, String sheetName, Integer sparklineGroupIndex, SparklineGroup sparklineGroup, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsSparklineGroupsPostWorksheetSparklineGroupValidateBeforeCall(name, sheetName, sparklineGroupIndex, sparklineGroup, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sparklineGroupIndex  (required)
     * @param sparklineGroup  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsSparklineGroupsPostWorksheetSparklineGroupAsync(String name, String sheetName, Integer sparklineGroupIndex, SparklineGroup sparklineGroup, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsSparklineGroupsPostWorksheetSparklineGroupValidateBeforeCall(name, sheetName, sparklineGroupIndex, sparklineGroup, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsSparklineGroupsPutWorksheetSparklineGroup
     * @param name  (required)
     * @param sheetName  (required)
     * @param type  (required)
     * @param dataRange  (required)
     * @param isVertical  (required)
     * @param locationRange  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsSparklineGroupsPutWorksheetSparklineGroupCall(String name, String sheetName, String type, String dataRange, Boolean isVertical, String locationRange, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/sparklinegroups"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (dataRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataRange", dataRange));
        if (isVertical != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isVertical", isVertical));
        if (locationRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "locationRange", locationRange));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsSparklineGroupsPutWorksheetSparklineGroupValidateBeforeCall(String name, String sheetName, String type, String dataRange, Boolean isVertical, String locationRange, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsSparklineGroupsPutWorksheetSparklineGroup(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsSparklineGroupsPutWorksheetSparklineGroup(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling cellsSparklineGroupsPutWorksheetSparklineGroup(Async)");
        }
        
        // verify the required parameter 'dataRange' is set
        if (dataRange == null) {
            throw new ApiException("Missing the required parameter 'dataRange' when calling cellsSparklineGroupsPutWorksheetSparklineGroup(Async)");
        }
        
        // verify the required parameter 'isVertical' is set
        if (isVertical == null) {
            throw new ApiException("Missing the required parameter 'isVertical' when calling cellsSparklineGroupsPutWorksheetSparklineGroup(Async)");
        }
        
        // verify the required parameter 'locationRange' is set
        if (locationRange == null) {
            throw new ApiException("Missing the required parameter 'locationRange' when calling cellsSparklineGroupsPutWorksheetSparklineGroup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsSparklineGroupsPutWorksheetSparklineGroupCall(name, sheetName, type, dataRange, isVertical, locationRange, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param type  (required)
     * @param dataRange  (required)
     * @param isVertical  (required)
     * @param locationRange  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsSparklineGroupsPutWorksheetSparklineGroup(String name, String sheetName, String type, String dataRange, Boolean isVertical, String locationRange, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsSparklineGroupsPutWorksheetSparklineGroupWithHttpInfo(name, sheetName, type, dataRange, isVertical, locationRange, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param type  (required)
     * @param dataRange  (required)
     * @param isVertical  (required)
     * @param locationRange  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsSparklineGroupsPutWorksheetSparklineGroupWithHttpInfo(String name, String sheetName, String type, String dataRange, Boolean isVertical, String locationRange, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsSparklineGroupsPutWorksheetSparklineGroupValidateBeforeCall(name, sheetName, type, dataRange, isVertical, locationRange, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param type  (required)
     * @param dataRange  (required)
     * @param isVertical  (required)
     * @param locationRange  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsSparklineGroupsPutWorksheetSparklineGroupAsync(String name, String sheetName, String type, String dataRange, Boolean isVertical, String locationRange, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsSparklineGroupsPutWorksheetSparklineGroupValidateBeforeCall(name, sheetName, type, dataRange, isVertical, locationRange, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsTaskPostRunTask
     * @param taskData  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsTaskPostRunTaskCall(TaskData taskData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskData;
        
        // create path and map variables
        String localVarPath = "/cells/task/runtask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsTaskPostRunTaskValidateBeforeCall(TaskData taskData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskData' is set
        if (taskData == null) {
            throw new ApiException("Missing the required parameter 'taskData' when calling cellsTaskPostRunTask(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsTaskPostRunTaskCall(taskData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Run tasks  
     * 
     * @param taskData  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object cellsTaskPostRunTask(TaskData taskData) throws ApiException {
        ApiResponse<Object> resp = cellsTaskPostRunTaskWithHttpInfo(taskData);
        return resp.getData();
    }

    /**
     * Run tasks  
     * 
     * @param taskData  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> cellsTaskPostRunTaskWithHttpInfo(TaskData taskData) throws ApiException {
        com.squareup.okhttp.Call call = cellsTaskPostRunTaskValidateBeforeCall(taskData, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run tasks   (asynchronously)
     * 
     * @param taskData  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsTaskPostRunTaskAsync(TaskData taskData, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsTaskPostRunTaskValidateBeforeCall(taskData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookDeleteDecryptDocument
     * @param name The document name. (required)
     * @param encryption Encryption settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteDecryptDocumentCall(String name, WorkbookEncryptionRequest encryption, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = encryption;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/encryption"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookDeleteDecryptDocumentValidateBeforeCall(String name, WorkbookEncryptionRequest encryption, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookDeleteDecryptDocument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookDeleteDecryptDocumentCall(name, encryption, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Decrypt document.
     * 
     * @param name The document name. (required)
     * @param encryption Encryption settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookDeleteDecryptDocument(String name, WorkbookEncryptionRequest encryption, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookDeleteDecryptDocumentWithHttpInfo(name, encryption, folder, storageName);
        return resp.getData();
    }

    /**
     * Decrypt document.
     * 
     * @param name The document name. (required)
     * @param encryption Encryption settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookDeleteDecryptDocumentWithHttpInfo(String name, WorkbookEncryptionRequest encryption, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookDeleteDecryptDocumentValidateBeforeCall(name, encryption, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Decrypt document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param encryption Encryption settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteDecryptDocumentAsync(String name, WorkbookEncryptionRequest encryption, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookDeleteDecryptDocumentValidateBeforeCall(name, encryption, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookDeleteDocumentUnprotectFromChanges
     * @param name The document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteDocumentUnprotectFromChangesCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/writeProtection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookDeleteDocumentUnprotectFromChangesValidateBeforeCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookDeleteDocumentUnprotectFromChanges(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookDeleteDocumentUnprotectFromChangesCall(name, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unprotect document from changes.
     * 
     * @param name The document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookDeleteDocumentUnprotectFromChanges(String name, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookDeleteDocumentUnprotectFromChangesWithHttpInfo(name, folder, storageName);
        return resp.getData();
    }

    /**
     * Unprotect document from changes.
     * 
     * @param name The document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookDeleteDocumentUnprotectFromChangesWithHttpInfo(String name, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookDeleteDocumentUnprotectFromChangesValidateBeforeCall(name, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unprotect document from changes. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteDocumentUnprotectFromChangesAsync(String name, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookDeleteDocumentUnprotectFromChangesValidateBeforeCall(name, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookDeleteUnprotectDocument
     * @param name The document name. (required)
     * @param protection Protection settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteUnprotectDocumentCall(String name, WorkbookProtectionRequest protection, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = protection;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/protection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookDeleteUnprotectDocumentValidateBeforeCall(String name, WorkbookProtectionRequest protection, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookDeleteUnprotectDocument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookDeleteUnprotectDocumentCall(name, protection, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unprotect document.
     * 
     * @param name The document name. (required)
     * @param protection Protection settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookDeleteUnprotectDocument(String name, WorkbookProtectionRequest protection, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookDeleteUnprotectDocumentWithHttpInfo(name, protection, folder, storageName);
        return resp.getData();
    }

    /**
     * Unprotect document.
     * 
     * @param name The document name. (required)
     * @param protection Protection settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookDeleteUnprotectDocumentWithHttpInfo(String name, WorkbookProtectionRequest protection, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookDeleteUnprotectDocumentValidateBeforeCall(name, protection, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unprotect document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param protection Protection settings, only password can be specified. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteUnprotectDocumentAsync(String name, WorkbookProtectionRequest protection, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookDeleteUnprotectDocumentValidateBeforeCall(name, protection, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookDeleteWorkbookBackground
     * @param name  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookBackgroundCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/background"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookBackgroundValidateBeforeCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookDeleteWorkbookBackground(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookBackgroundCall(name, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set worksheet background image.
     * 
     * @param name  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookDeleteWorkbookBackground(String name, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookDeleteWorkbookBackgroundWithHttpInfo(name, folder, storageName);
        return resp.getData();
    }

    /**
     * Set worksheet background image.
     * 
     * @param name  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookDeleteWorkbookBackgroundWithHttpInfo(String name, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookBackgroundValidateBeforeCall(name, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set worksheet background image. (asynchronously)
     * 
     * @param name  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookBackgroundAsync(String name, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookBackgroundValidateBeforeCall(name, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookDeleteWorkbookName
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookNameCall(String name, String nameName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/names/{nameName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "nameName" + "\\}", apiClient.escapeString(nameName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookNameValidateBeforeCall(String name, String nameName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookDeleteWorkbookName(Async)");
        }
        
        // verify the required parameter 'nameName' is set
        if (nameName == null) {
            throw new ApiException("Missing the required parameter 'nameName' when calling cellsWorkbookDeleteWorkbookName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookNameCall(name, nameName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clean workbook&#39;s names.
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookDeleteWorkbookName(String name, String nameName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookDeleteWorkbookNameWithHttpInfo(name, nameName, folder, storageName);
        return resp.getData();
    }

    /**
     * Clean workbook&#39;s names.
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookDeleteWorkbookNameWithHttpInfo(String name, String nameName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookNameValidateBeforeCall(name, nameName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clean workbook&#39;s names. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookNameAsync(String name, String nameName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookNameValidateBeforeCall(name, nameName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookDeleteWorkbookNames
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookNamesCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/names"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookNamesValidateBeforeCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookDeleteWorkbookNames(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookNamesCall(name, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clean workbook&#39;s names.
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookDeleteWorkbookNames(String name, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookDeleteWorkbookNamesWithHttpInfo(name, folder, storageName);
        return resp.getData();
    }

    /**
     * Clean workbook&#39;s names.
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookDeleteWorkbookNamesWithHttpInfo(String name, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookNamesValidateBeforeCall(name, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clean workbook&#39;s names. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookDeleteWorkbookNamesAsync(String name, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookDeleteWorkbookNamesValidateBeforeCall(name, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbook
     * @param name The document name. (required)
     * @param password The document password. (optional)
     * @param format The exported file format. (optional)
     * @param isAutoFit Set document rows to be autofit. (optional, default to false)
     * @param onlySaveTable Only save table data. (optional, default to false)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param outPath The document output folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookCall(String name, String password, String format, Boolean isAutoFit, Boolean onlySaveTable, String folder, String storageName, String outPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "password", password));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (isAutoFit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isAutoFit", isAutoFit));
        if (onlySaveTable != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "onlySaveTable", onlySaveTable));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "outPath", outPath));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookValidateBeforeCall(String name, String password, String format, Boolean isAutoFit, Boolean onlySaveTable, String folder, String storageName, String outPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbook(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookCall(name, password, format, isAutoFit, onlySaveTable, folder, storageName, outPath, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read workbook info or export.
     * 
     * @param name The document name. (required)
     * @param password The document password. (optional)
     * @param format The exported file format. (optional)
     * @param isAutoFit Set document rows to be autofit. (optional, default to false)
     * @param onlySaveTable Only save table data. (optional, default to false)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param outPath The document output folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsWorkbookGetWorkbook(String name, String password, String format, Boolean isAutoFit, Boolean onlySaveTable, String folder, String storageName, String outPath) throws ApiException {
        ApiResponse<File> resp = cellsWorkbookGetWorkbookWithHttpInfo(name, password, format, isAutoFit, onlySaveTable, folder, storageName, outPath);
        return resp.getData();
    }

    /**
     * Read workbook info or export.
     * 
     * @param name The document name. (required)
     * @param password The document password. (optional)
     * @param format The exported file format. (optional)
     * @param isAutoFit Set document rows to be autofit. (optional, default to false)
     * @param onlySaveTable Only save table data. (optional, default to false)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param outPath The document output folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsWorkbookGetWorkbookWithHttpInfo(String name, String password, String format, Boolean isAutoFit, Boolean onlySaveTable, String folder, String storageName, String outPath) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookValidateBeforeCall(name, password, format, isAutoFit, onlySaveTable, folder, storageName, outPath, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read workbook info or export. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param password The document password. (optional)
     * @param format The exported file format. (optional)
     * @param isAutoFit Set document rows to be autofit. (optional, default to false)
     * @param onlySaveTable Only save table data. (optional, default to false)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param outPath The document output folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookAsync(String name, String password, String format, Boolean isAutoFit, Boolean onlySaveTable, String folder, String storageName, String outPath, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookValidateBeforeCall(name, password, format, isAutoFit, onlySaveTable, folder, storageName, outPath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbookDefaultStyle
     * @param name The workbook name. (required)
     * @param folder The document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookDefaultStyleCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/defaultstyle"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookDefaultStyleValidateBeforeCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbookDefaultStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookDefaultStyleCall(name, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read workbook default style info.
     * 
     * @param name The workbook name. (required)
     * @param folder The document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return StyleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StyleResponse cellsWorkbookGetWorkbookDefaultStyle(String name, String folder, String storageName) throws ApiException {
        ApiResponse<StyleResponse> resp = cellsWorkbookGetWorkbookDefaultStyleWithHttpInfo(name, folder, storageName);
        return resp.getData();
    }

    /**
     * Read workbook default style info.
     * 
     * @param name The workbook name. (required)
     * @param folder The document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;StyleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StyleResponse> cellsWorkbookGetWorkbookDefaultStyleWithHttpInfo(String name, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookDefaultStyleValidateBeforeCall(name, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<StyleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read workbook default style info. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param folder The document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookDefaultStyleAsync(String name, String folder, String storageName, final ApiCallback<StyleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookDefaultStyleValidateBeforeCall(name, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StyleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbookName
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookNameCall(String name, String nameName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/names/{nameName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "nameName" + "\\}", apiClient.escapeString(nameName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookNameValidateBeforeCall(String name, String nameName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbookName(Async)");
        }
        
        // verify the required parameter 'nameName' is set
        if (nameName == null) {
            throw new ApiException("Missing the required parameter 'nameName' when calling cellsWorkbookGetWorkbookName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNameCall(name, nameName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read workbook&#39;s name.
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return NameResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NameResponse cellsWorkbookGetWorkbookName(String name, String nameName, String folder, String storageName) throws ApiException {
        ApiResponse<NameResponse> resp = cellsWorkbookGetWorkbookNameWithHttpInfo(name, nameName, folder, storageName);
        return resp.getData();
    }

    /**
     * Read workbook&#39;s name.
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;NameResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NameResponse> cellsWorkbookGetWorkbookNameWithHttpInfo(String name, String nameName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNameValidateBeforeCall(name, nameName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<NameResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read workbook&#39;s name. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookNameAsync(String name, String nameName, String folder, String storageName, final ApiCallback<NameResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNameValidateBeforeCall(name, nameName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NameResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbookNameValue
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookNameValueCall(String name, String nameName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/names/{nameName}/value"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "nameName" + "\\}", apiClient.escapeString(nameName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookNameValueValidateBeforeCall(String name, String nameName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbookNameValue(Async)");
        }
        
        // verify the required parameter 'nameName' is set
        if (nameName == null) {
            throw new ApiException("Missing the required parameter 'nameName' when calling cellsWorkbookGetWorkbookNameValue(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNameValueCall(name, nameName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get workbook&#39;s name value.
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return RangeValueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RangeValueResponse cellsWorkbookGetWorkbookNameValue(String name, String nameName, String folder, String storageName) throws ApiException {
        ApiResponse<RangeValueResponse> resp = cellsWorkbookGetWorkbookNameValueWithHttpInfo(name, nameName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get workbook&#39;s name value.
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;RangeValueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RangeValueResponse> cellsWorkbookGetWorkbookNameValueWithHttpInfo(String name, String nameName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNameValueValidateBeforeCall(name, nameName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<RangeValueResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get workbook&#39;s name value. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param nameName The name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookNameValueAsync(String name, String nameName, String folder, String storageName, final ApiCallback<RangeValueResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNameValueValidateBeforeCall(name, nameName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RangeValueResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbookNames
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookNamesCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/names"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookNamesValidateBeforeCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbookNames(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNamesCall(name, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read workbook&#39;s names.
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return NamesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NamesResponse cellsWorkbookGetWorkbookNames(String name, String folder, String storageName) throws ApiException {
        ApiResponse<NamesResponse> resp = cellsWorkbookGetWorkbookNamesWithHttpInfo(name, folder, storageName);
        return resp.getData();
    }

    /**
     * Read workbook&#39;s names.
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;NamesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NamesResponse> cellsWorkbookGetWorkbookNamesWithHttpInfo(String name, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNamesValidateBeforeCall(name, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<NamesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read workbook&#39;s names. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookNamesAsync(String name, String folder, String storageName, final ApiCallback<NamesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookNamesValidateBeforeCall(name, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NamesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbookSettings
     * @param name Document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookSettingsCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/settings"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookSettingsValidateBeforeCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbookSettings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookSettingsCall(name, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Workbook Settings DTO
     * 
     * @param name Document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return WorkbookSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkbookSettingsResponse cellsWorkbookGetWorkbookSettings(String name, String folder, String storageName) throws ApiException {
        ApiResponse<WorkbookSettingsResponse> resp = cellsWorkbookGetWorkbookSettingsWithHttpInfo(name, folder, storageName);
        return resp.getData();
    }

    /**
     * Get Workbook Settings DTO
     * 
     * @param name Document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;WorkbookSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkbookSettingsResponse> cellsWorkbookGetWorkbookSettingsWithHttpInfo(String name, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookSettingsValidateBeforeCall(name, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<WorkbookSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Workbook Settings DTO (asynchronously)
     * 
     * @param name Document name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookSettingsAsync(String name, String folder, String storageName, final ApiCallback<WorkbookSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookSettingsValidateBeforeCall(name, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkbookSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookGetWorkbookTextItems
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookTextItemsCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/textItems"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookGetWorkbookTextItemsValidateBeforeCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookGetWorkbookTextItems(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookTextItemsCall(name, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read workbook&#39;s text items.
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return TextItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextItemsResponse cellsWorkbookGetWorkbookTextItems(String name, String folder, String storageName) throws ApiException {
        ApiResponse<TextItemsResponse> resp = cellsWorkbookGetWorkbookTextItemsWithHttpInfo(name, folder, storageName);
        return resp.getData();
    }

    /**
     * Read workbook&#39;s text items.
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;TextItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextItemsResponse> cellsWorkbookGetWorkbookTextItemsWithHttpInfo(String name, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookTextItemsValidateBeforeCall(name, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read workbook&#39;s text items. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookGetWorkbookTextItemsAsync(String name, String folder, String storageName, final ApiCallback<TextItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookGetWorkbookTextItemsValidateBeforeCall(name, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostAutofitWorkbookRows
     * @param name Document name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostAutofitWorkbookRowsCall(String name, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autoFitterOptions;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/autofitrows"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (endRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endRow", endRow));
        if (onlyAuto != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "onlyAuto", onlyAuto));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostAutofitWorkbookRowsValidateBeforeCall(String name, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostAutofitWorkbookRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostAutofitWorkbookRowsCall(name, autoFitterOptions, startRow, endRow, onlyAuto, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Autofit workbook rows.
     * 
     * @param name Document name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookPostAutofitWorkbookRows(String name, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookPostAutofitWorkbookRowsWithHttpInfo(name, autoFitterOptions, startRow, endRow, onlyAuto, folder, storageName);
        return resp.getData();
    }

    /**
     * Autofit workbook rows.
     * 
     * @param name Document name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookPostAutofitWorkbookRowsWithHttpInfo(String name, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostAutofitWorkbookRowsValidateBeforeCall(name, autoFitterOptions, startRow, endRow, onlyAuto, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Autofit workbook rows. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostAutofitWorkbookRowsAsync(String name, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostAutofitWorkbookRowsValidateBeforeCall(name, autoFitterOptions, startRow, endRow, onlyAuto, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostEncryptDocument
     * @param name The document name. (required)
     * @param encryption Encryption parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostEncryptDocumentCall(String name, WorkbookEncryptionRequest encryption, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = encryption;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/encryption"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostEncryptDocumentValidateBeforeCall(String name, WorkbookEncryptionRequest encryption, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostEncryptDocument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostEncryptDocumentCall(name, encryption, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Encript document.
     * 
     * @param name The document name. (required)
     * @param encryption Encryption parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookPostEncryptDocument(String name, WorkbookEncryptionRequest encryption, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookPostEncryptDocumentWithHttpInfo(name, encryption, folder, storageName);
        return resp.getData();
    }

    /**
     * Encript document.
     * 
     * @param name The document name. (required)
     * @param encryption Encryption parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookPostEncryptDocumentWithHttpInfo(String name, WorkbookEncryptionRequest encryption, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostEncryptDocumentValidateBeforeCall(name, encryption, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Encript document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param encryption Encryption parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostEncryptDocumentAsync(String name, WorkbookEncryptionRequest encryption, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostEncryptDocumentValidateBeforeCall(name, encryption, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostImportData
     * @param name  (required)
     * @param importData  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostImportDataCall(String name, ImportOption importData, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = importData;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/importdata"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostImportDataValidateBeforeCall(String name, ImportOption importData, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostImportData(Async)");
        }
        
        // verify the required parameter 'importData' is set
        if (importData == null) {
            throw new ApiException("Missing the required parameter 'importData' when calling cellsWorkbookPostImportData(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostImportDataCall(name, importData, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param importData  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookPostImportData(String name, ImportOption importData, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookPostImportDataWithHttpInfo(name, importData, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param importData  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookPostImportDataWithHttpInfo(String name, ImportOption importData, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostImportDataValidateBeforeCall(name, importData, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param importData  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostImportDataAsync(String name, ImportOption importData, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostImportDataValidateBeforeCall(name, importData, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostProtectDocument
     * @param name The document name. (required)
     * @param protection The protection settings. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostProtectDocumentCall(String name, WorkbookProtectionRequest protection, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = protection;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/protection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostProtectDocumentValidateBeforeCall(String name, WorkbookProtectionRequest protection, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostProtectDocument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostProtectDocumentCall(name, protection, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Protect document.
     * 
     * @param name The document name. (required)
     * @param protection The protection settings. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookPostProtectDocument(String name, WorkbookProtectionRequest protection, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookPostProtectDocumentWithHttpInfo(name, protection, folder, storageName);
        return resp.getData();
    }

    /**
     * Protect document.
     * 
     * @param name The document name. (required)
     * @param protection The protection settings. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookPostProtectDocumentWithHttpInfo(String name, WorkbookProtectionRequest protection, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostProtectDocumentValidateBeforeCall(name, protection, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Protect document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param protection The protection settings. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostProtectDocumentAsync(String name, WorkbookProtectionRequest protection, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostProtectDocumentValidateBeforeCall(name, protection, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbookCalculateFormula
     * @param name Document name. (required)
     * @param options Calculation Options. (optional)
     * @param ignoreError ignore Error. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookCalculateFormulaCall(String name, CalculationOptions options, Boolean ignoreError, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = options;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/calculateformula"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (ignoreError != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ignoreError", ignoreError));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbookCalculateFormulaValidateBeforeCall(String name, CalculationOptions options, Boolean ignoreError, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbookCalculateFormula(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookCalculateFormulaCall(name, options, ignoreError, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculate all formulas in workbook.
     * 
     * @param name Document name. (required)
     * @param options Calculation Options. (optional)
     * @param ignoreError ignore Error. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookPostWorkbookCalculateFormula(String name, CalculationOptions options, Boolean ignoreError, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookPostWorkbookCalculateFormulaWithHttpInfo(name, options, ignoreError, folder, storageName);
        return resp.getData();
    }

    /**
     * Calculate all formulas in workbook.
     * 
     * @param name Document name. (required)
     * @param options Calculation Options. (optional)
     * @param ignoreError ignore Error. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookPostWorkbookCalculateFormulaWithHttpInfo(String name, CalculationOptions options, Boolean ignoreError, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookCalculateFormulaValidateBeforeCall(name, options, ignoreError, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculate all formulas in workbook. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param options Calculation Options. (optional)
     * @param ignoreError ignore Error. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookCalculateFormulaAsync(String name, CalculationOptions options, Boolean ignoreError, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookCalculateFormulaValidateBeforeCall(name, options, ignoreError, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbookGetSmartMarkerResult
     * @param name The workbook name. (required)
     * @param xmlFile The xml file full path, if empty the data is read from request body. (optional)
     * @param folder The workbook folder full path. (optional)
     * @param storageName storage name. (optional)
     * @param outPath Path to save result (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookGetSmartMarkerResultCall(String name, String xmlFile, String folder, String storageName, String outPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/smartmarker"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (xmlFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "xmlFile", xmlFile));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "outPath", outPath));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbookGetSmartMarkerResultValidateBeforeCall(String name, String xmlFile, String folder, String storageName, String outPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbookGetSmartMarkerResult(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookGetSmartMarkerResultCall(name, xmlFile, folder, storageName, outPath, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Smart marker processing result.
     * 
     * @param name The workbook name. (required)
     * @param xmlFile The xml file full path, if empty the data is read from request body. (optional)
     * @param folder The workbook folder full path. (optional)
     * @param storageName storage name. (optional)
     * @param outPath Path to save result (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsWorkbookPostWorkbookGetSmartMarkerResult(String name, String xmlFile, String folder, String storageName, String outPath) throws ApiException {
        ApiResponse<File> resp = cellsWorkbookPostWorkbookGetSmartMarkerResultWithHttpInfo(name, xmlFile, folder, storageName, outPath);
        return resp.getData();
    }

    /**
     * Smart marker processing result.
     * 
     * @param name The workbook name. (required)
     * @param xmlFile The xml file full path, if empty the data is read from request body. (optional)
     * @param folder The workbook folder full path. (optional)
     * @param storageName storage name. (optional)
     * @param outPath Path to save result (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsWorkbookPostWorkbookGetSmartMarkerResultWithHttpInfo(String name, String xmlFile, String folder, String storageName, String outPath) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookGetSmartMarkerResultValidateBeforeCall(name, xmlFile, folder, storageName, outPath, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Smart marker processing result. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param xmlFile The xml file full path, if empty the data is read from request body. (optional)
     * @param folder The workbook folder full path. (optional)
     * @param storageName storage name. (optional)
     * @param outPath Path to save result (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookGetSmartMarkerResultAsync(String name, String xmlFile, String folder, String storageName, String outPath, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookGetSmartMarkerResultValidateBeforeCall(name, xmlFile, folder, storageName, outPath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbookSettings
     * @param name Document name. (required)
     * @param settings Workbook Setting DTO (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookSettingsCall(String name, WorkbookSettings settings, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settings;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/settings"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbookSettingsValidateBeforeCall(String name, WorkbookSettings settings, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbookSettings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookSettingsCall(name, settings, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Workbook setting 
     * 
     * @param name Document name. (required)
     * @param settings Workbook Setting DTO (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookPostWorkbookSettings(String name, WorkbookSettings settings, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookPostWorkbookSettingsWithHttpInfo(name, settings, folder, storageName);
        return resp.getData();
    }

    /**
     * Update Workbook setting 
     * 
     * @param name Document name. (required)
     * @param settings Workbook Setting DTO (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookPostWorkbookSettingsWithHttpInfo(String name, WorkbookSettings settings, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookSettingsValidateBeforeCall(name, settings, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Workbook setting  (asynchronously)
     * 
     * @param name Document name. (required)
     * @param settings Workbook Setting DTO (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookSettingsAsync(String name, WorkbookSettings settings, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookSettingsValidateBeforeCall(name, settings, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbookSplit
     * @param name The workbook name. (required)
     * @param format Split format. (optional)
     * @param from Start worksheet index. (optional, default to 0)
     * @param to End worksheet index. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param folder The workbook folder. (optional)
     * @param outFolder out Folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookSplitCall(String name, String format, Integer from, Integer to, Integer horizontalResolution, Integer verticalResolution, String folder, String outFolder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/split"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (horizontalResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "horizontalResolution", horizontalResolution));
        if (verticalResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "verticalResolution", verticalResolution));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (outFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "outFolder", outFolder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbookSplitValidateBeforeCall(String name, String format, Integer from, Integer to, Integer horizontalResolution, Integer verticalResolution, String folder, String outFolder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbookSplit(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookSplitCall(name, format, from, to, horizontalResolution, verticalResolution, folder, outFolder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Split workbook.
     * 
     * @param name The workbook name. (required)
     * @param format Split format. (optional)
     * @param from Start worksheet index. (optional, default to 0)
     * @param to End worksheet index. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param folder The workbook folder. (optional)
     * @param outFolder out Folder. (optional)
     * @param storageName storage name. (optional)
     * @return SplitResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitResultResponse cellsWorkbookPostWorkbookSplit(String name, String format, Integer from, Integer to, Integer horizontalResolution, Integer verticalResolution, String folder, String outFolder, String storageName) throws ApiException {
        ApiResponse<SplitResultResponse> resp = cellsWorkbookPostWorkbookSplitWithHttpInfo(name, format, from, to, horizontalResolution, verticalResolution, folder, outFolder, storageName);
        return resp.getData();
    }

    /**
     * Split workbook.
     * 
     * @param name The workbook name. (required)
     * @param format Split format. (optional)
     * @param from Start worksheet index. (optional, default to 0)
     * @param to End worksheet index. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param folder The workbook folder. (optional)
     * @param outFolder out Folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;SplitResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitResultResponse> cellsWorkbookPostWorkbookSplitWithHttpInfo(String name, String format, Integer from, Integer to, Integer horizontalResolution, Integer verticalResolution, String folder, String outFolder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookSplitValidateBeforeCall(name, format, from, to, horizontalResolution, verticalResolution, folder, outFolder, storageName, null, null);
        Type localVarReturnType = new TypeToken<SplitResultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split workbook. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param format Split format. (optional)
     * @param from Start worksheet index. (optional, default to 0)
     * @param to End worksheet index. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param folder The workbook folder. (optional)
     * @param outFolder out Folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbookSplitAsync(String name, String format, Integer from, Integer to, Integer horizontalResolution, Integer verticalResolution, String folder, String outFolder, String storageName, final ApiCallback<SplitResultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbookSplitValidateBeforeCall(name, format, from, to, horizontalResolution, verticalResolution, folder, outFolder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SplitResultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbooksMerge
     * @param name Workbook name. (required)
     * @param mergeWith The workbook to merge with. (required)
     * @param folder Source workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbooksMergeCall(String name, String mergeWith, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/merge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (mergeWith != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "mergeWith", mergeWith));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbooksMergeValidateBeforeCall(String name, String mergeWith, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbooksMerge(Async)");
        }
        
        // verify the required parameter 'mergeWith' is set
        if (mergeWith == null) {
            throw new ApiException("Missing the required parameter 'mergeWith' when calling cellsWorkbookPostWorkbooksMerge(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksMergeCall(name, mergeWith, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Merge workbooks.
     * 
     * @param name Workbook name. (required)
     * @param mergeWith The workbook to merge with. (required)
     * @param folder Source workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return WorkbookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkbookResponse cellsWorkbookPostWorkbooksMerge(String name, String mergeWith, String folder, String storageName) throws ApiException {
        ApiResponse<WorkbookResponse> resp = cellsWorkbookPostWorkbooksMergeWithHttpInfo(name, mergeWith, folder, storageName);
        return resp.getData();
    }

    /**
     * Merge workbooks.
     * 
     * @param name Workbook name. (required)
     * @param mergeWith The workbook to merge with. (required)
     * @param folder Source workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;WorkbookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkbookResponse> cellsWorkbookPostWorkbooksMergeWithHttpInfo(String name, String mergeWith, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksMergeValidateBeforeCall(name, mergeWith, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<WorkbookResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merge workbooks. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param mergeWith The workbook to merge with. (required)
     * @param folder Source workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbooksMergeAsync(String name, String mergeWith, String folder, String storageName, final ApiCallback<WorkbookResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksMergeValidateBeforeCall(name, mergeWith, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkbookResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbooksTextReplace
     * @param name Document name. (required)
     * @param oldValue The old value. (required)
     * @param newValue The new value. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbooksTextReplaceCall(String name, String oldValue, String newValue, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/replaceText"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (oldValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "oldValue", oldValue));
        if (newValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "newValue", newValue));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbooksTextReplaceValidateBeforeCall(String name, String oldValue, String newValue, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbooksTextReplace(Async)");
        }
        
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling cellsWorkbookPostWorkbooksTextReplace(Async)");
        }
        
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling cellsWorkbookPostWorkbooksTextReplace(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksTextReplaceCall(name, oldValue, newValue, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace text.
     * 
     * @param name Document name. (required)
     * @param oldValue The old value. (required)
     * @param newValue The new value. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return WorkbookReplaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkbookReplaceResponse cellsWorkbookPostWorkbooksTextReplace(String name, String oldValue, String newValue, String folder, String storageName) throws ApiException {
        ApiResponse<WorkbookReplaceResponse> resp = cellsWorkbookPostWorkbooksTextReplaceWithHttpInfo(name, oldValue, newValue, folder, storageName);
        return resp.getData();
    }

    /**
     * Replace text.
     * 
     * @param name Document name. (required)
     * @param oldValue The old value. (required)
     * @param newValue The new value. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;WorkbookReplaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkbookReplaceResponse> cellsWorkbookPostWorkbooksTextReplaceWithHttpInfo(String name, String oldValue, String newValue, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksTextReplaceValidateBeforeCall(name, oldValue, newValue, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<WorkbookReplaceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace text. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param oldValue The old value. (required)
     * @param newValue The new value. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbooksTextReplaceAsync(String name, String oldValue, String newValue, String folder, String storageName, final ApiCallback<WorkbookReplaceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksTextReplaceValidateBeforeCall(name, oldValue, newValue, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkbookReplaceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPostWorkbooksTextSearch
     * @param name Document name. (required)
     * @param text Text sample. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbooksTextSearchCall(String name, String text, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/findText"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPostWorkbooksTextSearchValidateBeforeCall(String name, String text, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPostWorkbooksTextSearch(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling cellsWorkbookPostWorkbooksTextSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksTextSearchCall(name, text, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search text.
     * 
     * @param name Document name. (required)
     * @param text Text sample. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return TextItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextItemsResponse cellsWorkbookPostWorkbooksTextSearch(String name, String text, String folder, String storageName) throws ApiException {
        ApiResponse<TextItemsResponse> resp = cellsWorkbookPostWorkbooksTextSearchWithHttpInfo(name, text, folder, storageName);
        return resp.getData();
    }

    /**
     * Search text.
     * 
     * @param name Document name. (required)
     * @param text Text sample. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;TextItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextItemsResponse> cellsWorkbookPostWorkbooksTextSearchWithHttpInfo(String name, String text, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksTextSearchValidateBeforeCall(name, text, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search text. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param text Text sample. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPostWorkbooksTextSearchAsync(String name, String text, String folder, String storageName, final ApiCallback<TextItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPostWorkbooksTextSearchValidateBeforeCall(name, text, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPutConvertWorkbook
     * @param workbook  (required)
     * @param format The format to convert. (optional)
     * @param password The workbook password. (optional)
     * @param outPath Path to save result (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutConvertWorkbookCall(File workbook, String format, String password, String outPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/convert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "password", password));
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "outPath", outPath));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (workbook != null)
        localVarFormParams.put("workbook", workbook);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPutConvertWorkbookValidateBeforeCall(File workbook, String format, String password, String outPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'workbook' is set
        if (workbook == null) {
            throw new ApiException("Missing the required parameter 'workbook' when calling cellsWorkbookPutConvertWorkbook(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPutConvertWorkbookCall(workbook, format, password, outPath, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Convert workbook from request content to some format.
     * 
     * @param workbook  (required)
     * @param format The format to convert. (optional)
     * @param password The workbook password. (optional)
     * @param outPath Path to save result (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsWorkbookPutConvertWorkbook(File workbook, String format, String password, String outPath) throws ApiException {
        ApiResponse<File> resp = cellsWorkbookPutConvertWorkbookWithHttpInfo(workbook, format, password, outPath);
        return resp.getData();
    }

    /**
     * Convert workbook from request content to some format.
     * 
     * @param workbook  (required)
     * @param format The format to convert. (optional)
     * @param password The workbook password. (optional)
     * @param outPath Path to save result (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsWorkbookPutConvertWorkbookWithHttpInfo(File workbook, String format, String password, String outPath) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPutConvertWorkbookValidateBeforeCall(workbook, format, password, outPath, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert workbook from request content to some format. (asynchronously)
     * 
     * @param workbook  (required)
     * @param format The format to convert. (optional)
     * @param password The workbook password. (optional)
     * @param outPath Path to save result (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutConvertWorkbookAsync(File workbook, String format, String password, String outPath, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPutConvertWorkbookValidateBeforeCall(workbook, format, password, outPath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPutDocumentProtectFromChanges
     * @param name Document name. (required)
     * @param password Modification password. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutDocumentProtectFromChangesCall(String name, PasswordRequest password, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = password;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/writeProtection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPutDocumentProtectFromChangesValidateBeforeCall(String name, PasswordRequest password, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPutDocumentProtectFromChanges(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPutDocumentProtectFromChangesCall(name, password, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Protect document from changes.
     * 
     * @param name Document name. (required)
     * @param password Modification password. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookPutDocumentProtectFromChanges(String name, PasswordRequest password, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookPutDocumentProtectFromChangesWithHttpInfo(name, password, folder, storageName);
        return resp.getData();
    }

    /**
     * Protect document from changes.
     * 
     * @param name Document name. (required)
     * @param password Modification password. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookPutDocumentProtectFromChangesWithHttpInfo(String name, PasswordRequest password, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPutDocumentProtectFromChangesValidateBeforeCall(name, password, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Protect document from changes. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Modification password. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutDocumentProtectFromChangesAsync(String name, PasswordRequest password, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPutDocumentProtectFromChangesValidateBeforeCall(name, password, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPutWorkbookBackground
     * @param name  (required)
     * @param png  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutWorkbookBackgroundCall(String name, byte[] png, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = png;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/background"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPutWorkbookBackgroundValidateBeforeCall(String name, byte[] png, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPutWorkbookBackground(Async)");
        }
        
        // verify the required parameter 'png' is set
        if (png == null) {
            throw new ApiException("Missing the required parameter 'png' when calling cellsWorkbookPutWorkbookBackground(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPutWorkbookBackgroundCall(name, png, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set workbook background image.
     * 
     * @param name  (required)
     * @param png  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookPutWorkbookBackground(String name, byte[] png, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookPutWorkbookBackgroundWithHttpInfo(name, png, folder, storageName);
        return resp.getData();
    }

    /**
     * Set workbook background image.
     * 
     * @param name  (required)
     * @param png  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookPutWorkbookBackgroundWithHttpInfo(String name, byte[] png, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPutWorkbookBackgroundValidateBeforeCall(name, png, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set workbook background image. (asynchronously)
     * 
     * @param name  (required)
     * @param png  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutWorkbookBackgroundAsync(String name, byte[] png, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPutWorkbookBackgroundValidateBeforeCall(name, png, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPutWorkbookCreate
     * @param name The new document name. (required)
     * @param templateFile The template file, if the data not provided default workbook is created. (optional)
     * @param dataFile Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     * @param isWriteOver write over file. (optional)
     * @param folder The new document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutWorkbookCreateCall(String name, String templateFile, String dataFile, Boolean isWriteOver, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (templateFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "templateFile", templateFile));
        if (dataFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataFile", dataFile));
        if (isWriteOver != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isWriteOver", isWriteOver));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPutWorkbookCreateValidateBeforeCall(String name, String templateFile, String dataFile, Boolean isWriteOver, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPutWorkbookCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPutWorkbookCreateCall(name, templateFile, dataFile, isWriteOver, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create new workbook using deferent methods.
     * 
     * @param name The new document name. (required)
     * @param templateFile The template file, if the data not provided default workbook is created. (optional)
     * @param dataFile Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     * @param isWriteOver write over file. (optional)
     * @param folder The new document folder. (optional)
     * @param storageName storage name. (optional)
     * @return WorkbookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorkbookResponse cellsWorkbookPutWorkbookCreate(String name, String templateFile, String dataFile, Boolean isWriteOver, String folder, String storageName) throws ApiException {
        ApiResponse<WorkbookResponse> resp = cellsWorkbookPutWorkbookCreateWithHttpInfo(name, templateFile, dataFile, isWriteOver, folder, storageName);
        return resp.getData();
    }

    /**
     * Create new workbook using deferent methods.
     * 
     * @param name The new document name. (required)
     * @param templateFile The template file, if the data not provided default workbook is created. (optional)
     * @param dataFile Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     * @param isWriteOver write over file. (optional)
     * @param folder The new document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;WorkbookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorkbookResponse> cellsWorkbookPutWorkbookCreateWithHttpInfo(String name, String templateFile, String dataFile, Boolean isWriteOver, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPutWorkbookCreateValidateBeforeCall(name, templateFile, dataFile, isWriteOver, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<WorkbookResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new workbook using deferent methods. (asynchronously)
     * 
     * @param name The new document name. (required)
     * @param templateFile The template file, if the data not provided default workbook is created. (optional)
     * @param dataFile Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     * @param isWriteOver write over file. (optional)
     * @param folder The new document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutWorkbookCreateAsync(String name, String templateFile, String dataFile, Boolean isWriteOver, String folder, String storageName, final ApiCallback<WorkbookResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPutWorkbookCreateValidateBeforeCall(name, templateFile, dataFile, isWriteOver, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorkbookResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorkbookPutWorkbookWaterMarker
     * @param name  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param textWaterMarkerRequest The text water marker request. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutWorkbookWaterMarkerCall(String name, String folder, String storageName, TextWaterMarkerRequest textWaterMarkerRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = textWaterMarkerRequest;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/watermarker"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorkbookPutWorkbookWaterMarkerValidateBeforeCall(String name, String folder, String storageName, TextWaterMarkerRequest textWaterMarkerRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorkbookPutWorkbookWaterMarker(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorkbookPutWorkbookWaterMarkerCall(name, folder, storageName, textWaterMarkerRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set workbook background image.
     * 
     * @param name  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param textWaterMarkerRequest The text water marker request. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorkbookPutWorkbookWaterMarker(String name, String folder, String storageName, TextWaterMarkerRequest textWaterMarkerRequest) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorkbookPutWorkbookWaterMarkerWithHttpInfo(name, folder, storageName, textWaterMarkerRequest);
        return resp.getData();
    }

    /**
     * Set workbook background image.
     * 
     * @param name  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param textWaterMarkerRequest The text water marker request. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorkbookPutWorkbookWaterMarkerWithHttpInfo(String name, String folder, String storageName, TextWaterMarkerRequest textWaterMarkerRequest) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorkbookPutWorkbookWaterMarkerValidateBeforeCall(name, folder, storageName, textWaterMarkerRequest, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set workbook background image. (asynchronously)
     * 
     * @param name  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param textWaterMarkerRequest The text water marker request. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorkbookPutWorkbookWaterMarkerAsync(String name, String folder, String storageName, TextWaterMarkerRequest textWaterMarkerRequest, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorkbookPutWorkbookWaterMarkerValidateBeforeCall(name, folder, storageName, textWaterMarkerRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetValidationsDeleteWorksheetValidation
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsDeleteWorksheetValidationCall(String name, String sheetName, Integer validationIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "validationIndex" + "\\}", apiClient.escapeString(validationIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetValidationsDeleteWorksheetValidationValidateBeforeCall(String name, String sheetName, Integer validationIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetValidationsDeleteWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetValidationsDeleteWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'validationIndex' is set
        if (validationIndex == null) {
            throw new ApiException("Missing the required parameter 'validationIndex' when calling cellsWorksheetValidationsDeleteWorksheetValidation(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetValidationsDeleteWorksheetValidationCall(name, sheetName, validationIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet validation by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ValidationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationResponse cellsWorksheetValidationsDeleteWorksheetValidation(String name, String sheetName, Integer validationIndex, String folder, String storageName) throws ApiException {
        ApiResponse<ValidationResponse> resp = cellsWorksheetValidationsDeleteWorksheetValidationWithHttpInfo(name, sheetName, validationIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete worksheet validation by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ValidationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationResponse> cellsWorksheetValidationsDeleteWorksheetValidationWithHttpInfo(String name, String sheetName, Integer validationIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetValidationsDeleteWorksheetValidationValidateBeforeCall(name, sheetName, validationIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet validation by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsDeleteWorksheetValidationAsync(String name, String sheetName, Integer validationIndex, String folder, String storageName, final ApiCallback<ValidationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetValidationsDeleteWorksheetValidationValidateBeforeCall(name, sheetName, validationIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetValidationsDeleteWorksheetValidations
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsDeleteWorksheetValidationsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/validations"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetValidationsDeleteWorksheetValidationsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetValidationsDeleteWorksheetValidations(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetValidationsDeleteWorksheetValidations(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetValidationsDeleteWorksheetValidationsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clear all validation in worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetValidationsDeleteWorksheetValidations(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetValidationsDeleteWorksheetValidationsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Clear all validation in worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetValidationsDeleteWorksheetValidationsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetValidationsDeleteWorksheetValidationsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clear all validation in worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsDeleteWorksheetValidationsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetValidationsDeleteWorksheetValidationsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetValidationsGetWorksheetValidation
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsGetWorksheetValidationCall(String name, String sheetName, Integer validationIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "validationIndex" + "\\}", apiClient.escapeString(validationIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetValidationsGetWorksheetValidationValidateBeforeCall(String name, String sheetName, Integer validationIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetValidationsGetWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetValidationsGetWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'validationIndex' is set
        if (validationIndex == null) {
            throw new ApiException("Missing the required parameter 'validationIndex' when calling cellsWorksheetValidationsGetWorksheetValidation(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetValidationsGetWorksheetValidationCall(name, sheetName, validationIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet validation by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ValidationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationResponse cellsWorksheetValidationsGetWorksheetValidation(String name, String sheetName, Integer validationIndex, String folder, String storageName) throws ApiException {
        ApiResponse<ValidationResponse> resp = cellsWorksheetValidationsGetWorksheetValidationWithHttpInfo(name, sheetName, validationIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet validation by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ValidationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationResponse> cellsWorksheetValidationsGetWorksheetValidationWithHttpInfo(String name, String sheetName, Integer validationIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetValidationsGetWorksheetValidationValidateBeforeCall(name, sheetName, validationIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet validation by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsGetWorksheetValidationAsync(String name, String sheetName, Integer validationIndex, String folder, String storageName, final ApiCallback<ValidationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetValidationsGetWorksheetValidationValidateBeforeCall(name, sheetName, validationIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetValidationsGetWorksheetValidations
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsGetWorksheetValidationsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/validations"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetValidationsGetWorksheetValidationsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetValidationsGetWorksheetValidations(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetValidationsGetWorksheetValidations(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetValidationsGetWorksheetValidationsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet validations.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ValidationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationsResponse cellsWorksheetValidationsGetWorksheetValidations(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<ValidationsResponse> resp = cellsWorksheetValidationsGetWorksheetValidationsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet validations.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ValidationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationsResponse> cellsWorksheetValidationsGetWorksheetValidationsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetValidationsGetWorksheetValidationsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ValidationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet validations. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsGetWorksheetValidationsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<ValidationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetValidationsGetWorksheetValidationsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetValidationsPostWorksheetValidation
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param validation  (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsPostWorksheetValidationCall(String name, String sheetName, Integer validationIndex, Validation validation, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = validation;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "validationIndex" + "\\}", apiClient.escapeString(validationIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetValidationsPostWorksheetValidationValidateBeforeCall(String name, String sheetName, Integer validationIndex, Validation validation, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetValidationsPostWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetValidationsPostWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'validationIndex' is set
        if (validationIndex == null) {
            throw new ApiException("Missing the required parameter 'validationIndex' when calling cellsWorksheetValidationsPostWorksheetValidation(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetValidationsPostWorksheetValidationCall(name, sheetName, validationIndex, validation, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update worksheet validation by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param validation  (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ValidationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationResponse cellsWorksheetValidationsPostWorksheetValidation(String name, String sheetName, Integer validationIndex, Validation validation, String folder, String storageName) throws ApiException {
        ApiResponse<ValidationResponse> resp = cellsWorksheetValidationsPostWorksheetValidationWithHttpInfo(name, sheetName, validationIndex, validation, folder, storageName);
        return resp.getData();
    }

    /**
     * Update worksheet validation by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param validation  (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ValidationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationResponse> cellsWorksheetValidationsPostWorksheetValidationWithHttpInfo(String name, String sheetName, Integer validationIndex, Validation validation, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetValidationsPostWorksheetValidationValidateBeforeCall(name, sheetName, validationIndex, validation, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update worksheet validation by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param validationIndex The validation index. (required)
     * @param validation  (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsPostWorksheetValidationAsync(String name, String sheetName, Integer validationIndex, Validation validation, String folder, String storageName, final ApiCallback<ValidationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetValidationsPostWorksheetValidationValidateBeforeCall(name, sheetName, validationIndex, validation, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetValidationsPutWorksheetValidation
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range Specified cells area (optional)
     * @param validation validation (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsPutWorksheetValidationCall(String name, String sheetName, String range, Validation validation, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = validation;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/validations"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetValidationsPutWorksheetValidationValidateBeforeCall(String name, String sheetName, String range, Validation validation, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetValidationsPutWorksheetValidation(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetValidationsPutWorksheetValidation(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetValidationsPutWorksheetValidationCall(name, sheetName, range, validation, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add worksheet validation at index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range Specified cells area (optional)
     * @param validation validation (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ValidationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationResponse cellsWorksheetValidationsPutWorksheetValidation(String name, String sheetName, String range, Validation validation, String folder, String storageName) throws ApiException {
        ApiResponse<ValidationResponse> resp = cellsWorksheetValidationsPutWorksheetValidationWithHttpInfo(name, sheetName, range, validation, folder, storageName);
        return resp.getData();
    }

    /**
     * Add worksheet validation at index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range Specified cells area (optional)
     * @param validation validation (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;ValidationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationResponse> cellsWorksheetValidationsPutWorksheetValidationWithHttpInfo(String name, String sheetName, String range, Validation validation, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetValidationsPutWorksheetValidationValidateBeforeCall(name, sheetName, range, validation, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add worksheet validation at index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param range Specified cells area (optional)
     * @param validation validation (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetValidationsPutWorksheetValidationAsync(String name, String sheetName, String range, Validation validation, String folder, String storageName, final ApiCallback<ValidationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetValidationsPutWorksheetValidationValidateBeforeCall(name, sheetName, range, validation, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsDeleteUnprotectWorksheet
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. Only password is used here. (optional)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteUnprotectWorksheetCall(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = protectParameter;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/protection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsDeleteUnprotectWorksheetValidateBeforeCall(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsDeleteUnprotectWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsDeleteUnprotectWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteUnprotectWorksheetCall(name, sheetName, protectParameter, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unprotect worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. Only password is used here. (optional)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return WorksheetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetResponse cellsWorksheetsDeleteUnprotectWorksheet(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storageName) throws ApiException {
        ApiResponse<WorksheetResponse> resp = cellsWorksheetsDeleteUnprotectWorksheetWithHttpInfo(name, sheetName, protectParameter, folder, storageName);
        return resp.getData();
    }

    /**
     * Unprotect worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. Only password is used here. (optional)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;WorksheetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetResponse> cellsWorksheetsDeleteUnprotectWorksheetWithHttpInfo(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteUnprotectWorksheetValidateBeforeCall(name, sheetName, protectParameter, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unprotect worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. Only password is used here. (optional)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteUnprotectWorksheetAsync(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storageName, final ApiCallback<WorksheetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsDeleteUnprotectWorksheetValidateBeforeCall(name, sheetName, protectParameter, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsDeleteWorksheet
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsDeleteWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsDeleteWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return WorksheetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetsResponse cellsWorksheetsDeleteWorksheet(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<WorksheetsResponse> resp = cellsWorksheetsDeleteWorksheetWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;WorksheetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetsResponse> cellsWorksheetsDeleteWorksheetWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<WorksheetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsDeleteWorksheetBackground
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetBackgroundCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/background"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetBackgroundValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsDeleteWorksheetBackground(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsDeleteWorksheetBackground(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetBackgroundCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set worksheet background image.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsDeleteWorksheetBackground(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsDeleteWorksheetBackgroundWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Set worksheet background image.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsDeleteWorksheetBackgroundWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetBackgroundValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set worksheet background image. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetBackgroundAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetBackgroundValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsDeleteWorksheetComment
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCommentCall(String name, String sheetName, String cellName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCommentValidateBeforeCall(String name, String sheetName, String cellName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsDeleteWorksheetComment(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsDeleteWorksheetComment(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsWorksheetsDeleteWorksheetComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCommentCall(name, sheetName, cellName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet&#39;s cell comment.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsDeleteWorksheetComment(String name, String sheetName, String cellName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsDeleteWorksheetCommentWithHttpInfo(name, sheetName, cellName, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete worksheet&#39;s cell comment.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsDeleteWorksheetCommentWithHttpInfo(String name, String sheetName, String cellName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCommentValidateBeforeCall(name, sheetName, cellName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet&#39;s cell comment. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCommentAsync(String name, String sheetName, String cellName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCommentValidateBeforeCall(name, sheetName, cellName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsDeleteWorksheetComments
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCommentsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/comments"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCommentsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsDeleteWorksheetComments(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsDeleteWorksheetComments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCommentsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete all comments for worksheet.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsDeleteWorksheetComments(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsDeleteWorksheetCommentsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Delete all comments for worksheet.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsDeleteWorksheetCommentsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCommentsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all comments for worksheet. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCommentsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCommentsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsDeleteWorksheetFreezePanes
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetFreezePanesCall(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/freezepanes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (freezedRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "freezedRows", freezedRows));
        if (freezedColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "freezedColumns", freezedColumns));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetFreezePanesValidateBeforeCall(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsDeleteWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsDeleteWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'row' is set
        if (row == null) {
            throw new ApiException("Missing the required parameter 'row' when calling cellsWorksheetsDeleteWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'column' is set
        if (column == null) {
            throw new ApiException("Missing the required parameter 'column' when calling cellsWorksheetsDeleteWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'freezedRows' is set
        if (freezedRows == null) {
            throw new ApiException("Missing the required parameter 'freezedRows' when calling cellsWorksheetsDeleteWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'freezedColumns' is set
        if (freezedColumns == null) {
            throw new ApiException("Missing the required parameter 'freezedColumns' when calling cellsWorksheetsDeleteWorksheetFreezePanes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetFreezePanesCall(name, sheetName, row, column, freezedRows, freezedColumns, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unfreeze panes
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsDeleteWorksheetFreezePanes(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsDeleteWorksheetFreezePanesWithHttpInfo(name, sheetName, row, column, freezedRows, freezedColumns, folder, storageName);
        return resp.getData();
    }

    /**
     * Unfreeze panes
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsDeleteWorksheetFreezePanesWithHttpInfo(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetFreezePanesValidateBeforeCall(name, sheetName, row, column, freezedRows, freezedColumns, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unfreeze panes (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetFreezePanesAsync(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetFreezePanesValidateBeforeCall(name, sheetName, row, column, freezedRows, freezedColumns, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetNamedRanges
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetNamedRangesCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/ranges"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetNamedRangesValidateBeforeCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetNamedRanges(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetNamedRangesCall(name, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheets ranges info.
     * 
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return RangesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RangesResponse cellsWorksheetsGetNamedRanges(String name, String folder, String storageName) throws ApiException {
        ApiResponse<RangesResponse> resp = cellsWorksheetsGetNamedRangesWithHttpInfo(name, folder, storageName);
        return resp.getData();
    }

    /**
     * Read worksheets ranges info.
     * 
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;RangesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RangesResponse> cellsWorksheetsGetNamedRangesWithHttpInfo(String name, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetNamedRangesValidateBeforeCall(name, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<RangesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheets ranges info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetNamedRangesAsync(String name, String folder, String storageName, final ApiCallback<RangesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetNamedRangesValidateBeforeCall(name, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RangesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheet
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param format The exported file format. (optional)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param area Exported area. (optional)
     * @param pageIndex Exported page index. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCall(String name, String sheetName, String format, Integer verticalResolution, Integer horizontalResolution, String area, Integer pageIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (verticalResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "verticalResolution", verticalResolution));
        if (horizontalResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "horizontalResolution", horizontalResolution));
        if (area != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "area", area));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageIndex", pageIndex));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetValidateBeforeCall(String name, String sheetName, String format, Integer verticalResolution, Integer horizontalResolution, String area, Integer pageIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCall(name, sheetName, format, verticalResolution, horizontalResolution, area, pageIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheet info or export.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param format The exported file format. (optional)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param area Exported area. (optional)
     * @param pageIndex Exported page index. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsWorksheetsGetWorksheet(String name, String sheetName, String format, Integer verticalResolution, Integer horizontalResolution, String area, Integer pageIndex, String folder, String storageName) throws ApiException {
        ApiResponse<File> resp = cellsWorksheetsGetWorksheetWithHttpInfo(name, sheetName, format, verticalResolution, horizontalResolution, area, pageIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Read worksheet info or export.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param format The exported file format. (optional)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param area Exported area. (optional)
     * @param pageIndex Exported page index. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsWorksheetsGetWorksheetWithHttpInfo(String name, String sheetName, String format, Integer verticalResolution, Integer horizontalResolution, String area, Integer pageIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetValidateBeforeCall(name, sheetName, format, verticalResolution, horizontalResolution, area, pageIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheet info or export. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param format The exported file format. (optional)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param area Exported area. (optional)
     * @param pageIndex Exported page index. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetAsync(String name, String sheetName, String format, Integer verticalResolution, Integer horizontalResolution, String area, Integer pageIndex, String folder, String storageName, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetValidateBeforeCall(name, sheetName, format, verticalResolution, horizontalResolution, area, pageIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheetCalculateFormula
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param formula The formula. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCalculateFormulaCall(String name, String sheetName, String formula, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/formulaResult"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (formula != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "formula", formula));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCalculateFormulaValidateBeforeCall(String name, String sheetName, String formula, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheetCalculateFormula(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheetCalculateFormula(Async)");
        }
        
        // verify the required parameter 'formula' is set
        if (formula == null) {
            throw new ApiException("Missing the required parameter 'formula' when calling cellsWorksheetsGetWorksheetCalculateFormula(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCalculateFormulaCall(name, sheetName, formula, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculate formula value.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param formula The formula. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return SingleValueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleValueResponse cellsWorksheetsGetWorksheetCalculateFormula(String name, String sheetName, String formula, String folder, String storageName) throws ApiException {
        ApiResponse<SingleValueResponse> resp = cellsWorksheetsGetWorksheetCalculateFormulaWithHttpInfo(name, sheetName, formula, folder, storageName);
        return resp.getData();
    }

    /**
     * Calculate formula value.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param formula The formula. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;SingleValueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleValueResponse> cellsWorksheetsGetWorksheetCalculateFormulaWithHttpInfo(String name, String sheetName, String formula, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCalculateFormulaValidateBeforeCall(name, sheetName, formula, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<SingleValueResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculate formula value. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param formula The formula. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCalculateFormulaAsync(String name, String sheetName, String formula, String folder, String storageName, final ApiCallback<SingleValueResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCalculateFormulaValidateBeforeCall(name, sheetName, formula, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleValueResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheetComment
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCommentCall(String name, String sheetName, String cellName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCommentValidateBeforeCall(String name, String sheetName, String cellName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheetComment(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheetComment(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsWorksheetsGetWorksheetComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCommentCall(name, sheetName, cellName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet comment by cell name.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResponse cellsWorksheetsGetWorksheetComment(String name, String sheetName, String cellName, String folder, String storageName) throws ApiException {
        ApiResponse<CommentResponse> resp = cellsWorksheetsGetWorksheetCommentWithHttpInfo(name, sheetName, cellName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet comment by cell name.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResponse> cellsWorksheetsGetWorksheetCommentWithHttpInfo(String name, String sheetName, String cellName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCommentValidateBeforeCall(name, sheetName, cellName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet comment by cell name. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCommentAsync(String name, String sheetName, String cellName, String folder, String storageName, final ApiCallback<CommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCommentValidateBeforeCall(name, sheetName, cellName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheetComments
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCommentsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/comments"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCommentsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheetComments(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheetComments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCommentsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet comments.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CommentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentsResponse cellsWorksheetsGetWorksheetComments(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<CommentsResponse> resp = cellsWorksheetsGetWorksheetCommentsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet comments.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CommentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentsResponse> cellsWorksheetsGetWorksheetCommentsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCommentsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CommentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet comments. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCommentsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<CommentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCommentsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheetMergedCell
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param mergedCellIndex Merged cell index. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetMergedCellCall(String name, String sheetName, Integer mergedCellIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/mergedCells/{mergedCellIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "mergedCellIndex" + "\\}", apiClient.escapeString(mergedCellIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetMergedCellValidateBeforeCall(String name, String sheetName, Integer mergedCellIndex, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheetMergedCell(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheetMergedCell(Async)");
        }
        
        // verify the required parameter 'mergedCellIndex' is set
        if (mergedCellIndex == null) {
            throw new ApiException("Missing the required parameter 'mergedCellIndex' when calling cellsWorksheetsGetWorksheetMergedCell(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetMergedCellCall(name, sheetName, mergedCellIndex, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet merged cell by its index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param mergedCellIndex Merged cell index. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return MergedCellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MergedCellResponse cellsWorksheetsGetWorksheetMergedCell(String name, String sheetName, Integer mergedCellIndex, String folder, String storageName) throws ApiException {
        ApiResponse<MergedCellResponse> resp = cellsWorksheetsGetWorksheetMergedCellWithHttpInfo(name, sheetName, mergedCellIndex, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet merged cell by its index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param mergedCellIndex Merged cell index. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;MergedCellResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MergedCellResponse> cellsWorksheetsGetWorksheetMergedCellWithHttpInfo(String name, String sheetName, Integer mergedCellIndex, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetMergedCellValidateBeforeCall(name, sheetName, mergedCellIndex, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<MergedCellResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet merged cell by its index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param mergedCellIndex Merged cell index. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetMergedCellAsync(String name, String sheetName, Integer mergedCellIndex, String folder, String storageName, final ApiCallback<MergedCellResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetMergedCellValidateBeforeCall(name, sheetName, mergedCellIndex, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MergedCellResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheetMergedCells
     * @param name Document name. (required)
     * @param sheetName The workseet name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetMergedCellsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/mergedCells"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetMergedCellsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheetMergedCells(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheetMergedCells(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetMergedCellsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet merged cells.
     * 
     * @param name Document name. (required)
     * @param sheetName The workseet name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return MergedCellsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MergedCellsResponse cellsWorksheetsGetWorksheetMergedCells(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<MergedCellsResponse> resp = cellsWorksheetsGetWorksheetMergedCellsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet merged cells.
     * 
     * @param name Document name. (required)
     * @param sheetName The workseet name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;MergedCellsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MergedCellsResponse> cellsWorksheetsGetWorksheetMergedCellsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetMergedCellsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<MergedCellsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet merged cells. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The workseet name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetMergedCellsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<MergedCellsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetMergedCellsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MergedCellsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheetTextItems
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetTextItemsCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/textItems"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetTextItemsValidateBeforeCall(String name, String sheetName, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheetTextItems(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheetTextItems(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetTextItemsCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet text items.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return TextItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextItemsResponse cellsWorksheetsGetWorksheetTextItems(String name, String sheetName, String folder, String storageName) throws ApiException {
        ApiResponse<TextItemsResponse> resp = cellsWorksheetsGetWorksheetTextItemsWithHttpInfo(name, sheetName, folder, storageName);
        return resp.getData();
    }

    /**
     * Get worksheet text items.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;TextItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextItemsResponse> cellsWorksheetsGetWorksheetTextItemsWithHttpInfo(String name, String sheetName, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetTextItemsValidateBeforeCall(name, sheetName, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet text items. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetTextItemsAsync(String name, String sheetName, String folder, String storageName, final ApiCallback<TextItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetTextItemsValidateBeforeCall(name, sheetName, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheets
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetsCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetsValidateBeforeCall(String name, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheets(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetsCall(name, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheets info.
     * 
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return WorksheetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetsResponse cellsWorksheetsGetWorksheets(String name, String folder, String storageName) throws ApiException {
        ApiResponse<WorksheetsResponse> resp = cellsWorksheetsGetWorksheetsWithHttpInfo(name, folder, storageName);
        return resp.getData();
    }

    /**
     * Read worksheets info.
     * 
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;WorksheetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetsResponse> cellsWorksheetsGetWorksheetsWithHttpInfo(String name, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetsValidateBeforeCall(name, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheets info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetsAsync(String name, String folder, String storageName, final ApiCallback<WorksheetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetsValidateBeforeCall(name, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostAutofitWorksheetColumns
     * @param name  (required)
     * @param sheetName  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param firstRow  (optional)
     * @param lastRow  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetColumnsCall(String name, String sheetName, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, Integer firstRow, Integer lastRow, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autoFitterOptions;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autofitcolumns"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstColumn", firstColumn));
        if (lastColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastColumn", lastColumn));
        if (firstRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstRow", firstRow));
        if (lastRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastRow", lastRow));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, Integer firstRow, Integer lastRow, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostAutofitWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostAutofitWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'firstColumn' is set
        if (firstColumn == null) {
            throw new ApiException("Missing the required parameter 'firstColumn' when calling cellsWorksheetsPostAutofitWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'lastColumn' is set
        if (lastColumn == null) {
            throw new ApiException("Missing the required parameter 'lastColumn' when calling cellsWorksheetsPostAutofitWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetColumnsCall(name, sheetName, firstColumn, lastColumn, autoFitterOptions, firstRow, lastRow, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param firstRow  (optional)
     * @param lastRow  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsPostAutofitWorksheetColumns(String name, String sheetName, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, Integer firstRow, Integer lastRow, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsPostAutofitWorksheetColumnsWithHttpInfo(name, sheetName, firstColumn, lastColumn, autoFitterOptions, firstRow, lastRow, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param firstRow  (optional)
     * @param lastRow  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsPostAutofitWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, Integer firstRow, Integer lastRow, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetColumnsValidateBeforeCall(name, sheetName, firstColumn, lastColumn, autoFitterOptions, firstRow, lastRow, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param firstRow  (optional)
     * @param lastRow  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetColumnsAsync(String name, String sheetName, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, Integer firstRow, Integer lastRow, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetColumnsValidateBeforeCall(name, sheetName, firstColumn, lastColumn, autoFitterOptions, firstRow, lastRow, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostAutofitWorksheetRow
     * @param name  (required)
     * @param sheetName  (required)
     * @param rowIndex  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetRowCall(String name, String sheetName, Integer rowIndex, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autoFitterOptions;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autofitrow"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (rowIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "rowIndex", rowIndex));
        if (firstColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstColumn", firstColumn));
        if (lastColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastColumn", lastColumn));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetRowValidateBeforeCall(String name, String sheetName, Integer rowIndex, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostAutofitWorksheetRow(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostAutofitWorksheetRow(Async)");
        }
        
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling cellsWorksheetsPostAutofitWorksheetRow(Async)");
        }
        
        // verify the required parameter 'firstColumn' is set
        if (firstColumn == null) {
            throw new ApiException("Missing the required parameter 'firstColumn' when calling cellsWorksheetsPostAutofitWorksheetRow(Async)");
        }
        
        // verify the required parameter 'lastColumn' is set
        if (lastColumn == null) {
            throw new ApiException("Missing the required parameter 'lastColumn' when calling cellsWorksheetsPostAutofitWorksheetRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetRowCall(name, sheetName, rowIndex, firstColumn, lastColumn, autoFitterOptions, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param rowIndex  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsPostAutofitWorksheetRow(String name, String sheetName, Integer rowIndex, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsPostAutofitWorksheetRowWithHttpInfo(name, sheetName, rowIndex, firstColumn, lastColumn, autoFitterOptions, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param rowIndex  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsPostAutofitWorksheetRowWithHttpInfo(String name, String sheetName, Integer rowIndex, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, firstColumn, lastColumn, autoFitterOptions, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param rowIndex  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetRowAsync(String name, String sheetName, Integer rowIndex, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, firstColumn, lastColumn, autoFitterOptions, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostAutofitWorksheetRows
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetRowsCall(String name, String sheetName, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autoFitterOptions;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autofitrows"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (endRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endRow", endRow));
        if (onlyAuto != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "onlyAuto", onlyAuto));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetRowsValidateBeforeCall(String name, String sheetName, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostAutofitWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostAutofitWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetRowsCall(name, sheetName, autoFitterOptions, startRow, endRow, onlyAuto, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Autofit worksheet rows.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsPostAutofitWorksheetRows(String name, String sheetName, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsPostAutofitWorksheetRowsWithHttpInfo(name, sheetName, autoFitterOptions, startRow, endRow, onlyAuto, folder, storageName);
        return resp.getData();
    }

    /**
     * Autofit worksheet rows.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsPostAutofitWorksheetRowsWithHttpInfo(String name, String sheetName, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetRowsValidateBeforeCall(name, sheetName, autoFitterOptions, startRow, endRow, onlyAuto, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Autofit worksheet rows. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetRowsAsync(String name, String sheetName, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetRowsValidateBeforeCall(name, sheetName, autoFitterOptions, startRow, endRow, onlyAuto, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostCopyWorksheet
     * @param name  (required)
     * @param sheetName  (required)
     * @param sourceSheet  (required)
     * @param options  (optional)
     * @param sourceWorkbook  (optional)
     * @param sourceFolder  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostCopyWorksheetCall(String name, String sheetName, String sourceSheet, CopyOptions options, String sourceWorkbook, String sourceFolder, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = options;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/copy"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (sourceSheet != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceSheet", sourceSheet));
        if (sourceWorkbook != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceWorkbook", sourceWorkbook));
        if (sourceFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceFolder", sourceFolder));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostCopyWorksheetValidateBeforeCall(String name, String sheetName, String sourceSheet, CopyOptions options, String sourceWorkbook, String sourceFolder, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostCopyWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostCopyWorksheet(Async)");
        }
        
        // verify the required parameter 'sourceSheet' is set
        if (sourceSheet == null) {
            throw new ApiException("Missing the required parameter 'sourceSheet' when calling cellsWorksheetsPostCopyWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostCopyWorksheetCall(name, sheetName, sourceSheet, options, sourceWorkbook, sourceFolder, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sourceSheet  (required)
     * @param options  (optional)
     * @param sourceWorkbook  (optional)
     * @param sourceFolder  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsPostCopyWorksheet(String name, String sheetName, String sourceSheet, CopyOptions options, String sourceWorkbook, String sourceFolder, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsPostCopyWorksheetWithHttpInfo(name, sheetName, sourceSheet, options, sourceWorkbook, sourceFolder, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sourceSheet  (required)
     * @param options  (optional)
     * @param sourceWorkbook  (optional)
     * @param sourceFolder  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsPostCopyWorksheetWithHttpInfo(String name, String sheetName, String sourceSheet, CopyOptions options, String sourceWorkbook, String sourceFolder, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostCopyWorksheetValidateBeforeCall(name, sheetName, sourceSheet, options, sourceWorkbook, sourceFolder, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sourceSheet  (required)
     * @param options  (optional)
     * @param sourceWorkbook  (optional)
     * @param sourceFolder  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostCopyWorksheetAsync(String name, String sheetName, String sourceSheet, CopyOptions options, String sourceWorkbook, String sourceFolder, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostCopyWorksheetValidateBeforeCall(name, sheetName, sourceSheet, options, sourceWorkbook, sourceFolder, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostMoveWorksheet
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param moving with moving parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostMoveWorksheetCall(String name, String sheetName, WorksheetMovingRequest moving, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = moving;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/position"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostMoveWorksheetValidateBeforeCall(String name, String sheetName, WorksheetMovingRequest moving, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostMoveWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostMoveWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostMoveWorksheetCall(name, sheetName, moving, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param moving with moving parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return WorksheetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetsResponse cellsWorksheetsPostMoveWorksheet(String name, String sheetName, WorksheetMovingRequest moving, String folder, String storageName) throws ApiException {
        ApiResponse<WorksheetsResponse> resp = cellsWorksheetsPostMoveWorksheetWithHttpInfo(name, sheetName, moving, folder, storageName);
        return resp.getData();
    }

    /**
     * Move worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param moving with moving parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;WorksheetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetsResponse> cellsWorksheetsPostMoveWorksheetWithHttpInfo(String name, String sheetName, WorksheetMovingRequest moving, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostMoveWorksheetValidateBeforeCall(name, sheetName, moving, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param moving with moving parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostMoveWorksheetAsync(String name, String sheetName, WorksheetMovingRequest moving, String folder, String storageName, final ApiCallback<WorksheetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostMoveWorksheetValidateBeforeCall(name, sheetName, moving, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostRenameWorksheet
     * @param name  (required)
     * @param sheetName  (required)
     * @param newname  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostRenameWorksheetCall(String name, String sheetName, String newname, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/rename"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (newname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "newname", newname));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostRenameWorksheetValidateBeforeCall(String name, String sheetName, String newname, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostRenameWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostRenameWorksheet(Async)");
        }
        
        // verify the required parameter 'newname' is set
        if (newname == null) {
            throw new ApiException("Missing the required parameter 'newname' when calling cellsWorksheetsPostRenameWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostRenameWorksheetCall(name, sheetName, newname, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Rename worksheet
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param newname  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsPostRenameWorksheet(String name, String sheetName, String newname, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsPostRenameWorksheetWithHttpInfo(name, sheetName, newname, folder, storageName);
        return resp.getData();
    }

    /**
     * Rename worksheet
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param newname  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsPostRenameWorksheetWithHttpInfo(String name, String sheetName, String newname, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostRenameWorksheetValidateBeforeCall(name, sheetName, newname, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Rename worksheet (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param newname  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostRenameWorksheetAsync(String name, String sheetName, String newname, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostRenameWorksheetValidateBeforeCall(name, sheetName, newname, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostUpdateWorksheetProperty
     * @param name  (required)
     * @param sheetName  (required)
     * @param sheet  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostUpdateWorksheetPropertyCall(String name, String sheetName, Worksheet sheet, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sheet;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostUpdateWorksheetPropertyValidateBeforeCall(String name, String sheetName, Worksheet sheet, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostUpdateWorksheetProperty(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostUpdateWorksheetProperty(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostUpdateWorksheetPropertyCall(name, sheetName, sheet, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update worksheet property
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sheet  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return WorksheetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetResponse cellsWorksheetsPostUpdateWorksheetProperty(String name, String sheetName, Worksheet sheet, String folder, String storageName) throws ApiException {
        ApiResponse<WorksheetResponse> resp = cellsWorksheetsPostUpdateWorksheetPropertyWithHttpInfo(name, sheetName, sheet, folder, storageName);
        return resp.getData();
    }

    /**
     * Update worksheet property
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sheet  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;WorksheetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetResponse> cellsWorksheetsPostUpdateWorksheetPropertyWithHttpInfo(String name, String sheetName, Worksheet sheet, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostUpdateWorksheetPropertyValidateBeforeCall(name, sheetName, sheet, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update worksheet property (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sheet  (optional)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostUpdateWorksheetPropertyAsync(String name, String sheetName, Worksheet sheet, String folder, String storageName, final ApiCallback<WorksheetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostUpdateWorksheetPropertyValidateBeforeCall(name, sheetName, sheet, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostUpdateWorksheetZoom
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostUpdateWorksheetZoomCall(String name, String sheetName, Integer value, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/zoom"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "value", value));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostUpdateWorksheetZoomValidateBeforeCall(String name, String sheetName, Integer value, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostUpdateWorksheetZoom(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostUpdateWorksheetZoom(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cellsWorksheetsPostUpdateWorksheetZoom(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostUpdateWorksheetZoomCall(name, sheetName, value, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsPostUpdateWorksheetZoom(String name, String sheetName, Integer value, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsPostUpdateWorksheetZoomWithHttpInfo(name, sheetName, value, folder, storageName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsPostUpdateWorksheetZoomWithHttpInfo(String name, String sheetName, Integer value, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostUpdateWorksheetZoomValidateBeforeCall(name, sheetName, value, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostUpdateWorksheetZoomAsync(String name, String sheetName, Integer value, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostUpdateWorksheetZoomValidateBeforeCall(name, sheetName, value, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostWorksheetComment
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorksheetCommentCall(String name, String sheetName, String cellName, Comment comment, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = comment;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostWorksheetCommentValidateBeforeCall(String name, String sheetName, String cellName, Comment comment, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostWorksheetComment(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostWorksheetComment(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsWorksheetsPostWorksheetComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetCommentCall(name, sheetName, cellName, comment, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update worksheet&#39;s cell comment.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsPostWorksheetComment(String name, String sheetName, String cellName, Comment comment, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsPostWorksheetCommentWithHttpInfo(name, sheetName, cellName, comment, folder, storageName);
        return resp.getData();
    }

    /**
     * Update worksheet&#39;s cell comment.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsPostWorksheetCommentWithHttpInfo(String name, String sheetName, String cellName, Comment comment, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetCommentValidateBeforeCall(name, sheetName, cellName, comment, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update worksheet&#39;s cell comment. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorksheetCommentAsync(String name, String sheetName, String cellName, Comment comment, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetCommentValidateBeforeCall(name, sheetName, cellName, comment, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostWorksheetRangeSort
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellArea The range to sort. (required)
     * @param dataSorter with sorting settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorksheetRangeSortCall(String name, String sheetName, String cellArea, DataSorter dataSorter, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dataSorter;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/sort"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellArea != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellArea", cellArea));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostWorksheetRangeSortValidateBeforeCall(String name, String sheetName, String cellArea, DataSorter dataSorter, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostWorksheetRangeSort(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostWorksheetRangeSort(Async)");
        }
        
        // verify the required parameter 'cellArea' is set
        if (cellArea == null) {
            throw new ApiException("Missing the required parameter 'cellArea' when calling cellsWorksheetsPostWorksheetRangeSort(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetRangeSortCall(name, sheetName, cellArea, dataSorter, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sort worksheet range.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellArea The range to sort. (required)
     * @param dataSorter with sorting settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsPostWorksheetRangeSort(String name, String sheetName, String cellArea, DataSorter dataSorter, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsPostWorksheetRangeSortWithHttpInfo(name, sheetName, cellArea, dataSorter, folder, storageName);
        return resp.getData();
    }

    /**
     * Sort worksheet range.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellArea The range to sort. (required)
     * @param dataSorter with sorting settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsPostWorksheetRangeSortWithHttpInfo(String name, String sheetName, String cellArea, DataSorter dataSorter, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetRangeSortValidateBeforeCall(name, sheetName, cellArea, dataSorter, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sort worksheet range. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellArea The range to sort. (required)
     * @param dataSorter with sorting settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorksheetRangeSortAsync(String name, String sheetName, String cellArea, DataSorter dataSorter, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetRangeSortValidateBeforeCall(name, sheetName, cellArea, dataSorter, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostWorksheetTextSearch
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param text Text to search. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorksheetTextSearchCall(String name, String sheetName, String text, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/findText"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostWorksheetTextSearchValidateBeforeCall(String name, String sheetName, String text, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostWorksheetTextSearch(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostWorksheetTextSearch(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling cellsWorksheetsPostWorksheetTextSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetTextSearchCall(name, sheetName, text, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search text.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param text Text to search. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return TextItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextItemsResponse cellsWorksheetsPostWorksheetTextSearch(String name, String sheetName, String text, String folder, String storageName) throws ApiException {
        ApiResponse<TextItemsResponse> resp = cellsWorksheetsPostWorksheetTextSearchWithHttpInfo(name, sheetName, text, folder, storageName);
        return resp.getData();
    }

    /**
     * Search text.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param text Text to search. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;TextItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextItemsResponse> cellsWorksheetsPostWorksheetTextSearchWithHttpInfo(String name, String sheetName, String text, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetTextSearchValidateBeforeCall(name, sheetName, text, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search text. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param text Text to search. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorksheetTextSearchAsync(String name, String sheetName, String text, String folder, String storageName, final ApiCallback<TextItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetTextSearchValidateBeforeCall(name, sheetName, text, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostWorsheetTextReplace
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param oldValue The old text to replace. (required)
     * @param newValue The new text to replace by. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorsheetTextReplaceCall(String name, String sheetName, String oldValue, String newValue, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/replaceText"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (oldValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "oldValue", oldValue));
        if (newValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "newValue", newValue));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostWorsheetTextReplaceValidateBeforeCall(String name, String sheetName, String oldValue, String newValue, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostWorsheetTextReplace(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostWorsheetTextReplace(Async)");
        }
        
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling cellsWorksheetsPostWorsheetTextReplace(Async)");
        }
        
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling cellsWorksheetsPostWorsheetTextReplace(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorsheetTextReplaceCall(name, sheetName, oldValue, newValue, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace text.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param oldValue The old text to replace. (required)
     * @param newValue The new text to replace by. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return WorksheetReplaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetReplaceResponse cellsWorksheetsPostWorsheetTextReplace(String name, String sheetName, String oldValue, String newValue, String folder, String storageName) throws ApiException {
        ApiResponse<WorksheetReplaceResponse> resp = cellsWorksheetsPostWorsheetTextReplaceWithHttpInfo(name, sheetName, oldValue, newValue, folder, storageName);
        return resp.getData();
    }

    /**
     * Replace text.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param oldValue The old text to replace. (required)
     * @param newValue The new text to replace by. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;WorksheetReplaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetReplaceResponse> cellsWorksheetsPostWorsheetTextReplaceWithHttpInfo(String name, String sheetName, String oldValue, String newValue, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorsheetTextReplaceValidateBeforeCall(name, sheetName, oldValue, newValue, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<WorksheetReplaceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace text. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param oldValue The old text to replace. (required)
     * @param newValue The new text to replace by. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorsheetTextReplaceAsync(String name, String sheetName, String oldValue, String newValue, String folder, String storageName, final ApiCallback<WorksheetReplaceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostWorsheetTextReplaceValidateBeforeCall(name, sheetName, oldValue, newValue, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetReplaceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPutAddNewWorksheet
     * @param name Document name. (required)
     * @param sheetName The new sheet name. (required)
     * @param position The new sheet position. (optional)
     * @param sheettype The new sheet type. (optional)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutAddNewWorksheetCall(String name, String sheetName, Integer position, String sheettype, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (position != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "position", position));
        if (sheettype != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sheettype", sheettype));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPutAddNewWorksheetValidateBeforeCall(String name, String sheetName, Integer position, String sheettype, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPutAddNewWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPutAddNewWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPutAddNewWorksheetCall(name, sheetName, position, sheettype, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add new worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The new sheet name. (required)
     * @param position The new sheet position. (optional)
     * @param sheettype The new sheet type. (optional)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return WorksheetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetsResponse cellsWorksheetsPutAddNewWorksheet(String name, String sheetName, Integer position, String sheettype, String folder, String storageName) throws ApiException {
        ApiResponse<WorksheetsResponse> resp = cellsWorksheetsPutAddNewWorksheetWithHttpInfo(name, sheetName, position, sheettype, folder, storageName);
        return resp.getData();
    }

    /**
     * Add new worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The new sheet name. (required)
     * @param position The new sheet position. (optional)
     * @param sheettype The new sheet type. (optional)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;WorksheetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetsResponse> cellsWorksheetsPutAddNewWorksheetWithHttpInfo(String name, String sheetName, Integer position, String sheettype, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPutAddNewWorksheetValidateBeforeCall(name, sheetName, position, sheettype, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The new sheet name. (required)
     * @param position The new sheet position. (optional)
     * @param sheettype The new sheet type. (optional)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutAddNewWorksheetAsync(String name, String sheetName, Integer position, String sheettype, String folder, String storageName, final ApiCallback<WorksheetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPutAddNewWorksheetValidateBeforeCall(name, sheetName, position, sheettype, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPutChangeVisibilityWorksheet
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param isVisible New worksheet visibility value. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutChangeVisibilityWorksheetCall(String name, String sheetName, Boolean isVisible, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/visible"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (isVisible != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isVisible", isVisible));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPutChangeVisibilityWorksheetValidateBeforeCall(String name, String sheetName, Boolean isVisible, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPutChangeVisibilityWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPutChangeVisibilityWorksheet(Async)");
        }
        
        // verify the required parameter 'isVisible' is set
        if (isVisible == null) {
            throw new ApiException("Missing the required parameter 'isVisible' when calling cellsWorksheetsPutChangeVisibilityWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPutChangeVisibilityWorksheetCall(name, sheetName, isVisible, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change worksheet visibility.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param isVisible New worksheet visibility value. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return WorksheetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetResponse cellsWorksheetsPutChangeVisibilityWorksheet(String name, String sheetName, Boolean isVisible, String folder, String storageName) throws ApiException {
        ApiResponse<WorksheetResponse> resp = cellsWorksheetsPutChangeVisibilityWorksheetWithHttpInfo(name, sheetName, isVisible, folder, storageName);
        return resp.getData();
    }

    /**
     * Change worksheet visibility.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param isVisible New worksheet visibility value. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;WorksheetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetResponse> cellsWorksheetsPutChangeVisibilityWorksheetWithHttpInfo(String name, String sheetName, Boolean isVisible, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPutChangeVisibilityWorksheetValidateBeforeCall(name, sheetName, isVisible, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change worksheet visibility. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param isVisible New worksheet visibility value. (required)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutChangeVisibilityWorksheetAsync(String name, String sheetName, Boolean isVisible, String folder, String storageName, final ApiCallback<WorksheetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPutChangeVisibilityWorksheetValidateBeforeCall(name, sheetName, isVisible, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPutProtectWorksheet
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. (optional)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutProtectWorksheetCall(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = protectParameter;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/protection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPutProtectWorksheetValidateBeforeCall(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPutProtectWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPutProtectWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPutProtectWorksheetCall(name, sheetName, protectParameter, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Protect worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. (optional)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return WorksheetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetResponse cellsWorksheetsPutProtectWorksheet(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storageName) throws ApiException {
        ApiResponse<WorksheetResponse> resp = cellsWorksheetsPutProtectWorksheetWithHttpInfo(name, sheetName, protectParameter, folder, storageName);
        return resp.getData();
    }

    /**
     * Protect worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. (optional)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;WorksheetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetResponse> cellsWorksheetsPutProtectWorksheetWithHttpInfo(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPutProtectWorksheetValidateBeforeCall(name, sheetName, protectParameter, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Protect worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. (optional)
     * @param folder Document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutProtectWorksheetAsync(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storageName, final ApiCallback<WorksheetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPutProtectWorksheetValidateBeforeCall(name, sheetName, protectParameter, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPutWorksheetBackground
     * @param name  (required)
     * @param sheetName  (required)
     * @param png  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutWorksheetBackgroundCall(String name, String sheetName, byte[] png, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = png;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/background"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPutWorksheetBackgroundValidateBeforeCall(String name, String sheetName, byte[] png, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPutWorksheetBackground(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPutWorksheetBackground(Async)");
        }
        
        // verify the required parameter 'png' is set
        if (png == null) {
            throw new ApiException("Missing the required parameter 'png' when calling cellsWorksheetsPutWorksheetBackground(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetBackgroundCall(name, sheetName, png, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set worksheet background image.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param png  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsPutWorksheetBackground(String name, String sheetName, byte[] png, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsPutWorksheetBackgroundWithHttpInfo(name, sheetName, png, folder, storageName);
        return resp.getData();
    }

    /**
     * Set worksheet background image.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param png  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsPutWorksheetBackgroundWithHttpInfo(String name, String sheetName, byte[] png, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetBackgroundValidateBeforeCall(name, sheetName, png, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set worksheet background image. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param png  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutWorksheetBackgroundAsync(String name, String sheetName, byte[] png, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetBackgroundValidateBeforeCall(name, sheetName, png, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPutWorksheetComment
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutWorksheetCommentCall(String name, String sheetName, String cellName, Comment comment, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = comment;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPutWorksheetCommentValidateBeforeCall(String name, String sheetName, String cellName, Comment comment, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPutWorksheetComment(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPutWorksheetComment(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsWorksheetsPutWorksheetComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetCommentCall(name, sheetName, cellName, comment, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add worksheet&#39;s cell comment.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return CommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResponse cellsWorksheetsPutWorksheetComment(String name, String sheetName, String cellName, Comment comment, String folder, String storageName) throws ApiException {
        ApiResponse<CommentResponse> resp = cellsWorksheetsPutWorksheetCommentWithHttpInfo(name, sheetName, cellName, comment, folder, storageName);
        return resp.getData();
    }

    /**
     * Add worksheet&#39;s cell comment.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResponse> cellsWorksheetsPutWorksheetCommentWithHttpInfo(String name, String sheetName, String cellName, Comment comment, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetCommentValidateBeforeCall(name, sheetName, cellName, comment, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add worksheet&#39;s cell comment. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutWorksheetCommentAsync(String name, String sheetName, String cellName, Comment comment, String folder, String storageName, final ApiCallback<CommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetCommentValidateBeforeCall(name, sheetName, cellName, comment, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPutWorksheetFreezePanes
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutWorksheetFreezePanesCall(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/freezepanes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (freezedRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "freezedRows", freezedRows));
        if (freezedColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "freezedColumns", freezedColumns));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPutWorksheetFreezePanesValidateBeforeCall(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPutWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPutWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'row' is set
        if (row == null) {
            throw new ApiException("Missing the required parameter 'row' when calling cellsWorksheetsPutWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'column' is set
        if (column == null) {
            throw new ApiException("Missing the required parameter 'column' when calling cellsWorksheetsPutWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'freezedRows' is set
        if (freezedRows == null) {
            throw new ApiException("Missing the required parameter 'freezedRows' when calling cellsWorksheetsPutWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'freezedColumns' is set
        if (freezedColumns == null) {
            throw new ApiException("Missing the required parameter 'freezedColumns' when calling cellsWorksheetsPutWorksheetFreezePanes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetFreezePanesCall(name, sheetName, row, column, freezedRows, freezedColumns, folder, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set freeze panes
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return CellsCloudResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CellsCloudResponse cellsWorksheetsPutWorksheetFreezePanes(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storageName) throws ApiException {
        ApiResponse<CellsCloudResponse> resp = cellsWorksheetsPutWorksheetFreezePanesWithHttpInfo(name, sheetName, row, column, freezedRows, freezedColumns, folder, storageName);
        return resp.getData();
    }

    /**
     * Set freeze panes
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @return ApiResponse&lt;CellsCloudResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CellsCloudResponse> cellsWorksheetsPutWorksheetFreezePanesWithHttpInfo(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetFreezePanesValidateBeforeCall(name, sheetName, row, column, freezedRows, freezedColumns, folder, storageName, null, null);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set freeze panes (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storageName storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutWorksheetFreezePanesAsync(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storageName, final ApiCallback<CellsCloudResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetFreezePanesValidateBeforeCall(name, sheetName, row, column, freezedRows, freezedColumns, folder, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CellsCloudResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for copyFile
     * @param srcPath Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to copy (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyFileCall(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/file/copy/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.escapeString(srcPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (destPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destPath", destPath));
        if (srcStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "srcStorageName", srcStorageName));
        if (destStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destStorageName", destStorageName));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "versionId", versionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call copyFileValidateBeforeCall(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling copyFile(Async)");
        }
        
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling copyFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = copyFileCall(srcPath, destPath, srcStorageName, destStorageName, versionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Copy file
     * 
     * @param srcPath Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to copy (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void copyFile(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        copyFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
    }

    /**
     * Copy file
     * 
     * @param srcPath Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to copy (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> copyFileWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = copyFileValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, versionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Copy file (asynchronously)
     * 
     * @param srcPath Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to copy (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyFileAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyFileValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, versionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for copyFolder
     * @param srcPath Source folder path e.g. &#39;/src&#39; (required)
     * @param destPath Destination folder path e.g. &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyFolderCall(String srcPath, String destPath, String srcStorageName, String destStorageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/folder/copy/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.escapeString(srcPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (destPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destPath", destPath));
        if (srcStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "srcStorageName", srcStorageName));
        if (destStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destStorageName", destStorageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call copyFolderValidateBeforeCall(String srcPath, String destPath, String srcStorageName, String destStorageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling copyFolder(Async)");
        }
        
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling copyFolder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = copyFolderCall(srcPath, destPath, srcStorageName, destStorageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Copy folder
     * 
     * @param srcPath Source folder path e.g. &#39;/src&#39; (required)
     * @param destPath Destination folder path e.g. &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void copyFolder(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        copyFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
    }

    /**
     * Copy folder
     * 
     * @param srcPath Source folder path e.g. &#39;/src&#39; (required)
     * @param destPath Destination folder path e.g. &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> copyFolderWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        com.squareup.okhttp.Call call = copyFolderValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Copy folder (asynchronously)
     * 
     * @param srcPath Source folder path e.g. &#39;/src&#39; (required)
     * @param destPath Destination folder path e.g. &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyFolderAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyFolderValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createFolder
     * @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param storageName Storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFolderCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/folder/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFolderValidateBeforeCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling createFolder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createFolderCall(path, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create the folder
     * 
     * @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param storageName Storage name (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createFolder(String path, String storageName) throws ApiException {
        createFolderWithHttpInfo(path, storageName);
    }

    /**
     * Create the folder
     * 
     * @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param storageName Storage name (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createFolderWithHttpInfo(String path, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = createFolderValidateBeforeCall(path, storageName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create the folder (asynchronously)
     * 
     * @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param storageName Storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFolderAsync(String path, String storageName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFolderValidateBeforeCall(path, storageName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFile
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to delete (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFileCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/file/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "versionId", versionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFileValidateBeforeCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling deleteFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteFileCall(path, storageName, versionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete file
     * 
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to delete (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFile(String path, String storageName, String versionId) throws ApiException {
        deleteFileWithHttpInfo(path, storageName, versionId);
    }

    /**
     * Delete file
     * 
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to delete (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFileWithHttpInfo(String path, String storageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFileValidateBeforeCall(path, storageName, versionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete file (asynchronously)
     * 
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to delete (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFileAsync(String path, String storageName, String versionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFileValidateBeforeCall(path, storageName, versionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFolder
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param recursive Enable to delete folders, subfolders and files (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFolderCall(String path, String storageName, Boolean recursive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/folder/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));
        if (recursive != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "recursive", recursive));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFolderValidateBeforeCall(String path, String storageName, Boolean recursive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling deleteFolder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteFolderCall(path, storageName, recursive, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete folder
     * 
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param recursive Enable to delete folders, subfolders and files (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFolder(String path, String storageName, Boolean recursive) throws ApiException {
        deleteFolderWithHttpInfo(path, storageName, recursive);
    }

    /**
     * Delete folder
     * 
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param recursive Enable to delete folders, subfolders and files (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFolderWithHttpInfo(String path, String storageName, Boolean recursive) throws ApiException {
        com.squareup.okhttp.Call call = deleteFolderValidateBeforeCall(path, storageName, recursive, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete folder (asynchronously)
     * 
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param recursive Enable to delete folders, subfolders and files (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFolderAsync(String path, String storageName, Boolean recursive, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFolderValidateBeforeCall(path, storageName, recursive, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for downloadFile
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to download (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadFileCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/file/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "versionId", versionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadFileValidateBeforeCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling downloadFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = downloadFileCall(path, storageName, versionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Download file
     * 
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to download (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadFile(String path, String storageName, String versionId) throws ApiException {
        ApiResponse<File> resp = downloadFileWithHttpInfo(path, storageName, versionId);
        return resp.getData();
    }

    /**
     * Download file
     * 
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to download (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadFileWithHttpInfo(String path, String storageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(path, storageName, versionId, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Download file (asynchronously)
     * 
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to download (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadFileAsync(String path, String storageName, String versionId, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(path, storageName, versionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiscUsage
     * @param storageName Storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscUsageCall(String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/disc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiscUsageValidateBeforeCall(String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getDiscUsageCall(storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get disc usage
     * 
     * @param storageName Storage name (optional)
     * @return DiscUsage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiscUsage getDiscUsage(String storageName) throws ApiException {
        ApiResponse<DiscUsage> resp = getDiscUsageWithHttpInfo(storageName);
        return resp.getData();
    }

    /**
     * Get disc usage
     * 
     * @param storageName Storage name (optional)
     * @return ApiResponse&lt;DiscUsage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiscUsage> getDiscUsageWithHttpInfo(String storageName) throws ApiException {
        com.squareup.okhttp.Call call = getDiscUsageValidateBeforeCall(storageName, null, null);
        Type localVarReturnType = new TypeToken<DiscUsage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get disc usage (asynchronously)
     * 
     * @param storageName Storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscUsageAsync(String storageName, final ApiCallback<DiscUsage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscUsageValidateBeforeCall(storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiscUsage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileVersions
     * @param path File path e.g. &#39;/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileVersionsCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/version/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileVersionsValidateBeforeCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getFileVersions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getFileVersionsCall(path, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get file versions
     * 
     * @param path File path e.g. &#39;/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @return FileVersions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileVersions getFileVersions(String path, String storageName) throws ApiException {
        ApiResponse<FileVersions> resp = getFileVersionsWithHttpInfo(path, storageName);
        return resp.getData();
    }

    /**
     * Get file versions
     * 
     * @param path File path e.g. &#39;/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @return ApiResponse&lt;FileVersions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileVersions> getFileVersionsWithHttpInfo(String path, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = getFileVersionsValidateBeforeCall(path, storageName, null, null);
        Type localVarReturnType = new TypeToken<FileVersions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get file versions (asynchronously)
     * 
     * @param path File path e.g. &#39;/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileVersionsAsync(String path, String storageName, final ApiCallback<FileVersions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileVersionsValidateBeforeCall(path, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileVersions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFilesList
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilesListCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/folder/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFilesListValidateBeforeCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getFilesList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getFilesListCall(path, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all files and folders within a folder
     * 
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @return FilesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FilesList getFilesList(String path, String storageName) throws ApiException {
        ApiResponse<FilesList> resp = getFilesListWithHttpInfo(path, storageName);
        return resp.getData();
    }

    /**
     * Get all files and folders within a folder
     * 
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @return ApiResponse&lt;FilesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FilesList> getFilesListWithHttpInfo(String path, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = getFilesListValidateBeforeCall(path, storageName, null, null);
        Type localVarReturnType = new TypeToken<FilesList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all files and folders within a folder (asynchronously)
     * 
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilesListAsync(String path, String storageName, final ApiCallback<FilesList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilesListValidateBeforeCall(path, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FilesList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for moveFile
     * @param srcPath Source file path e.g. &#39;/src.ext&#39; (required)
     * @param destPath Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to move (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveFileCall(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/file/move/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.escapeString(srcPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (destPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destPath", destPath));
        if (srcStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "srcStorageName", srcStorageName));
        if (destStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destStorageName", destStorageName));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "versionId", versionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveFileValidateBeforeCall(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling moveFile(Async)");
        }
        
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling moveFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = moveFileCall(srcPath, destPath, srcStorageName, destStorageName, versionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move file
     * 
     * @param srcPath Source file path e.g. &#39;/src.ext&#39; (required)
     * @param destPath Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to move (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void moveFile(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        moveFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
    }

    /**
     * Move file
     * 
     * @param srcPath Source file path e.g. &#39;/src.ext&#39; (required)
     * @param destPath Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to move (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> moveFileWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = moveFileValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, versionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Move file (asynchronously)
     * 
     * @param srcPath Source file path e.g. &#39;/src.ext&#39; (required)
     * @param destPath Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to move (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveFileAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveFileValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, versionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for moveFolder
     * @param srcPath Folder path to move e.g. &#39;/folder&#39; (required)
     * @param destPath Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveFolderCall(String srcPath, String destPath, String srcStorageName, String destStorageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/folder/move/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.escapeString(srcPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (destPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destPath", destPath));
        if (srcStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "srcStorageName", srcStorageName));
        if (destStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destStorageName", destStorageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveFolderValidateBeforeCall(String srcPath, String destPath, String srcStorageName, String destStorageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling moveFolder(Async)");
        }
        
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling moveFolder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = moveFolderCall(srcPath, destPath, srcStorageName, destStorageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move folder
     * 
     * @param srcPath Folder path to move e.g. &#39;/folder&#39; (required)
     * @param destPath Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void moveFolder(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        moveFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
    }

    /**
     * Move folder
     * 
     * @param srcPath Folder path to move e.g. &#39;/folder&#39; (required)
     * @param destPath Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> moveFolderWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        com.squareup.okhttp.Call call = moveFolderValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Move folder (asynchronously)
     * 
     * @param srcPath Folder path to move e.g. &#39;/folder&#39; (required)
     * @param destPath Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveFolderAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveFolderValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for oAuthPost
     * @param grantType Grant Type (required)
     * @param clientId App SID (required)
     * @param clientSecret App Key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call oAuthPostCall(String grantType, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/connect/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (grantType != null)
        localVarFormParams.put("grant_type", grantType);
        if (clientId != null)
        localVarFormParams.put("client_id", clientId);
        if (clientSecret != null)
        localVarFormParams.put("client_secret", clientSecret);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oAuthPostValidateBeforeCall(String grantType, String clientId, String clientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling oAuthPost(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling oAuthPost(Async)");
        }
        
        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling oAuthPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = oAuthPostCall(grantType, clientId, clientSecret, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Access token
     * 
     * @param grantType Grant Type (required)
     * @param clientId App SID (required)
     * @param clientSecret App Key (required)
     * @return AccessTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccessTokenResponse oAuthPost(String grantType, String clientId, String clientSecret) throws ApiException {
        ApiResponse<AccessTokenResponse> resp = oAuthPostWithHttpInfo(grantType, clientId, clientSecret);
        return resp.getData();
    }

    /**
     * Get Access token
     * 
     * @param grantType Grant Type (required)
     * @param clientId App SID (required)
     * @param clientSecret App Key (required)
     * @return ApiResponse&lt;AccessTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccessTokenResponse> oAuthPostWithHttpInfo(String grantType, String clientId, String clientSecret) throws ApiException {
        com.squareup.okhttp.Call call = oAuthPostValidateBeforeCall(grantType, clientId, clientSecret, null, null);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Access token (asynchronously)
     * 
     * @param grantType Grant Type (required)
     * @param clientId App SID (required)
     * @param clientSecret App Key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oAuthPostAsync(String grantType, String clientId, String clientSecret, final ApiCallback<AccessTokenResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oAuthPostValidateBeforeCall(grantType, clientId, clientSecret, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for objectExists
     * @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call objectExistsCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/exist/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "versionId", versionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call objectExistsValidateBeforeCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling objectExists(Async)");
        }
        
        
        com.squareup.okhttp.Call call = objectExistsCall(path, storageName, versionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check if file or folder exists
     * 
     * @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID (optional)
     * @return ObjectExist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectExist objectExists(String path, String storageName, String versionId) throws ApiException {
        ApiResponse<ObjectExist> resp = objectExistsWithHttpInfo(path, storageName, versionId);
        return resp.getData();
    }

    /**
     * Check if file or folder exists
     * 
     * @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID (optional)
     * @return ApiResponse&lt;ObjectExist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectExist> objectExistsWithHttpInfo(String path, String storageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = objectExistsValidateBeforeCall(path, storageName, versionId, null, null);
        Type localVarReturnType = new TypeToken<ObjectExist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check if file or folder exists (asynchronously)
     * 
     * @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call objectExistsAsync(String path, String storageName, String versionId, final ApiCallback<ObjectExist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = objectExistsValidateBeforeCall(path, storageName, versionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectExist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for storageExists
     * @param storageName Storage name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storageExistsCall(String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/{storageName}/exist"
            .replaceAll("\\{" + "storageName" + "\\}", apiClient.escapeString(storageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call storageExistsValidateBeforeCall(String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storageName' is set
        if (storageName == null) {
            throw new ApiException("Missing the required parameter 'storageName' when calling storageExists(Async)");
        }
        
        
        com.squareup.okhttp.Call call = storageExistsCall(storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check if storage exists
     * 
     * @param storageName Storage name (required)
     * @return StorageExist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageExist storageExists(String storageName) throws ApiException {
        ApiResponse<StorageExist> resp = storageExistsWithHttpInfo(storageName);
        return resp.getData();
    }

    /**
     * Check if storage exists
     * 
     * @param storageName Storage name (required)
     * @return ApiResponse&lt;StorageExist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageExist> storageExistsWithHttpInfo(String storageName) throws ApiException {
        com.squareup.okhttp.Call call = storageExistsValidateBeforeCall(storageName, null, null);
        Type localVarReturnType = new TypeToken<StorageExist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check if storage exists (asynchronously)
     * 
     * @param storageName Storage name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storageExistsAsync(String storageName, final ApiCallback<StorageExist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storageExistsValidateBeforeCall(storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageExist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadFile
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              (required)
     * @param file File to upload (required)
     * @param storageName Storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadFileCall(String path, File file, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/storage/file/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("File", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadFileValidateBeforeCall(String path, File file, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling uploadFile(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = uploadFileCall(path, file, storageName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload file
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              (required)
     * @param file File to upload (required)
     * @param storageName Storage name (optional)
     * @return FilesUploadResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FilesUploadResult uploadFile(String path, File file, String storageName) throws ApiException {
        ApiResponse<FilesUploadResult> resp = uploadFileWithHttpInfo(path, file, storageName);
        return resp.getData();
    }

    /**
     * Upload file
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              (required)
     * @param file File to upload (required)
     * @param storageName Storage name (optional)
     * @return ApiResponse&lt;FilesUploadResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FilesUploadResult> uploadFileWithHttpInfo(String path, File file, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = uploadFileValidateBeforeCall(path, file, storageName, null, null);
        Type localVarReturnType = new TypeToken<FilesUploadResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload file (asynchronously)
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              (required)
     * @param file File to upload (required)
     * @param storageName Storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadFileAsync(String path, File file, String storageName, final ApiCallback<FilesUploadResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadFileValidateBeforeCall(path, file, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FilesUploadResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
