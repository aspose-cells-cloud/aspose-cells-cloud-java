/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.ChartAreaResponse;
import com.aspose.cloud.cells.model.FillFormatResponse;
import com.aspose.cloud.cells.model.LineResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsChartAreaApi {
    private ApiClient apiClient;

    public CellsChartAreaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsChartAreaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsChartAreaGetChartArea
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartAreaGetChartAreaCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartAreaGetChartAreaValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartAreaGetChartArea(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartAreaGetChartArea(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartAreaGetChartArea(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chart area info.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ChartAreaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChartAreaResponse cellsChartAreaGetChartArea(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        ApiResponse<ChartAreaResponse> resp = cellsChartAreaGetChartAreaWithHttpInfo(name, sheetName, chartIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Get chart area info.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ChartAreaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChartAreaResponse> cellsChartAreaGetChartAreaWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaValidateBeforeCall(name, sheetName, chartIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ChartAreaResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chart area info. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartAreaGetChartAreaAsync(String name, String sheetName, Integer chartIndex, String folder, String storage, final ApiCallback<ChartAreaResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaValidateBeforeCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChartAreaResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartAreaGetChartAreaBorder
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartAreaGetChartAreaBorderCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/border"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartAreaGetChartAreaBorderValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartAreaGetChartAreaBorder(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartAreaGetChartAreaBorder(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartAreaGetChartAreaBorder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaBorderCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chart area border info.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return LineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineResponse cellsChartAreaGetChartAreaBorder(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        ApiResponse<LineResponse> resp = cellsChartAreaGetChartAreaBorderWithHttpInfo(name, sheetName, chartIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Get chart area border info.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;LineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineResponse> cellsChartAreaGetChartAreaBorderWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaBorderValidateBeforeCall(name, sheetName, chartIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<LineResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chart area border info. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartAreaGetChartAreaBorderAsync(String name, String sheetName, Integer chartIndex, String folder, String storage, final ApiCallback<LineResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaBorderValidateBeforeCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartAreaGetChartAreaFillFormat
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartAreaGetChartAreaFillFormatCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/fillFormat"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartAreaGetChartAreaFillFormatValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartAreaGetChartAreaFillFormat(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartAreaGetChartAreaFillFormat(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartAreaGetChartAreaFillFormat(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaFillFormatCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chart area fill format info.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return FillFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FillFormatResponse cellsChartAreaGetChartAreaFillFormat(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        ApiResponse<FillFormatResponse> resp = cellsChartAreaGetChartAreaFillFormatWithHttpInfo(name, sheetName, chartIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Get chart area fill format info.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;FillFormatResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FillFormatResponse> cellsChartAreaGetChartAreaFillFormatWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaFillFormatValidateBeforeCall(name, sheetName, chartIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<FillFormatResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chart area fill format info. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartAreaGetChartAreaFillFormatAsync(String name, String sheetName, Integer chartIndex, String folder, String storage, final ApiCallback<FillFormatResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartAreaGetChartAreaFillFormatValidateBeforeCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FillFormatResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
