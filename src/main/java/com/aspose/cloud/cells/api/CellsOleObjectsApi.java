/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.aspose.cloud.cells.model.OleObject;
import com.aspose.cloud.cells.model.OleObjectResponse;
import com.aspose.cloud.cells.model.OleObjectsResponse;
import com.aspose.cloud.cells.model.SaaSposeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsOleObjectsApi {
    private ApiClient apiClient;

    public CellsOleObjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsOleObjectsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsOleObjectsDeleteWorksheetOleObject
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsDeleteWorksheetOleObjectCall(String name, String sheetName, Integer oleObjectIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "oleObjectIndex" + "\\}", apiClient.escapeString(oleObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsOleObjectsDeleteWorksheetOleObjectValidateBeforeCall(String name, String sheetName, Integer oleObjectIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsOleObjectsDeleteWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsOleObjectsDeleteWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'oleObjectIndex' is set
        if (oleObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'oleObjectIndex' when calling cellsOleObjectsDeleteWorksheetOleObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsOleObjectsDeleteWorksheetOleObjectCall(name, sheetName, oleObjectIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete OLE object.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsOleObjectsDeleteWorksheetOleObject(String name, String sheetName, Integer oleObjectIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsOleObjectsDeleteWorksheetOleObjectWithHttpInfo(name, sheetName, oleObjectIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Delete OLE object.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsOleObjectsDeleteWorksheetOleObjectWithHttpInfo(String name, String sheetName, Integer oleObjectIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsOleObjectsDeleteWorksheetOleObjectValidateBeforeCall(name, sheetName, oleObjectIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete OLE object. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsDeleteWorksheetOleObjectAsync(String name, String sheetName, Integer oleObjectIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsOleObjectsDeleteWorksheetOleObjectValidateBeforeCall(name, sheetName, oleObjectIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsOleObjectsDeleteWorksheetOleObjects
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsDeleteWorksheetOleObjectsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsOleObjectsDeleteWorksheetOleObjectsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsOleObjectsDeleteWorksheetOleObjects(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsOleObjectsDeleteWorksheetOleObjects(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsOleObjectsDeleteWorksheetOleObjectsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete all OLE objects.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsOleObjectsDeleteWorksheetOleObjects(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsOleObjectsDeleteWorksheetOleObjectsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Delete all OLE objects.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsOleObjectsDeleteWorksheetOleObjectsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsOleObjectsDeleteWorksheetOleObjectsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all OLE objects. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsDeleteWorksheetOleObjectsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsOleObjectsDeleteWorksheetOleObjectsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsOleObjectsGetWorksheetOleObject
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param objectNumber The object number. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsGetWorksheetOleObjectCall(String name, String sheetName, Integer objectNumber, String format, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{objectNumber}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "objectNumber" + "\\}", apiClient.escapeString(objectNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsOleObjectsGetWorksheetOleObjectValidateBeforeCall(String name, String sheetName, Integer objectNumber, String format, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsOleObjectsGetWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsOleObjectsGetWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'objectNumber' is set
        if (objectNumber == null) {
            throw new ApiException("Missing the required parameter 'objectNumber' when calling cellsOleObjectsGetWorksheetOleObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsOleObjectsGetWorksheetOleObjectCall(name, sheetName, objectNumber, format, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get OLE object info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param objectNumber The object number. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsOleObjectsGetWorksheetOleObject(String name, String sheetName, Integer objectNumber, String format, String folder, String storage) throws ApiException {
        ApiResponse<File> resp = cellsOleObjectsGetWorksheetOleObjectWithHttpInfo(name, sheetName, objectNumber, format, folder, storage);
        return resp.getData();
    }

    /**
     * Get OLE object info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param objectNumber The object number. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsOleObjectsGetWorksheetOleObjectWithHttpInfo(String name, String sheetName, Integer objectNumber, String format, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsOleObjectsGetWorksheetOleObjectValidateBeforeCall(name, sheetName, objectNumber, format, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get OLE object info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param objectNumber The object number. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsGetWorksheetOleObjectAsync(String name, String sheetName, Integer objectNumber, String format, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsOleObjectsGetWorksheetOleObjectValidateBeforeCall(name, sheetName, objectNumber, format, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsOleObjectsGetWorksheetOleObjects
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsGetWorksheetOleObjectsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsOleObjectsGetWorksheetOleObjectsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsOleObjectsGetWorksheetOleObjects(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsOleObjectsGetWorksheetOleObjects(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsOleObjectsGetWorksheetOleObjectsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet OLE objects info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return OleObjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OleObjectsResponse cellsOleObjectsGetWorksheetOleObjects(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<OleObjectsResponse> resp = cellsOleObjectsGetWorksheetOleObjectsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet OLE objects info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;OleObjectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OleObjectsResponse> cellsOleObjectsGetWorksheetOleObjectsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsOleObjectsGetWorksheetOleObjectsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<OleObjectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet OLE objects info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsGetWorksheetOleObjectsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<OleObjectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsOleObjectsGetWorksheetOleObjectsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OleObjectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsOleObjectsPostUpdateWorksheetOleObject
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param ole Ole Object (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsPostUpdateWorksheetOleObjectCall(String name, String sheetName, Integer oleObjectIndex, OleObject ole, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ole;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "oleObjectIndex" + "\\}", apiClient.escapeString(oleObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsOleObjectsPostUpdateWorksheetOleObjectValidateBeforeCall(String name, String sheetName, Integer oleObjectIndex, OleObject ole, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsOleObjectsPostUpdateWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsOleObjectsPostUpdateWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'oleObjectIndex' is set
        if (oleObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'oleObjectIndex' when calling cellsOleObjectsPostUpdateWorksheetOleObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsOleObjectsPostUpdateWorksheetOleObjectCall(name, sheetName, oleObjectIndex, ole, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update OLE object.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param ole Ole Object (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsOleObjectsPostUpdateWorksheetOleObject(String name, String sheetName, Integer oleObjectIndex, OleObject ole, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsOleObjectsPostUpdateWorksheetOleObjectWithHttpInfo(name, sheetName, oleObjectIndex, ole, folder, storage);
        return resp.getData();
    }

    /**
     * Update OLE object.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param ole Ole Object (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsOleObjectsPostUpdateWorksheetOleObjectWithHttpInfo(String name, String sheetName, Integer oleObjectIndex, OleObject ole, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsOleObjectsPostUpdateWorksheetOleObjectValidateBeforeCall(name, sheetName, oleObjectIndex, ole, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update OLE object. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObjectIndex Ole object index (required)
     * @param ole Ole Object (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsPostUpdateWorksheetOleObjectAsync(String name, String sheetName, Integer oleObjectIndex, OleObject ole, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsOleObjectsPostUpdateWorksheetOleObjectValidateBeforeCall(name, sheetName, oleObjectIndex, ole, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsOleObjectsPutWorksheetOleObject
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObject Ole Object (optional)
     * @param upperLeftRow Upper left row index (optional, default to 0)
     * @param upperLeftColumn Upper left column index (optional, default to 0)
     * @param height Height of oleObject, in unit of pixel (optional, default to 0)
     * @param width Width of oleObject, in unit of pixel (optional, default to 0)
     * @param oleFile OLE filename (optional)
     * @param imageFile Image filename (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsPutWorksheetOleObjectCall(String name, String sheetName, OleObject oleObject, Integer upperLeftRow, Integer upperLeftColumn, Integer height, Integer width, String oleFile, String imageFile, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = oleObject;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/oleobjects"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (upperLeftRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftRow", upperLeftRow));
        if (upperLeftColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftColumn", upperLeftColumn));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (oleFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "oleFile", oleFile));
        if (imageFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "imageFile", imageFile));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsOleObjectsPutWorksheetOleObjectValidateBeforeCall(String name, String sheetName, OleObject oleObject, Integer upperLeftRow, Integer upperLeftColumn, Integer height, Integer width, String oleFile, String imageFile, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsOleObjectsPutWorksheetOleObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsOleObjectsPutWorksheetOleObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsOleObjectsPutWorksheetOleObjectCall(name, sheetName, oleObject, upperLeftRow, upperLeftColumn, height, width, oleFile, imageFile, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add OLE object
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObject Ole Object (optional)
     * @param upperLeftRow Upper left row index (optional, default to 0)
     * @param upperLeftColumn Upper left column index (optional, default to 0)
     * @param height Height of oleObject, in unit of pixel (optional, default to 0)
     * @param width Width of oleObject, in unit of pixel (optional, default to 0)
     * @param oleFile OLE filename (optional)
     * @param imageFile Image filename (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return OleObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OleObjectResponse cellsOleObjectsPutWorksheetOleObject(String name, String sheetName, OleObject oleObject, Integer upperLeftRow, Integer upperLeftColumn, Integer height, Integer width, String oleFile, String imageFile, String folder, String storage) throws ApiException {
        ApiResponse<OleObjectResponse> resp = cellsOleObjectsPutWorksheetOleObjectWithHttpInfo(name, sheetName, oleObject, upperLeftRow, upperLeftColumn, height, width, oleFile, imageFile, folder, storage);
        return resp.getData();
    }

    /**
     * Add OLE object
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObject Ole Object (optional)
     * @param upperLeftRow Upper left row index (optional, default to 0)
     * @param upperLeftColumn Upper left column index (optional, default to 0)
     * @param height Height of oleObject, in unit of pixel (optional, default to 0)
     * @param width Width of oleObject, in unit of pixel (optional, default to 0)
     * @param oleFile OLE filename (optional)
     * @param imageFile Image filename (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;OleObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OleObjectResponse> cellsOleObjectsPutWorksheetOleObjectWithHttpInfo(String name, String sheetName, OleObject oleObject, Integer upperLeftRow, Integer upperLeftColumn, Integer height, Integer width, String oleFile, String imageFile, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsOleObjectsPutWorksheetOleObjectValidateBeforeCall(name, sheetName, oleObject, upperLeftRow, upperLeftColumn, height, width, oleFile, imageFile, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<OleObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add OLE object (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param oleObject Ole Object (optional)
     * @param upperLeftRow Upper left row index (optional, default to 0)
     * @param upperLeftColumn Upper left column index (optional, default to 0)
     * @param height Height of oleObject, in unit of pixel (optional, default to 0)
     * @param width Width of oleObject, in unit of pixel (optional, default to 0)
     * @param oleFile OLE filename (optional)
     * @param imageFile Image filename (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsOleObjectsPutWorksheetOleObjectAsync(String name, String sheetName, OleObject oleObject, Integer upperLeftRow, Integer upperLeftColumn, Integer height, Integer width, String oleFile, String imageFile, String folder, String storage, final ApiCallback<OleObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsOleObjectsPutWorksheetOleObjectValidateBeforeCall(name, sheetName, oleObject, upperLeftRow, upperLeftColumn, height, width, oleFile, imageFile, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OleObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
