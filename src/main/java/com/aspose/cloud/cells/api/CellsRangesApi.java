/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.Range;
import com.aspose.cloud.cells.model.RangeCopyRequest;
import com.aspose.cloud.cells.model.RangeSetOutlineBorderRequest;
import com.aspose.cloud.cells.model.RangeSetStyleRequest;
import com.aspose.cloud.cells.model.RangeValueResponse;
import com.aspose.cloud.cells.model.SaaSposeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsRangesApi {
    private ApiClient apiClient;

    public CellsRangesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsRangesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsRangesGetWorksheetCellsRangeValue
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param firstRow the first row of the range (optional)
     * @param firstColumn the first column of the range (optional)
     * @param rowCount the count of rows in the range (optional)
     * @param columnCount the count of columns in the range (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesGetWorksheetCellsRangeValueCall(String name, String sheetName, String namerange, Integer firstRow, Integer firstColumn, Integer rowCount, Integer columnCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/value"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (namerange != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "namerange", namerange));
        if (firstRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstRow", firstRow));
        if (firstColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstColumn", firstColumn));
        if (rowCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "rowCount", rowCount));
        if (columnCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "columnCount", columnCount));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesGetWorksheetCellsRangeValueValidateBeforeCall(String name, String sheetName, String namerange, Integer firstRow, Integer firstColumn, Integer rowCount, Integer columnCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesGetWorksheetCellsRangeValue(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesGetWorksheetCellsRangeValue(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesGetWorksheetCellsRangeValueCall(name, sheetName, namerange, firstRow, firstColumn, rowCount, columnCount, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get cells list in a range by range name or row column indexes  
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param firstRow the first row of the range (optional)
     * @param firstColumn the first column of the range (optional)
     * @param rowCount the count of rows in the range (optional)
     * @param columnCount the count of columns in the range (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return RangeValueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RangeValueResponse cellsRangesGetWorksheetCellsRangeValue(String name, String sheetName, String namerange, Integer firstRow, Integer firstColumn, Integer rowCount, Integer columnCount, String folder, String storage) throws ApiException {
        ApiResponse<RangeValueResponse> resp = cellsRangesGetWorksheetCellsRangeValueWithHttpInfo(name, sheetName, namerange, firstRow, firstColumn, rowCount, columnCount, folder, storage);
        return resp.getData();
    }

    /**
     * Get cells list in a range by range name or row column indexes  
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param firstRow the first row of the range (optional)
     * @param firstColumn the first column of the range (optional)
     * @param rowCount the count of rows in the range (optional)
     * @param columnCount the count of columns in the range (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;RangeValueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RangeValueResponse> cellsRangesGetWorksheetCellsRangeValueWithHttpInfo(String name, String sheetName, String namerange, Integer firstRow, Integer firstColumn, Integer rowCount, Integer columnCount, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesGetWorksheetCellsRangeValueValidateBeforeCall(name, sheetName, namerange, firstRow, firstColumn, rowCount, columnCount, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<RangeValueResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cells list in a range by range name or row column indexes   (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param namerange range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     * @param firstRow the first row of the range (optional)
     * @param firstColumn the first column of the range (optional)
     * @param rowCount the count of rows in the range (optional)
     * @param columnCount the count of columns in the range (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesGetWorksheetCellsRangeValueAsync(String name, String sheetName, String namerange, Integer firstRow, Integer firstColumn, Integer rowCount, Integer columnCount, String folder, String storage, final ApiCallback<RangeValueResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesGetWorksheetCellsRangeValueValidateBeforeCall(name, sheetName, namerange, firstRow, firstColumn, rowCount, columnCount, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RangeValueResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeColumnWidth
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeColumnWidthCall(String name, String sheetName, Double value, Range range, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = range;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/columnWidth"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "value", value));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeColumnWidthValidateBeforeCall(String name, String sheetName, Double value, Range range, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeColumnWidth(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeColumnWidth(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cellsRangesPostWorksheetCellsRangeColumnWidth(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeColumnWidthCall(name, sheetName, value, range, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set column width of range
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsRangesPostWorksheetCellsRangeColumnWidth(String name, String sheetName, Double value, Range range, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo(name, sheetName, value, range, folder, storage);
        return resp.getData();
    }

    /**
     * Set column width of range
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsRangesPostWorksheetCellsRangeColumnWidthWithHttpInfo(String name, String sheetName, Double value, Range range, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeColumnWidthValidateBeforeCall(name, sheetName, value, range, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set column width of range (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeColumnWidthAsync(String name, String sheetName, Double value, Range range, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeColumnWidthValidateBeforeCall(name, sheetName, value, range, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeMerge
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeMergeCall(String name, String sheetName, Range range, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = range;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/merge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeMergeValidateBeforeCall(String name, String sheetName, Range range, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeMerge(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeMerge(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeMergeCall(name, sheetName, range, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Combines a range of cells into a single cell.              
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsRangesPostWorksheetCellsRangeMerge(String name, String sheetName, Range range, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsRangesPostWorksheetCellsRangeMergeWithHttpInfo(name, sheetName, range, folder, storage);
        return resp.getData();
    }

    /**
     * Combines a range of cells into a single cell.              
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsRangesPostWorksheetCellsRangeMergeWithHttpInfo(String name, String sheetName, Range range, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeMergeValidateBeforeCall(name, sheetName, range, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Combines a range of cells into a single cell.               (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeMergeAsync(String name, String sheetName, Range range, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeMergeValidateBeforeCall(name, sheetName, range, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeMoveTo
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param destRow The start row of the dest range. (required)
     * @param destColumn The start column of the dest range. (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeMoveToCall(String name, String sheetName, Integer destRow, Integer destColumn, Range range, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = range;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/moveto"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (destRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destRow", destRow));
        if (destColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destColumn", destColumn));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeMoveToValidateBeforeCall(String name, String sheetName, Integer destRow, Integer destColumn, Range range, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeMoveTo(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeMoveTo(Async)");
        }
        
        // verify the required parameter 'destRow' is set
        if (destRow == null) {
            throw new ApiException("Missing the required parameter 'destRow' when calling cellsRangesPostWorksheetCellsRangeMoveTo(Async)");
        }
        
        // verify the required parameter 'destColumn' is set
        if (destColumn == null) {
            throw new ApiException("Missing the required parameter 'destColumn' when calling cellsRangesPostWorksheetCellsRangeMoveTo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeMoveToCall(name, sheetName, destRow, destColumn, range, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move the current range to the dest range.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param destRow The start row of the dest range. (required)
     * @param destColumn The start column of the dest range. (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsRangesPostWorksheetCellsRangeMoveTo(String name, String sheetName, Integer destRow, Integer destColumn, Range range, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo(name, sheetName, destRow, destColumn, range, folder, storage);
        return resp.getData();
    }

    /**
     * Move the current range to the dest range.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param destRow The start row of the dest range. (required)
     * @param destColumn The start column of the dest range. (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsRangesPostWorksheetCellsRangeMoveToWithHttpInfo(String name, String sheetName, Integer destRow, Integer destColumn, Range range, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeMoveToValidateBeforeCall(name, sheetName, destRow, destColumn, range, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move the current range to the dest range.              (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param destRow The start row of the dest range. (required)
     * @param destColumn The start column of the dest range. (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeMoveToAsync(String name, String sheetName, Integer destRow, Integer destColumn, Range range, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeMoveToValidateBeforeCall(name, sheetName, destRow, destColumn, range, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeOutlineBorder
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set OutlineBorder Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeOutlineBorderCall(String name, String sheetName, RangeSetOutlineBorderRequest rangeOperate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = rangeOperate;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/outlineBorder"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeOutlineBorderValidateBeforeCall(String name, String sheetName, RangeSetOutlineBorderRequest rangeOperate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeOutlineBorder(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeOutlineBorder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeOutlineBorderCall(name, sheetName, rangeOperate, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sets outline border around a range of cells.
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set OutlineBorder Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsRangesPostWorksheetCellsRangeOutlineBorder(String name, String sheetName, RangeSetOutlineBorderRequest rangeOperate, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo(name, sheetName, rangeOperate, folder, storage);
        return resp.getData();
    }

    /**
     * Sets outline border around a range of cells.
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set OutlineBorder Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsRangesPostWorksheetCellsRangeOutlineBorderWithHttpInfo(String name, String sheetName, RangeSetOutlineBorderRequest rangeOperate, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeOutlineBorderValidateBeforeCall(name, sheetName, rangeOperate, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets outline border around a range of cells. (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set OutlineBorder Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeOutlineBorderAsync(String name, String sheetName, RangeSetOutlineBorderRequest rangeOperate, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeOutlineBorderValidateBeforeCall(name, sheetName, rangeOperate, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeRowHeight
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeRowHeightCall(String name, String sheetName, Double value, Range range, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = range;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/rowHeight"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "value", value));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeRowHeightValidateBeforeCall(String name, String sheetName, Double value, Range range, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeRowHeight(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeRowHeight(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cellsRangesPostWorksheetCellsRangeRowHeight(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeRowHeightCall(name, sheetName, value, range, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * set row height of range
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsRangesPostWorksheetCellsRangeRowHeight(String name, String sheetName, Double value, Range range, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo(name, sheetName, value, range, folder, storage);
        return resp.getData();
    }

    /**
     * set row height of range
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsRangesPostWorksheetCellsRangeRowHeightWithHttpInfo(String name, String sheetName, Double value, Range range, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeRowHeightValidateBeforeCall(name, sheetName, value, range, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * set row height of range (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param range  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeRowHeightAsync(String name, String sheetName, Double value, Range range, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeRowHeightValidateBeforeCall(name, sheetName, value, range, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeStyle
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set Style Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeStyleCall(String name, String sheetName, RangeSetStyleRequest rangeOperate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = rangeOperate;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/style"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeStyleValidateBeforeCall(String name, String sheetName, RangeSetStyleRequest rangeOperate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeStyleCall(name, sheetName, rangeOperate, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sets the style of the range.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set Style Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsRangesPostWorksheetCellsRangeStyle(String name, String sheetName, RangeSetStyleRequest rangeOperate, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsRangesPostWorksheetCellsRangeStyleWithHttpInfo(name, sheetName, rangeOperate, folder, storage);
        return resp.getData();
    }

    /**
     * Sets the style of the range.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set Style Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsRangesPostWorksheetCellsRangeStyleWithHttpInfo(String name, String sheetName, RangeSetStyleRequest rangeOperate, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeStyleValidateBeforeCall(name, sheetName, rangeOperate, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets the style of the range.              (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate Range Set Style Request  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeStyleAsync(String name, String sheetName, RangeSetStyleRequest rangeOperate, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeStyleValidateBeforeCall(name, sheetName, rangeOperate, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeUnmerge
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeUnmergeCall(String name, String sheetName, Range range, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = range;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/unmerge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeUnmergeValidateBeforeCall(String name, String sheetName, Range range, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeUnmerge(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeUnmerge(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeUnmergeCall(name, sheetName, range, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unmerges merged cells of this range.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsRangesPostWorksheetCellsRangeUnmerge(String name, String sheetName, Range range, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo(name, sheetName, range, folder, storage);
        return resp.getData();
    }

    /**
     * Unmerges merged cells of this range.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsRangesPostWorksheetCellsRangeUnmergeWithHttpInfo(String name, String sheetName, Range range, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeUnmergeValidateBeforeCall(name, sheetName, range, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unmerges merged cells of this range.              (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param range range in worksheet  (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeUnmergeAsync(String name, String sheetName, Range range, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeUnmergeValidateBeforeCall(name, sheetName, range, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRangeValue
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param value Input value (required)
     * @param range range in worksheet  (optional)
     * @param isConverted True: converted to other data type if appropriate. (optional, default to false)
     * @param setStyle True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeValueCall(String name, String sheetName, String value, Range range, Boolean isConverted, Boolean setStyle, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = range;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges/value"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "Value", value));
        if (isConverted != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isConverted", isConverted));
        if (setStyle != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "setStyle", setStyle));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeValueValidateBeforeCall(String name, String sheetName, String value, Range range, Boolean isConverted, Boolean setStyle, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRangeValue(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRangeValue(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cellsRangesPostWorksheetCellsRangeValue(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeValueCall(name, sheetName, value, range, isConverted, setStyle, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param value Input value (required)
     * @param range range in worksheet  (optional)
     * @param isConverted True: converted to other data type if appropriate. (optional, default to false)
     * @param setStyle True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsRangesPostWorksheetCellsRangeValue(String name, String sheetName, String value, Range range, Boolean isConverted, Boolean setStyle, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsRangesPostWorksheetCellsRangeValueWithHttpInfo(name, sheetName, value, range, isConverted, setStyle, folder, storage);
        return resp.getData();
    }

    /**
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.             
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param value Input value (required)
     * @param range range in worksheet  (optional)
     * @param isConverted True: converted to other data type if appropriate. (optional, default to false)
     * @param setStyle True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsRangesPostWorksheetCellsRangeValueWithHttpInfo(String name, String sheetName, String value, Range range, Boolean isConverted, Boolean setStyle, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeValueValidateBeforeCall(name, sheetName, value, range, isConverted, setStyle, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell&#39;s number format will be reset.              (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param value Input value (required)
     * @param range range in worksheet  (optional)
     * @param isConverted True: converted to other data type if appropriate. (optional, default to false)
     * @param setStyle True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangeValueAsync(String name, String sheetName, String value, Range range, Boolean isConverted, Boolean setStyle, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangeValueValidateBeforeCall(name, sheetName, value, range, isConverted, setStyle, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsRangesPostWorksheetCellsRanges
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate copydata,copystyle,copyto,copyvalue (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangesCall(String name, String sheetName, RangeCopyRequest rangeOperate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = rangeOperate;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/ranges"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangesValidateBeforeCall(String name, String sheetName, RangeCopyRequest rangeOperate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsRangesPostWorksheetCellsRanges(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsRangesPostWorksheetCellsRanges(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangesCall(name, sheetName, rangeOperate, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * copy range in the worksheet
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate copydata,copystyle,copyto,copyvalue (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsRangesPostWorksheetCellsRanges(String name, String sheetName, RangeCopyRequest rangeOperate, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsRangesPostWorksheetCellsRangesWithHttpInfo(name, sheetName, rangeOperate, folder, storage);
        return resp.getData();
    }

    /**
     * copy range in the worksheet
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate copydata,copystyle,copyto,copyvalue (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsRangesPostWorksheetCellsRangesWithHttpInfo(String name, String sheetName, RangeCopyRequest rangeOperate, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangesValidateBeforeCall(name, sheetName, rangeOperate, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * copy range in the worksheet (asynchronously)
     * 
     * @param name workbook name (required)
     * @param sheetName worksheet name (required)
     * @param rangeOperate copydata,copystyle,copyto,copyvalue (optional)
     * @param folder Workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsRangesPostWorksheetCellsRangesAsync(String name, String sheetName, RangeCopyRequest rangeOperate, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsRangesPostWorksheetCellsRangesValidateBeforeCall(name, sheetName, rangeOperate, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
