/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.CreatePivotTableRequest;
import com.aspose.cloud.cells.model.PivotFieldResponse;
import com.aspose.cloud.cells.model.PivotFilter;
import com.aspose.cloud.cells.model.PivotFilterResponse;
import com.aspose.cloud.cells.model.PivotFiltersResponse;
import com.aspose.cloud.cells.model.PivotTableFieldRequest;
import com.aspose.cloud.cells.model.PivotTableResponse;
import com.aspose.cloud.cells.model.PivotTablesResponse;
import com.aspose.cloud.cells.model.SaaSposeResponse;
import com.aspose.cloud.cells.model.Style;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsPivotTablesApi {
    private ApiClient apiClient;

    public CellsPivotTablesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsPivotTablesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsPivotTablesDeletePivotTableField
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeletePivotTableFieldCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pivotFieldType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotFieldType", pivotFieldType));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesDeletePivotTableFieldValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesDeletePivotTableField(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesDeletePivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesDeletePivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotFieldType' is set
        if (pivotFieldType == null) {
            throw new ApiException("Missing the required parameter 'pivotFieldType' when calling cellsPivotTablesDeletePivotTableField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesDeletePivotTableFieldCall(name, sheetName, pivotTableIndex, pivotFieldType, request, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete pivot field into into pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPivotTablesDeletePivotTableField(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPivotTablesDeletePivotTableFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, request, folder, storage);
        return resp.getData();
    }

    /**
     * Delete pivot field into into pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPivotTablesDeletePivotTableFieldWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesDeletePivotTableFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, request, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete pivot field into into pivot table (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeletePivotTableFieldAsync(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesDeletePivotTableFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, request, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesDeleteWorksheetPivotTable
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableCall(String name, String sheetName, Integer pivotTableIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesDeleteWorksheetPivotTable(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesDeleteWorksheetPivotTable(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesDeleteWorksheetPivotTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableCall(name, sheetName, pivotTableIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet pivot table by index
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPivotTablesDeleteWorksheetPivotTable(String name, String sheetName, Integer pivotTableIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo(name, sheetName, pivotTableIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Delete worksheet pivot table by index
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPivotTablesDeleteWorksheetPivotTableWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableValidateBeforeCall(name, sheetName, pivotTableIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet pivot table by index (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableAsync(String name, String sheetName, Integer pivotTableIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableValidateBeforeCall(name, sheetName, pivotTableIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesDeleteWorksheetPivotTableFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableFilterCall(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{fieldIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()))
            .replaceAll("\\{" + "fieldIndex" + "\\}", apiClient.escapeString(fieldIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableFilterValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesDeleteWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesDeleteWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesDeleteWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsPivotTablesDeleteWorksheetPivotTableFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableFilterCall(name, sheetName, pivotTableIndex, fieldIndex, needReCalculate, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * delete  pivot filter for piovt table             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPivotTablesDeleteWorksheetPivotTableFilter(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, Boolean needReCalculate, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo(name, sheetName, pivotTableIndex, fieldIndex, needReCalculate, folder, storage);
        return resp.getData();
    }

    /**
     * delete  pivot filter for piovt table             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPivotTablesDeleteWorksheetPivotTableFilterWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, Boolean needReCalculate, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableFilterValidateBeforeCall(name, sheetName, pivotTableIndex, fieldIndex, needReCalculate, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * delete  pivot filter for piovt table              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableFilterAsync(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, Boolean needReCalculate, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableFilterValidateBeforeCall(name, sheetName, pivotTableIndex, fieldIndex, needReCalculate, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesDeleteWorksheetPivotTableFilters
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableFiltersCall(String name, String sheetName, Integer pivotTableIndex, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableFiltersValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesDeleteWorksheetPivotTableFilters(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesDeleteWorksheetPivotTableFilters(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesDeleteWorksheetPivotTableFilters(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableFiltersCall(name, sheetName, pivotTableIndex, needReCalculate, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * delete all pivot filters for piovt table
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPivotTablesDeleteWorksheetPivotTableFilters(String name, String sheetName, Integer pivotTableIndex, Boolean needReCalculate, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo(name, sheetName, pivotTableIndex, needReCalculate, folder, storage);
        return resp.getData();
    }

    /**
     * delete all pivot filters for piovt table
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPivotTablesDeleteWorksheetPivotTableFiltersWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Boolean needReCalculate, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableFiltersValidateBeforeCall(name, sheetName, pivotTableIndex, needReCalculate, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * delete all pivot filters for piovt table (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTableFiltersAsync(String name, String sheetName, Integer pivotTableIndex, Boolean needReCalculate, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTableFiltersValidateBeforeCall(name, sheetName, pivotTableIndex, needReCalculate, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesDeleteWorksheetPivotTables
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTablesCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTablesValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesDeleteWorksheetPivotTables(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesDeleteWorksheetPivotTables(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTablesCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet pivot tables
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPivotTablesDeleteWorksheetPivotTables(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Delete worksheet pivot tables
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPivotTablesDeleteWorksheetPivotTablesWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTablesValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet pivot tables (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesDeleteWorksheetPivotTablesAsync(String name, String sheetName, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesDeleteWorksheetPivotTablesValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesGetPivotTableField
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldIndex The field index in the base fields. (required)
     * @param pivotFieldType The fields area type. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetPivotTableFieldCall(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pivotFieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotFieldIndex", pivotFieldIndex));
        if (pivotFieldType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotFieldType", pivotFieldType));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesGetPivotTableFieldValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesGetPivotTableField(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesGetPivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesGetPivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotFieldIndex' is set
        if (pivotFieldIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotFieldIndex' when calling cellsPivotTablesGetPivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotFieldType' is set
        if (pivotFieldType == null) {
            throw new ApiException("Missing the required parameter 'pivotFieldType' when calling cellsPivotTablesGetPivotTableField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesGetPivotTableFieldCall(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get pivot field into into pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldIndex The field index in the base fields. (required)
     * @param pivotFieldType The fields area type. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return PivotFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PivotFieldResponse cellsPivotTablesGetPivotTableField(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, String folder, String storage) throws ApiException {
        ApiResponse<PivotFieldResponse> resp = cellsPivotTablesGetPivotTableFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, folder, storage);
        return resp.getData();
    }

    /**
     * Get pivot field into into pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldIndex The field index in the base fields. (required)
     * @param pivotFieldType The fields area type. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;PivotFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PivotFieldResponse> cellsPivotTablesGetPivotTableFieldWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesGetPivotTableFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<PivotFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pivot field into into pivot table (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldIndex The field index in the base fields. (required)
     * @param pivotFieldType The fields area type. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetPivotTableFieldAsync(String name, String sheetName, Integer pivotTableIndex, Integer pivotFieldIndex, String pivotFieldType, String folder, String storage, final ApiCallback<PivotFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesGetPivotTableFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldIndex, pivotFieldType, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PivotFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesGetWorksheetPivotTable
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivottableIndex  (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableCall(String name, String sheetName, Integer pivottableIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivottableIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivottableIndex" + "\\}", apiClient.escapeString(pivottableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableValidateBeforeCall(String name, String sheetName, Integer pivottableIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesGetWorksheetPivotTable(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesGetWorksheetPivotTable(Async)");
        }
        
        // verify the required parameter 'pivottableIndex' is set
        if (pivottableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivottableIndex' when calling cellsPivotTablesGetWorksheetPivotTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableCall(name, sheetName, pivottableIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet pivottable info by index.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivottableIndex  (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return PivotTableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PivotTableResponse cellsPivotTablesGetWorksheetPivotTable(String name, String sheetName, Integer pivottableIndex, String folder, String storage) throws ApiException {
        ApiResponse<PivotTableResponse> resp = cellsPivotTablesGetWorksheetPivotTableWithHttpInfo(name, sheetName, pivottableIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet pivottable info by index.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivottableIndex  (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;PivotTableResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PivotTableResponse> cellsPivotTablesGetWorksheetPivotTableWithHttpInfo(String name, String sheetName, Integer pivottableIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableValidateBeforeCall(name, sheetName, pivottableIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<PivotTableResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet pivottable info by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivottableIndex  (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableAsync(String name, String sheetName, Integer pivottableIndex, String folder, String storage, final ApiCallback<PivotTableResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableValidateBeforeCall(name, sheetName, pivottableIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PivotTableResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesGetWorksheetPivotTableFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filterIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableFilterCall(String name, String sheetName, Integer pivotTableIndex, Integer filterIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{filterIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()))
            .replaceAll("\\{" + "filterIndex" + "\\}", apiClient.escapeString(filterIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableFilterValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Integer filterIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesGetWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesGetWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesGetWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'filterIndex' is set
        if (filterIndex == null) {
            throw new ApiException("Missing the required parameter 'filterIndex' when calling cellsPivotTablesGetWorksheetPivotTableFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableFilterCall(name, sheetName, pivotTableIndex, filterIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filterIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return PivotFilterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PivotFilterResponse cellsPivotTablesGetWorksheetPivotTableFilter(String name, String sheetName, Integer pivotTableIndex, Integer filterIndex, String folder, String storage) throws ApiException {
        ApiResponse<PivotFilterResponse> resp = cellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo(name, sheetName, pivotTableIndex, filterIndex, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filterIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;PivotFilterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PivotFilterResponse> cellsPivotTablesGetWorksheetPivotTableFilterWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Integer filterIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableFilterValidateBeforeCall(name, sheetName, pivotTableIndex, filterIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<PivotFilterResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filterIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableFilterAsync(String name, String sheetName, Integer pivotTableIndex, Integer filterIndex, String folder, String storage, final ApiCallback<PivotFilterResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableFilterValidateBeforeCall(name, sheetName, pivotTableIndex, filterIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PivotFilterResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesGetWorksheetPivotTableFilters
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableFiltersCall(String name, String sheetName, Integer pivotTableIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableFiltersValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesGetWorksheetPivotTableFilters(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesGetWorksheetPivotTableFilters(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesGetWorksheetPivotTableFilters(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableFiltersCall(name, sheetName, pivotTableIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return PivotFiltersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PivotFiltersResponse cellsPivotTablesGetWorksheetPivotTableFilters(String name, String sheetName, Integer pivotTableIndex, String folder, String storage) throws ApiException {
        ApiResponse<PivotFiltersResponse> resp = cellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo(name, sheetName, pivotTableIndex, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;PivotFiltersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PivotFiltersResponse> cellsPivotTablesGetWorksheetPivotTableFiltersWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableFiltersValidateBeforeCall(name, sheetName, pivotTableIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<PivotFiltersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTableFiltersAsync(String name, String sheetName, Integer pivotTableIndex, String folder, String storage, final ApiCallback<PivotFiltersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTableFiltersValidateBeforeCall(name, sheetName, pivotTableIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PivotFiltersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesGetWorksheetPivotTables
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTablesCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTablesValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesGetWorksheetPivotTables(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesGetWorksheetPivotTables(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTablesCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet pivottables info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return PivotTablesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PivotTablesResponse cellsPivotTablesGetWorksheetPivotTables(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<PivotTablesResponse> resp = cellsPivotTablesGetWorksheetPivotTablesWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet pivottables info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;PivotTablesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PivotTablesResponse> cellsPivotTablesGetWorksheetPivotTablesWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTablesValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<PivotTablesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet pivottables info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesGetWorksheetPivotTablesAsync(String name, String sheetName, String folder, String storage, final ApiCallback<PivotTablesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesGetWorksheetPivotTablesValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PivotTablesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostPivotTableCellStyle
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param column  (required)
     * @param row  (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableCellStyleCall(String name, String sheetName, Integer pivotTableIndex, Integer column, Integer row, Style style, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = style;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Format"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostPivotTableCellStyleValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Integer column, Integer row, Style style, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostPivotTableCellStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostPivotTableCellStyle(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostPivotTableCellStyle(Async)");
        }
        
        // verify the required parameter 'column' is set
        if (column == null) {
            throw new ApiException("Missing the required parameter 'column' when calling cellsPivotTablesPostPivotTableCellStyle(Async)");
        }
        
        // verify the required parameter 'row' is set
        if (row == null) {
            throw new ApiException("Missing the required parameter 'row' when calling cellsPivotTablesPostPivotTableCellStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableCellStyleCall(name, sheetName, pivotTableIndex, column, row, style, needReCalculate, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update cell style for pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param column  (required)
     * @param row  (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPivotTablesPostPivotTableCellStyle(String name, String sheetName, Integer pivotTableIndex, Integer column, Integer row, Style style, Boolean needReCalculate, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPivotTablesPostPivotTableCellStyleWithHttpInfo(name, sheetName, pivotTableIndex, column, row, style, needReCalculate, folder, storage);
        return resp.getData();
    }

    /**
     * Update cell style for pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param column  (required)
     * @param row  (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPivotTablesPostPivotTableCellStyleWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Integer column, Integer row, Style style, Boolean needReCalculate, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableCellStyleValidateBeforeCall(name, sheetName, pivotTableIndex, column, row, style, needReCalculate, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update cell style for pivot table (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param column  (required)
     * @param row  (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableCellStyleAsync(String name, String sheetName, Integer pivotTableIndex, Integer column, Integer row, Style style, Boolean needReCalculate, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableCellStyleValidateBeforeCall(name, sheetName, pivotTableIndex, column, row, style, needReCalculate, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostPivotTableFieldHideItem
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldType  (required)
     * @param fieldIndex  (required)
     * @param itemIndex  (required)
     * @param isHide  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableFieldHideItemCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, Integer fieldIndex, Integer itemIndex, Boolean isHide, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Hide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pivotFieldType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotFieldType", pivotFieldType));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (itemIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "itemIndex", itemIndex));
        if (isHide != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isHide", isHide));
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostPivotTableFieldHideItemValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, Integer fieldIndex, Integer itemIndex, Boolean isHide, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        // verify the required parameter 'pivotFieldType' is set
        if (pivotFieldType == null) {
            throw new ApiException("Missing the required parameter 'pivotFieldType' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        // verify the required parameter 'itemIndex' is set
        if (itemIndex == null) {
            throw new ApiException("Missing the required parameter 'itemIndex' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        // verify the required parameter 'isHide' is set
        if (isHide == null) {
            throw new ApiException("Missing the required parameter 'isHide' when calling cellsPivotTablesPostPivotTableFieldHideItem(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableFieldHideItemCall(name, sheetName, pivotTableIndex, pivotFieldType, fieldIndex, itemIndex, isHide, needReCalculate, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldType  (required)
     * @param fieldIndex  (required)
     * @param itemIndex  (required)
     * @param isHide  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPivotTablesPostPivotTableFieldHideItem(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, Integer fieldIndex, Integer itemIndex, Boolean isHide, Boolean needReCalculate, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, fieldIndex, itemIndex, isHide, needReCalculate, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldType  (required)
     * @param fieldIndex  (required)
     * @param itemIndex  (required)
     * @param isHide  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPivotTablesPostPivotTableFieldHideItemWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, Integer fieldIndex, Integer itemIndex, Boolean isHide, Boolean needReCalculate, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableFieldHideItemValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, fieldIndex, itemIndex, isHide, needReCalculate, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param pivotFieldType  (required)
     * @param fieldIndex  (required)
     * @param itemIndex  (required)
     * @param isHide  (required)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableFieldHideItemAsync(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, Integer fieldIndex, Integer itemIndex, Boolean isHide, Boolean needReCalculate, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableFieldHideItemValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, fieldIndex, itemIndex, isHide, needReCalculate, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostPivotTableFieldMoveTo
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param from  (required)
     * @param to  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableFieldMoveToCall(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, String from, String to, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Move"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "to", to));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostPivotTableFieldMoveToValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, String from, String to, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostPivotTableFieldMoveTo(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostPivotTableFieldMoveTo(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostPivotTableFieldMoveTo(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsPivotTablesPostPivotTableFieldMoveTo(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling cellsPivotTablesPostPivotTableFieldMoveTo(Async)");
        }
        
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling cellsPivotTablesPostPivotTableFieldMoveTo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableFieldMoveToCall(name, sheetName, pivotTableIndex, fieldIndex, from, to, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param from  (required)
     * @param to  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPivotTablesPostPivotTableFieldMoveTo(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, String from, String to, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo(name, sheetName, pivotTableIndex, fieldIndex, from, to, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param from  (required)
     * @param to  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPivotTablesPostPivotTableFieldMoveToWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, String from, String to, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableFieldMoveToValidateBeforeCall(name, sheetName, pivotTableIndex, fieldIndex, from, to, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param fieldIndex  (required)
     * @param from  (required)
     * @param to  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableFieldMoveToAsync(String name, String sheetName, Integer pivotTableIndex, Integer fieldIndex, String from, String to, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableFieldMoveToValidateBeforeCall(name, sheetName, pivotTableIndex, fieldIndex, from, to, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostPivotTableStyle
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableStyleCall(String name, String sheetName, Integer pivotTableIndex, Style style, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = style;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/FormatAll"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostPivotTableStyleValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Style style, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostPivotTableStyle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostPivotTableStyle(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostPivotTableStyle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableStyleCall(name, sheetName, pivotTableIndex, style, needReCalculate, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update style for pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPivotTablesPostPivotTableStyle(String name, String sheetName, Integer pivotTableIndex, Style style, Boolean needReCalculate, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPivotTablesPostPivotTableStyleWithHttpInfo(name, sheetName, pivotTableIndex, style, needReCalculate, folder, storage);
        return resp.getData();
    }

    /**
     * Update style for pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPivotTablesPostPivotTableStyleWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Style style, Boolean needReCalculate, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableStyleValidateBeforeCall(name, sheetName, pivotTableIndex, style, needReCalculate, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update style for pivot table (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param style Style dto in request body. (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostPivotTableStyleAsync(String name, String sheetName, Integer pivotTableIndex, Style style, Boolean needReCalculate, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostPivotTableStyleValidateBeforeCall(name, sheetName, pivotTableIndex, style, needReCalculate, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostWorksheetPivotTableCalculate
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostWorksheetPivotTableCalculateCall(String name, String sheetName, Integer pivotTableIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Calculate"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostWorksheetPivotTableCalculateValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostWorksheetPivotTableCalculate(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostWorksheetPivotTableCalculate(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostWorksheetPivotTableCalculate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostWorksheetPivotTableCalculateCall(name, sheetName, pivotTableIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculates pivottable&#39;s data to cells.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPivotTablesPostWorksheetPivotTableCalculate(String name, String sheetName, Integer pivotTableIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo(name, sheetName, pivotTableIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Calculates pivottable&#39;s data to cells.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPivotTablesPostWorksheetPivotTableCalculateWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostWorksheetPivotTableCalculateValidateBeforeCall(name, sheetName, pivotTableIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculates pivottable&#39;s data to cells. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostWorksheetPivotTableCalculateAsync(String name, String sheetName, Integer pivotTableIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostWorksheetPivotTableCalculateValidateBeforeCall(name, sheetName, pivotTableIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPostWorksheetPivotTableMove
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param row  (optional)
     * @param column  (optional)
     * @param destCellName  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostWorksheetPivotTableMoveCall(String name, String sheetName, Integer pivotTableIndex, Integer row, Integer column, String destCellName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Move"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (destCellName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destCellName", destCellName));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPostWorksheetPivotTableMoveValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, Integer row, Integer column, String destCellName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPostWorksheetPivotTableMove(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPostWorksheetPivotTableMove(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPostWorksheetPivotTableMove(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPostWorksheetPivotTableMoveCall(name, sheetName, pivotTableIndex, row, column, destCellName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param row  (optional)
     * @param column  (optional)
     * @param destCellName  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPivotTablesPostWorksheetPivotTableMove(String name, String sheetName, Integer pivotTableIndex, Integer row, Integer column, String destCellName, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo(name, sheetName, pivotTableIndex, row, column, destCellName, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param row  (optional)
     * @param column  (optional)
     * @param destCellName  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPivotTablesPostWorksheetPivotTableMoveWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, Integer row, Integer column, String destCellName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPostWorksheetPivotTableMoveValidateBeforeCall(name, sheetName, pivotTableIndex, row, column, destCellName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param row  (optional)
     * @param column  (optional)
     * @param destCellName  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPostWorksheetPivotTableMoveAsync(String name, String sheetName, Integer pivotTableIndex, Integer row, Integer column, String destCellName, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPostWorksheetPivotTableMoveValidateBeforeCall(name, sheetName, pivotTableIndex, row, column, destCellName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPutPivotTableField
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPutPivotTableFieldCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pivotFieldType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pivotFieldType", pivotFieldType));
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPutPivotTableFieldValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPutPivotTableField(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPutPivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPutPivotTableField(Async)");
        }
        
        // verify the required parameter 'pivotFieldType' is set
        if (pivotFieldType == null) {
            throw new ApiException("Missing the required parameter 'pivotFieldType' when calling cellsPivotTablesPutPivotTableField(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPutPivotTableFieldCall(name, sheetName, pivotTableIndex, pivotFieldType, request, needReCalculate, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add pivot field into into pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPivotTablesPutPivotTableField(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, Boolean needReCalculate, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPivotTablesPutPivotTableFieldWithHttpInfo(name, sheetName, pivotTableIndex, pivotFieldType, request, needReCalculate, folder, storage);
        return resp.getData();
    }

    /**
     * Add pivot field into into pivot table
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPivotTablesPutPivotTableFieldWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, Boolean needReCalculate, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPutPivotTableFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, request, needReCalculate, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add pivot field into into pivot table (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param pivotTableIndex Pivot table index (required)
     * @param pivotFieldType The fields area type. (required)
     * @param request Dto that conrains field indexes (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPutPivotTableFieldAsync(String name, String sheetName, Integer pivotTableIndex, String pivotFieldType, PivotTableFieldRequest request, Boolean needReCalculate, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPutPivotTableFieldValidateBeforeCall(name, sheetName, pivotTableIndex, pivotFieldType, request, needReCalculate, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPutWorksheetPivotTable
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param request CreatePivotTableRequest dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param sourceData The data for the new PivotTable cache. (optional)
     * @param destCellName The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param tableName The name of the new PivotTable report. (optional)
     * @param useSameSource Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPutWorksheetPivotTableCall(String name, String sheetName, CreatePivotTableRequest request, String folder, String storage, String sourceData, String destCellName, String tableName, Boolean useSameSource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));
        if (sourceData != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceData", sourceData));
        if (destCellName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destCellName", destCellName));
        if (tableName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tableName", tableName));
        if (useSameSource != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "useSameSource", useSameSource));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPutWorksheetPivotTableValidateBeforeCall(String name, String sheetName, CreatePivotTableRequest request, String folder, String storage, String sourceData, String destCellName, String tableName, Boolean useSameSource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPutWorksheetPivotTable(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPutWorksheetPivotTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPutWorksheetPivotTableCall(name, sheetName, request, folder, storage, sourceData, destCellName, tableName, useSameSource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a pivot table into worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param request CreatePivotTableRequest dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param sourceData The data for the new PivotTable cache. (optional)
     * @param destCellName The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param tableName The name of the new PivotTable report. (optional)
     * @param useSameSource Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     * @return PivotTableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PivotTableResponse cellsPivotTablesPutWorksheetPivotTable(String name, String sheetName, CreatePivotTableRequest request, String folder, String storage, String sourceData, String destCellName, String tableName, Boolean useSameSource) throws ApiException {
        ApiResponse<PivotTableResponse> resp = cellsPivotTablesPutWorksheetPivotTableWithHttpInfo(name, sheetName, request, folder, storage, sourceData, destCellName, tableName, useSameSource);
        return resp.getData();
    }

    /**
     * Add a pivot table into worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param request CreatePivotTableRequest dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param sourceData The data for the new PivotTable cache. (optional)
     * @param destCellName The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param tableName The name of the new PivotTable report. (optional)
     * @param useSameSource Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     * @return ApiResponse&lt;PivotTableResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PivotTableResponse> cellsPivotTablesPutWorksheetPivotTableWithHttpInfo(String name, String sheetName, CreatePivotTableRequest request, String folder, String storage, String sourceData, String destCellName, String tableName, Boolean useSameSource) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPutWorksheetPivotTableValidateBeforeCall(name, sheetName, request, folder, storage, sourceData, destCellName, tableName, useSameSource, null, null);
        Type localVarReturnType = new TypeToken<PivotTableResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a pivot table into worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param request CreatePivotTableRequest dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param sourceData The data for the new PivotTable cache. (optional)
     * @param destCellName The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     * @param tableName The name of the new PivotTable report. (optional)
     * @param useSameSource Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPutWorksheetPivotTableAsync(String name, String sheetName, CreatePivotTableRequest request, String folder, String storage, String sourceData, String destCellName, String tableName, Boolean useSameSource, final ApiCallback<PivotTableResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPutWorksheetPivotTableValidateBeforeCall(name, sheetName, request, folder, storage, sourceData, destCellName, tableName, useSameSource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PivotTableResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPivotTablesPutWorksheetPivotTableFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filter  (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPutWorksheetPivotTableFilterCall(String name, String sheetName, Integer pivotTableIndex, PivotFilter filter, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = filter;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pivotTableIndex" + "\\}", apiClient.escapeString(pivotTableIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (needReCalculate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "needReCalculate", needReCalculate));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPivotTablesPutWorksheetPivotTableFilterValidateBeforeCall(String name, String sheetName, Integer pivotTableIndex, PivotFilter filter, Boolean needReCalculate, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPivotTablesPutWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPivotTablesPutWorksheetPivotTableFilter(Async)");
        }
        
        // verify the required parameter 'pivotTableIndex' is set
        if (pivotTableIndex == null) {
            throw new ApiException("Missing the required parameter 'pivotTableIndex' when calling cellsPivotTablesPutWorksheetPivotTableFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPivotTablesPutWorksheetPivotTableFilterCall(name, sheetName, pivotTableIndex, filter, needReCalculate, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add pivot filter for piovt table index
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filter  (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPivotTablesPutWorksheetPivotTableFilter(String name, String sheetName, Integer pivotTableIndex, PivotFilter filter, Boolean needReCalculate, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo(name, sheetName, pivotTableIndex, filter, needReCalculate, folder, storage);
        return resp.getData();
    }

    /**
     * Add pivot filter for piovt table index
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filter  (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPivotTablesPutWorksheetPivotTableFilterWithHttpInfo(String name, String sheetName, Integer pivotTableIndex, PivotFilter filter, Boolean needReCalculate, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPivotTablesPutWorksheetPivotTableFilterValidateBeforeCall(name, sheetName, pivotTableIndex, filter, needReCalculate, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add pivot filter for piovt table index (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param pivotTableIndex  (required)
     * @param filter  (optional)
     * @param needReCalculate  (optional, default to false)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPivotTablesPutWorksheetPivotTableFilterAsync(String name, String sheetName, Integer pivotTableIndex, PivotFilter filter, Boolean needReCalculate, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPivotTablesPutWorksheetPivotTableFilterValidateBeforeCall(name, sheetName, pivotTableIndex, filter, needReCalculate, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
