/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.AutoFitterOptions;
import com.aspose.cloud.cells.model.Comment;
import com.aspose.cloud.cells.model.CommentResponse;
import com.aspose.cloud.cells.model.CommentsResponse;
import com.aspose.cloud.cells.model.CopyOptions;
import com.aspose.cloud.cells.model.DataSorter;
import java.io.File;
import com.aspose.cloud.cells.model.MergedCellResponse;
import com.aspose.cloud.cells.model.MergedCellsResponse;
import com.aspose.cloud.cells.model.ProtectSheetParameter;
import com.aspose.cloud.cells.model.RangesResponse;
import com.aspose.cloud.cells.model.SaaSposeResponse;
import com.aspose.cloud.cells.model.SingleValueResponse;
import com.aspose.cloud.cells.model.TextItemsResponse;
import com.aspose.cloud.cells.model.Worksheet;
import com.aspose.cloud.cells.model.WorksheetMovingRequest;
import com.aspose.cloud.cells.model.WorksheetReplaceResponse;
import com.aspose.cloud.cells.model.WorksheetResponse;
import com.aspose.cloud.cells.model.WorksheetsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsWorksheetsApi {
    private ApiClient apiClient;

    public CellsWorksheetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsWorksheetsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsWorksheetsDeleteUnprotectWorksheet
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. Only password is used here. (optional)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteUnprotectWorksheetCall(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = protectParameter;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/protection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsDeleteUnprotectWorksheetValidateBeforeCall(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsDeleteUnprotectWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsDeleteUnprotectWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteUnprotectWorksheetCall(name, sheetName, protectParameter, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unprotect worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. Only password is used here. (optional)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return WorksheetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetResponse cellsWorksheetsDeleteUnprotectWorksheet(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storage) throws ApiException {
        ApiResponse<WorksheetResponse> resp = cellsWorksheetsDeleteUnprotectWorksheetWithHttpInfo(name, sheetName, protectParameter, folder, storage);
        return resp.getData();
    }

    /**
     * Unprotect worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. Only password is used here. (optional)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;WorksheetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetResponse> cellsWorksheetsDeleteUnprotectWorksheetWithHttpInfo(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteUnprotectWorksheetValidateBeforeCall(name, sheetName, protectParameter, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unprotect worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. Only password is used here. (optional)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteUnprotectWorksheetAsync(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storage, final ApiCallback<WorksheetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsDeleteUnprotectWorksheetValidateBeforeCall(name, sheetName, protectParameter, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsDeleteWorksheet
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsDeleteWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsDeleteWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return WorksheetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetsResponse cellsWorksheetsDeleteWorksheet(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<WorksheetsResponse> resp = cellsWorksheetsDeleteWorksheetWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Delete worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;WorksheetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetsResponse> cellsWorksheetsDeleteWorksheetWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetAsync(String name, String sheetName, String folder, String storage, final ApiCallback<WorksheetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsDeleteWorksheetBackground
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetBackgroundCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/background"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetBackgroundValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsDeleteWorksheetBackground(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsDeleteWorksheetBackground(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetBackgroundCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set worksheet background image.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsDeleteWorksheetBackground(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsDeleteWorksheetBackgroundWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Set worksheet background image.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsDeleteWorksheetBackgroundWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetBackgroundValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set worksheet background image. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetBackgroundAsync(String name, String sheetName, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetBackgroundValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsDeleteWorksheetComment
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCommentCall(String name, String sheetName, String cellName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCommentValidateBeforeCall(String name, String sheetName, String cellName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsDeleteWorksheetComment(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsDeleteWorksheetComment(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsWorksheetsDeleteWorksheetComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCommentCall(name, sheetName, cellName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet&#39;s cell comment.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsDeleteWorksheetComment(String name, String sheetName, String cellName, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsDeleteWorksheetCommentWithHttpInfo(name, sheetName, cellName, folder, storage);
        return resp.getData();
    }

    /**
     * Delete worksheet&#39;s cell comment.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsDeleteWorksheetCommentWithHttpInfo(String name, String sheetName, String cellName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCommentValidateBeforeCall(name, sheetName, cellName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet&#39;s cell comment. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCommentAsync(String name, String sheetName, String cellName, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCommentValidateBeforeCall(name, sheetName, cellName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsDeleteWorksheetComments
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCommentsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/comments"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCommentsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsDeleteWorksheetComments(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsDeleteWorksheetComments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCommentsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete all comments for worksheet.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsDeleteWorksheetComments(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsDeleteWorksheetCommentsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Delete all comments for worksheet.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsDeleteWorksheetCommentsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCommentsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all comments for worksheet. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetCommentsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetCommentsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsDeleteWorksheetFreezePanes
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetFreezePanesCall(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/freezepanes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (freezedRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "freezedRows", freezedRows));
        if (freezedColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "freezedColumns", freezedColumns));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetFreezePanesValidateBeforeCall(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsDeleteWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsDeleteWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'row' is set
        if (row == null) {
            throw new ApiException("Missing the required parameter 'row' when calling cellsWorksheetsDeleteWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'column' is set
        if (column == null) {
            throw new ApiException("Missing the required parameter 'column' when calling cellsWorksheetsDeleteWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'freezedRows' is set
        if (freezedRows == null) {
            throw new ApiException("Missing the required parameter 'freezedRows' when calling cellsWorksheetsDeleteWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'freezedColumns' is set
        if (freezedColumns == null) {
            throw new ApiException("Missing the required parameter 'freezedColumns' when calling cellsWorksheetsDeleteWorksheetFreezePanes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetFreezePanesCall(name, sheetName, row, column, freezedRows, freezedColumns, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unfreeze panes
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsDeleteWorksheetFreezePanes(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsDeleteWorksheetFreezePanesWithHttpInfo(name, sheetName, row, column, freezedRows, freezedColumns, folder, storage);
        return resp.getData();
    }

    /**
     * Unfreeze panes
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsDeleteWorksheetFreezePanesWithHttpInfo(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetFreezePanesValidateBeforeCall(name, sheetName, row, column, freezedRows, freezedColumns, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unfreeze panes (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsDeleteWorksheetFreezePanesAsync(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsDeleteWorksheetFreezePanesValidateBeforeCall(name, sheetName, row, column, freezedRows, freezedColumns, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetNamedRanges
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetNamedRangesCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/ranges"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetNamedRangesValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetNamedRanges(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetNamedRangesCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheets ranges info.
     * 
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return RangesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RangesResponse cellsWorksheetsGetNamedRanges(String name, String folder, String storage) throws ApiException {
        ApiResponse<RangesResponse> resp = cellsWorksheetsGetNamedRangesWithHttpInfo(name, folder, storage);
        return resp.getData();
    }

    /**
     * Read worksheets ranges info.
     * 
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;RangesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RangesResponse> cellsWorksheetsGetNamedRangesWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetNamedRangesValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<RangesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheets ranges info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetNamedRangesAsync(String name, String folder, String storage, final ApiCallback<RangesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetNamedRangesValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RangesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheet
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param format The exported file format. (optional)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCall(String name, String sheetName, String format, Integer verticalResolution, Integer horizontalResolution, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (verticalResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "verticalResolution", verticalResolution));
        if (horizontalResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "horizontalResolution", horizontalResolution));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetValidateBeforeCall(String name, String sheetName, String format, Integer verticalResolution, Integer horizontalResolution, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCall(name, sheetName, format, verticalResolution, horizontalResolution, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheet info or export.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param format The exported file format. (optional)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsWorksheetsGetWorksheet(String name, String sheetName, String format, Integer verticalResolution, Integer horizontalResolution, String folder, String storage) throws ApiException {
        ApiResponse<File> resp = cellsWorksheetsGetWorksheetWithHttpInfo(name, sheetName, format, verticalResolution, horizontalResolution, folder, storage);
        return resp.getData();
    }

    /**
     * Read worksheet info or export.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param format The exported file format. (optional)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsWorksheetsGetWorksheetWithHttpInfo(String name, String sheetName, String format, Integer verticalResolution, Integer horizontalResolution, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetValidateBeforeCall(name, sheetName, format, verticalResolution, horizontalResolution, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheet info or export. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param format The exported file format. (optional)
     * @param verticalResolution Image vertical resolution. (optional, default to 0)
     * @param horizontalResolution Image horizontal resolution. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetAsync(String name, String sheetName, String format, Integer verticalResolution, Integer horizontalResolution, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetValidateBeforeCall(name, sheetName, format, verticalResolution, horizontalResolution, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheetCalculateFormula
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param formula The formula. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCalculateFormulaCall(String name, String sheetName, String formula, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/formulaResult"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (formula != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "formula", formula));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCalculateFormulaValidateBeforeCall(String name, String sheetName, String formula, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheetCalculateFormula(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheetCalculateFormula(Async)");
        }
        
        // verify the required parameter 'formula' is set
        if (formula == null) {
            throw new ApiException("Missing the required parameter 'formula' when calling cellsWorksheetsGetWorksheetCalculateFormula(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCalculateFormulaCall(name, sheetName, formula, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculate formula value.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param formula The formula. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SingleValueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleValueResponse cellsWorksheetsGetWorksheetCalculateFormula(String name, String sheetName, String formula, String folder, String storage) throws ApiException {
        ApiResponse<SingleValueResponse> resp = cellsWorksheetsGetWorksheetCalculateFormulaWithHttpInfo(name, sheetName, formula, folder, storage);
        return resp.getData();
    }

    /**
     * Calculate formula value.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param formula The formula. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SingleValueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleValueResponse> cellsWorksheetsGetWorksheetCalculateFormulaWithHttpInfo(String name, String sheetName, String formula, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCalculateFormulaValidateBeforeCall(name, sheetName, formula, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SingleValueResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculate formula value. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param formula The formula. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCalculateFormulaAsync(String name, String sheetName, String formula, String folder, String storage, final ApiCallback<SingleValueResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCalculateFormulaValidateBeforeCall(name, sheetName, formula, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleValueResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheetComment
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCommentCall(String name, String sheetName, String cellName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCommentValidateBeforeCall(String name, String sheetName, String cellName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheetComment(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheetComment(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsWorksheetsGetWorksheetComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCommentCall(name, sheetName, cellName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet comment by cell name.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return CommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResponse cellsWorksheetsGetWorksheetComment(String name, String sheetName, String cellName, String folder, String storage) throws ApiException {
        ApiResponse<CommentResponse> resp = cellsWorksheetsGetWorksheetCommentWithHttpInfo(name, sheetName, cellName, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet comment by cell name.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;CommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResponse> cellsWorksheetsGetWorksheetCommentWithHttpInfo(String name, String sheetName, String cellName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCommentValidateBeforeCall(name, sheetName, cellName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<CommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet comment by cell name. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCommentAsync(String name, String sheetName, String cellName, String folder, String storage, final ApiCallback<CommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCommentValidateBeforeCall(name, sheetName, cellName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheetComments
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCommentsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/comments"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCommentsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheetComments(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheetComments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCommentsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet comments.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return CommentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentsResponse cellsWorksheetsGetWorksheetComments(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<CommentsResponse> resp = cellsWorksheetsGetWorksheetCommentsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet comments.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;CommentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentsResponse> cellsWorksheetsGetWorksheetCommentsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCommentsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<CommentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet comments. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetCommentsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<CommentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetCommentsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheetMergedCell
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param mergedCellIndex Merged cell index. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetMergedCellCall(String name, String sheetName, Integer mergedCellIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/mergedCells/{mergedCellIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "mergedCellIndex" + "\\}", apiClient.escapeString(mergedCellIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetMergedCellValidateBeforeCall(String name, String sheetName, Integer mergedCellIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheetMergedCell(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheetMergedCell(Async)");
        }
        
        // verify the required parameter 'mergedCellIndex' is set
        if (mergedCellIndex == null) {
            throw new ApiException("Missing the required parameter 'mergedCellIndex' when calling cellsWorksheetsGetWorksheetMergedCell(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetMergedCellCall(name, sheetName, mergedCellIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet merged cell by its index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param mergedCellIndex Merged cell index. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return MergedCellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MergedCellResponse cellsWorksheetsGetWorksheetMergedCell(String name, String sheetName, Integer mergedCellIndex, String folder, String storage) throws ApiException {
        ApiResponse<MergedCellResponse> resp = cellsWorksheetsGetWorksheetMergedCellWithHttpInfo(name, sheetName, mergedCellIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet merged cell by its index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param mergedCellIndex Merged cell index. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;MergedCellResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MergedCellResponse> cellsWorksheetsGetWorksheetMergedCellWithHttpInfo(String name, String sheetName, Integer mergedCellIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetMergedCellValidateBeforeCall(name, sheetName, mergedCellIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<MergedCellResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet merged cell by its index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param mergedCellIndex Merged cell index. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetMergedCellAsync(String name, String sheetName, Integer mergedCellIndex, String folder, String storage, final ApiCallback<MergedCellResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetMergedCellValidateBeforeCall(name, sheetName, mergedCellIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MergedCellResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheetMergedCells
     * @param name Document name. (required)
     * @param sheetName The workseet name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetMergedCellsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/mergedCells"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetMergedCellsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheetMergedCells(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheetMergedCells(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetMergedCellsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet merged cells.
     * 
     * @param name Document name. (required)
     * @param sheetName The workseet name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return MergedCellsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MergedCellsResponse cellsWorksheetsGetWorksheetMergedCells(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<MergedCellsResponse> resp = cellsWorksheetsGetWorksheetMergedCellsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet merged cells.
     * 
     * @param name Document name. (required)
     * @param sheetName The workseet name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;MergedCellsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MergedCellsResponse> cellsWorksheetsGetWorksheetMergedCellsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetMergedCellsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<MergedCellsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet merged cells. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The workseet name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetMergedCellsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<MergedCellsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetMergedCellsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MergedCellsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheetTextItems
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetTextItemsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/textItems"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetTextItemsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheetTextItems(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsGetWorksheetTextItems(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetTextItemsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet text items.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return TextItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextItemsResponse cellsWorksheetsGetWorksheetTextItems(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<TextItemsResponse> resp = cellsWorksheetsGetWorksheetTextItemsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet text items.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;TextItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextItemsResponse> cellsWorksheetsGetWorksheetTextItemsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetTextItemsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet text items. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetTextItemsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<TextItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetTextItemsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsGetWorksheets
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetsCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsGetWorksheetsValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsGetWorksheets(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetsCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheets info.
     * 
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return WorksheetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetsResponse cellsWorksheetsGetWorksheets(String name, String folder, String storage) throws ApiException {
        ApiResponse<WorksheetsResponse> resp = cellsWorksheetsGetWorksheetsWithHttpInfo(name, folder, storage);
        return resp.getData();
    }

    /**
     * Read worksheets info.
     * 
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;WorksheetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetsResponse> cellsWorksheetsGetWorksheetsWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetsValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheets info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsGetWorksheetsAsync(String name, String folder, String storage, final ApiCallback<WorksheetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsGetWorksheetsValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostAutofitWorksheetColumns
     * @param name  (required)
     * @param sheetName  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param firstRow  (optional)
     * @param lastRow  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetColumnsCall(String name, String sheetName, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, Integer firstRow, Integer lastRow, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autoFitterOptions;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autofitcolumns"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (firstColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstColumn", firstColumn));
        if (lastColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastColumn", lastColumn));
        if (firstRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstRow", firstRow));
        if (lastRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastRow", lastRow));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetColumnsValidateBeforeCall(String name, String sheetName, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, Integer firstRow, Integer lastRow, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostAutofitWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostAutofitWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'firstColumn' is set
        if (firstColumn == null) {
            throw new ApiException("Missing the required parameter 'firstColumn' when calling cellsWorksheetsPostAutofitWorksheetColumns(Async)");
        }
        
        // verify the required parameter 'lastColumn' is set
        if (lastColumn == null) {
            throw new ApiException("Missing the required parameter 'lastColumn' when calling cellsWorksheetsPostAutofitWorksheetColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetColumnsCall(name, sheetName, firstColumn, lastColumn, autoFitterOptions, firstRow, lastRow, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param firstRow  (optional)
     * @param lastRow  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsPostAutofitWorksheetColumns(String name, String sheetName, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, Integer firstRow, Integer lastRow, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsPostAutofitWorksheetColumnsWithHttpInfo(name, sheetName, firstColumn, lastColumn, autoFitterOptions, firstRow, lastRow, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param firstRow  (optional)
     * @param lastRow  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsPostAutofitWorksheetColumnsWithHttpInfo(String name, String sheetName, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, Integer firstRow, Integer lastRow, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetColumnsValidateBeforeCall(name, sheetName, firstColumn, lastColumn, autoFitterOptions, firstRow, lastRow, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param firstRow  (optional)
     * @param lastRow  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetColumnsAsync(String name, String sheetName, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, Integer firstRow, Integer lastRow, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetColumnsValidateBeforeCall(name, sheetName, firstColumn, lastColumn, autoFitterOptions, firstRow, lastRow, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostAutofitWorksheetRow
     * @param name  (required)
     * @param sheetName  (required)
     * @param rowIndex  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetRowCall(String name, String sheetName, Integer rowIndex, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autoFitterOptions;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autofitrow"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (rowIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "rowIndex", rowIndex));
        if (firstColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "firstColumn", firstColumn));
        if (lastColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lastColumn", lastColumn));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetRowValidateBeforeCall(String name, String sheetName, Integer rowIndex, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostAutofitWorksheetRow(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostAutofitWorksheetRow(Async)");
        }
        
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling cellsWorksheetsPostAutofitWorksheetRow(Async)");
        }
        
        // verify the required parameter 'firstColumn' is set
        if (firstColumn == null) {
            throw new ApiException("Missing the required parameter 'firstColumn' when calling cellsWorksheetsPostAutofitWorksheetRow(Async)");
        }
        
        // verify the required parameter 'lastColumn' is set
        if (lastColumn == null) {
            throw new ApiException("Missing the required parameter 'lastColumn' when calling cellsWorksheetsPostAutofitWorksheetRow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetRowCall(name, sheetName, rowIndex, firstColumn, lastColumn, autoFitterOptions, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param rowIndex  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsPostAutofitWorksheetRow(String name, String sheetName, Integer rowIndex, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsPostAutofitWorksheetRowWithHttpInfo(name, sheetName, rowIndex, firstColumn, lastColumn, autoFitterOptions, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param rowIndex  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsPostAutofitWorksheetRowWithHttpInfo(String name, String sheetName, Integer rowIndex, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, firstColumn, lastColumn, autoFitterOptions, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param rowIndex  (required)
     * @param firstColumn  (required)
     * @param lastColumn  (required)
     * @param autoFitterOptions  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetRowAsync(String name, String sheetName, Integer rowIndex, Integer firstColumn, Integer lastColumn, AutoFitterOptions autoFitterOptions, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetRowValidateBeforeCall(name, sheetName, rowIndex, firstColumn, lastColumn, autoFitterOptions, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostAutofitWorksheetRows
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetRowsCall(String name, String sheetName, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autoFitterOptions;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autofitrows"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (endRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endRow", endRow));
        if (onlyAuto != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "onlyAuto", onlyAuto));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetRowsValidateBeforeCall(String name, String sheetName, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostAutofitWorksheetRows(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostAutofitWorksheetRows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetRowsCall(name, sheetName, autoFitterOptions, startRow, endRow, onlyAuto, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Autofit worksheet rows.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsPostAutofitWorksheetRows(String name, String sheetName, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsPostAutofitWorksheetRowsWithHttpInfo(name, sheetName, autoFitterOptions, startRow, endRow, onlyAuto, folder, storage);
        return resp.getData();
    }

    /**
     * Autofit worksheet rows.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsPostAutofitWorksheetRowsWithHttpInfo(String name, String sheetName, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetRowsValidateBeforeCall(name, sheetName, autoFitterOptions, startRow, endRow, onlyAuto, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Autofit worksheet rows. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param autoFitterOptions Auto Fitter Options. (optional)
     * @param startRow Start row. (optional)
     * @param endRow End row. (optional)
     * @param onlyAuto Only auto. (optional, default to false)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostAutofitWorksheetRowsAsync(String name, String sheetName, AutoFitterOptions autoFitterOptions, Integer startRow, Integer endRow, Boolean onlyAuto, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostAutofitWorksheetRowsValidateBeforeCall(name, sheetName, autoFitterOptions, startRow, endRow, onlyAuto, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostCopyWorksheet
     * @param name  (required)
     * @param sheetName  (required)
     * @param sourceSheet  (required)
     * @param options  (optional)
     * @param sourceWorkbook  (optional)
     * @param sourceFolder  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostCopyWorksheetCall(String name, String sheetName, String sourceSheet, CopyOptions options, String sourceWorkbook, String sourceFolder, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = options;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/copy"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (sourceSheet != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceSheet", sourceSheet));
        if (sourceWorkbook != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceWorkbook", sourceWorkbook));
        if (sourceFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sourceFolder", sourceFolder));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostCopyWorksheetValidateBeforeCall(String name, String sheetName, String sourceSheet, CopyOptions options, String sourceWorkbook, String sourceFolder, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostCopyWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostCopyWorksheet(Async)");
        }
        
        // verify the required parameter 'sourceSheet' is set
        if (sourceSheet == null) {
            throw new ApiException("Missing the required parameter 'sourceSheet' when calling cellsWorksheetsPostCopyWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostCopyWorksheetCall(name, sheetName, sourceSheet, options, sourceWorkbook, sourceFolder, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sourceSheet  (required)
     * @param options  (optional)
     * @param sourceWorkbook  (optional)
     * @param sourceFolder  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsPostCopyWorksheet(String name, String sheetName, String sourceSheet, CopyOptions options, String sourceWorkbook, String sourceFolder, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsPostCopyWorksheetWithHttpInfo(name, sheetName, sourceSheet, options, sourceWorkbook, sourceFolder, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sourceSheet  (required)
     * @param options  (optional)
     * @param sourceWorkbook  (optional)
     * @param sourceFolder  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsPostCopyWorksheetWithHttpInfo(String name, String sheetName, String sourceSheet, CopyOptions options, String sourceWorkbook, String sourceFolder, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostCopyWorksheetValidateBeforeCall(name, sheetName, sourceSheet, options, sourceWorkbook, sourceFolder, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sourceSheet  (required)
     * @param options  (optional)
     * @param sourceWorkbook  (optional)
     * @param sourceFolder  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostCopyWorksheetAsync(String name, String sheetName, String sourceSheet, CopyOptions options, String sourceWorkbook, String sourceFolder, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostCopyWorksheetValidateBeforeCall(name, sheetName, sourceSheet, options, sourceWorkbook, sourceFolder, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostMoveWorksheet
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param moving with moving parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostMoveWorksheetCall(String name, String sheetName, WorksheetMovingRequest moving, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = moving;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/position"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostMoveWorksheetValidateBeforeCall(String name, String sheetName, WorksheetMovingRequest moving, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostMoveWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostMoveWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostMoveWorksheetCall(name, sheetName, moving, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param moving with moving parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return WorksheetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetsResponse cellsWorksheetsPostMoveWorksheet(String name, String sheetName, WorksheetMovingRequest moving, String folder, String storage) throws ApiException {
        ApiResponse<WorksheetsResponse> resp = cellsWorksheetsPostMoveWorksheetWithHttpInfo(name, sheetName, moving, folder, storage);
        return resp.getData();
    }

    /**
     * Move worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param moving with moving parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;WorksheetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetsResponse> cellsWorksheetsPostMoveWorksheetWithHttpInfo(String name, String sheetName, WorksheetMovingRequest moving, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostMoveWorksheetValidateBeforeCall(name, sheetName, moving, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param moving with moving parameters. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostMoveWorksheetAsync(String name, String sheetName, WorksheetMovingRequest moving, String folder, String storage, final ApiCallback<WorksheetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostMoveWorksheetValidateBeforeCall(name, sheetName, moving, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostRenameWorksheet
     * @param name  (required)
     * @param sheetName  (required)
     * @param newname  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostRenameWorksheetCall(String name, String sheetName, String newname, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/rename"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (newname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "newname", newname));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostRenameWorksheetValidateBeforeCall(String name, String sheetName, String newname, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostRenameWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostRenameWorksheet(Async)");
        }
        
        // verify the required parameter 'newname' is set
        if (newname == null) {
            throw new ApiException("Missing the required parameter 'newname' when calling cellsWorksheetsPostRenameWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostRenameWorksheetCall(name, sheetName, newname, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Rename worksheet
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param newname  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsPostRenameWorksheet(String name, String sheetName, String newname, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsPostRenameWorksheetWithHttpInfo(name, sheetName, newname, folder, storage);
        return resp.getData();
    }

    /**
     * Rename worksheet
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param newname  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsPostRenameWorksheetWithHttpInfo(String name, String sheetName, String newname, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostRenameWorksheetValidateBeforeCall(name, sheetName, newname, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Rename worksheet (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param newname  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostRenameWorksheetAsync(String name, String sheetName, String newname, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostRenameWorksheetValidateBeforeCall(name, sheetName, newname, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostUpdateWorksheetProperty
     * @param name  (required)
     * @param sheetName  (required)
     * @param sheet  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostUpdateWorksheetPropertyCall(String name, String sheetName, Worksheet sheet, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sheet;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostUpdateWorksheetPropertyValidateBeforeCall(String name, String sheetName, Worksheet sheet, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostUpdateWorksheetProperty(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostUpdateWorksheetProperty(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostUpdateWorksheetPropertyCall(name, sheetName, sheet, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update worksheet property
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sheet  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return WorksheetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetResponse cellsWorksheetsPostUpdateWorksheetProperty(String name, String sheetName, Worksheet sheet, String folder, String storage) throws ApiException {
        ApiResponse<WorksheetResponse> resp = cellsWorksheetsPostUpdateWorksheetPropertyWithHttpInfo(name, sheetName, sheet, folder, storage);
        return resp.getData();
    }

    /**
     * Update worksheet property
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sheet  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;WorksheetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetResponse> cellsWorksheetsPostUpdateWorksheetPropertyWithHttpInfo(String name, String sheetName, Worksheet sheet, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostUpdateWorksheetPropertyValidateBeforeCall(name, sheetName, sheet, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update worksheet property (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param sheet  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostUpdateWorksheetPropertyAsync(String name, String sheetName, Worksheet sheet, String folder, String storage, final ApiCallback<WorksheetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostUpdateWorksheetPropertyValidateBeforeCall(name, sheetName, sheet, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostUpdateWorksheetZoom
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostUpdateWorksheetZoomCall(String name, String sheetName, Integer value, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/zoom"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "value", value));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostUpdateWorksheetZoomValidateBeforeCall(String name, String sheetName, Integer value, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostUpdateWorksheetZoom(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostUpdateWorksheetZoom(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cellsWorksheetsPostUpdateWorksheetZoom(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostUpdateWorksheetZoomCall(name, sheetName, value, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsPostUpdateWorksheetZoom(String name, String sheetName, Integer value, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsPostUpdateWorksheetZoomWithHttpInfo(name, sheetName, value, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsPostUpdateWorksheetZoomWithHttpInfo(String name, String sheetName, Integer value, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostUpdateWorksheetZoomValidateBeforeCall(name, sheetName, value, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param value  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostUpdateWorksheetZoomAsync(String name, String sheetName, Integer value, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostUpdateWorksheetZoomValidateBeforeCall(name, sheetName, value, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostWorksheetComment
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorksheetCommentCall(String name, String sheetName, String cellName, Comment comment, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = comment;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostWorksheetCommentValidateBeforeCall(String name, String sheetName, String cellName, Comment comment, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostWorksheetComment(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostWorksheetComment(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsWorksheetsPostWorksheetComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetCommentCall(name, sheetName, cellName, comment, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update worksheet&#39;s cell comment.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsPostWorksheetComment(String name, String sheetName, String cellName, Comment comment, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsPostWorksheetCommentWithHttpInfo(name, sheetName, cellName, comment, folder, storage);
        return resp.getData();
    }

    /**
     * Update worksheet&#39;s cell comment.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsPostWorksheetCommentWithHttpInfo(String name, String sheetName, String cellName, Comment comment, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetCommentValidateBeforeCall(name, sheetName, cellName, comment, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update worksheet&#39;s cell comment. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorksheetCommentAsync(String name, String sheetName, String cellName, Comment comment, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetCommentValidateBeforeCall(name, sheetName, cellName, comment, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostWorksheetRangeSort
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellArea The range to sort. (required)
     * @param dataSorter with sorting settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorksheetRangeSortCall(String name, String sheetName, String cellArea, DataSorter dataSorter, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dataSorter;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/sort"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellArea != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellArea", cellArea));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostWorksheetRangeSortValidateBeforeCall(String name, String sheetName, String cellArea, DataSorter dataSorter, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostWorksheetRangeSort(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostWorksheetRangeSort(Async)");
        }
        
        // verify the required parameter 'cellArea' is set
        if (cellArea == null) {
            throw new ApiException("Missing the required parameter 'cellArea' when calling cellsWorksheetsPostWorksheetRangeSort(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetRangeSortCall(name, sheetName, cellArea, dataSorter, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sort worksheet range.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellArea The range to sort. (required)
     * @param dataSorter with sorting settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsPostWorksheetRangeSort(String name, String sheetName, String cellArea, DataSorter dataSorter, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsPostWorksheetRangeSortWithHttpInfo(name, sheetName, cellArea, dataSorter, folder, storage);
        return resp.getData();
    }

    /**
     * Sort worksheet range.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellArea The range to sort. (required)
     * @param dataSorter with sorting settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsPostWorksheetRangeSortWithHttpInfo(String name, String sheetName, String cellArea, DataSorter dataSorter, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetRangeSortValidateBeforeCall(name, sheetName, cellArea, dataSorter, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sort worksheet range. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellArea The range to sort. (required)
     * @param dataSorter with sorting settings. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorksheetRangeSortAsync(String name, String sheetName, String cellArea, DataSorter dataSorter, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetRangeSortValidateBeforeCall(name, sheetName, cellArea, dataSorter, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostWorksheetTextSearch
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param text Text to search. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorksheetTextSearchCall(String name, String sheetName, String text, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/findText"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostWorksheetTextSearchValidateBeforeCall(String name, String sheetName, String text, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostWorksheetTextSearch(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostWorksheetTextSearch(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling cellsWorksheetsPostWorksheetTextSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetTextSearchCall(name, sheetName, text, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search text.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param text Text to search. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return TextItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextItemsResponse cellsWorksheetsPostWorksheetTextSearch(String name, String sheetName, String text, String folder, String storage) throws ApiException {
        ApiResponse<TextItemsResponse> resp = cellsWorksheetsPostWorksheetTextSearchWithHttpInfo(name, sheetName, text, folder, storage);
        return resp.getData();
    }

    /**
     * Search text.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param text Text to search. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;TextItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextItemsResponse> cellsWorksheetsPostWorksheetTextSearchWithHttpInfo(String name, String sheetName, String text, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetTextSearchValidateBeforeCall(name, sheetName, text, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search text. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param text Text to search. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorksheetTextSearchAsync(String name, String sheetName, String text, String folder, String storage, final ApiCallback<TextItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostWorksheetTextSearchValidateBeforeCall(name, sheetName, text, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPostWorsheetTextReplace
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param oldValue The old text to replace. (required)
     * @param newValue The new text to replace by. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorsheetTextReplaceCall(String name, String sheetName, String oldValue, String newValue, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/replaceText"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (oldValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "oldValue", oldValue));
        if (newValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "newValue", newValue));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPostWorsheetTextReplaceValidateBeforeCall(String name, String sheetName, String oldValue, String newValue, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPostWorsheetTextReplace(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPostWorsheetTextReplace(Async)");
        }
        
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling cellsWorksheetsPostWorsheetTextReplace(Async)");
        }
        
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling cellsWorksheetsPostWorsheetTextReplace(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorsheetTextReplaceCall(name, sheetName, oldValue, newValue, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace text.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param oldValue The old text to replace. (required)
     * @param newValue The new text to replace by. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return WorksheetReplaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetReplaceResponse cellsWorksheetsPostWorsheetTextReplace(String name, String sheetName, String oldValue, String newValue, String folder, String storage) throws ApiException {
        ApiResponse<WorksheetReplaceResponse> resp = cellsWorksheetsPostWorsheetTextReplaceWithHttpInfo(name, sheetName, oldValue, newValue, folder, storage);
        return resp.getData();
    }

    /**
     * Replace text.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param oldValue The old text to replace. (required)
     * @param newValue The new text to replace by. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;WorksheetReplaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetReplaceResponse> cellsWorksheetsPostWorsheetTextReplaceWithHttpInfo(String name, String sheetName, String oldValue, String newValue, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPostWorsheetTextReplaceValidateBeforeCall(name, sheetName, oldValue, newValue, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<WorksheetReplaceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace text. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param oldValue The old text to replace. (required)
     * @param newValue The new text to replace by. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPostWorsheetTextReplaceAsync(String name, String sheetName, String oldValue, String newValue, String folder, String storage, final ApiCallback<WorksheetReplaceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPostWorsheetTextReplaceValidateBeforeCall(name, sheetName, oldValue, newValue, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetReplaceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPutAddNewWorksheet
     * @param name Document name. (required)
     * @param sheetName The new sheet name. (required)
     * @param position The new sheet position. (optional)
     * @param sheettype The new sheet type. (optional)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutAddNewWorksheetCall(String name, String sheetName, Integer position, String sheettype, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (position != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "position", position));
        if (sheettype != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sheettype", sheettype));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPutAddNewWorksheetValidateBeforeCall(String name, String sheetName, Integer position, String sheettype, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPutAddNewWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPutAddNewWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPutAddNewWorksheetCall(name, sheetName, position, sheettype, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add new worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The new sheet name. (required)
     * @param position The new sheet position. (optional)
     * @param sheettype The new sheet type. (optional)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return WorksheetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetsResponse cellsWorksheetsPutAddNewWorksheet(String name, String sheetName, Integer position, String sheettype, String folder, String storage) throws ApiException {
        ApiResponse<WorksheetsResponse> resp = cellsWorksheetsPutAddNewWorksheetWithHttpInfo(name, sheetName, position, sheettype, folder, storage);
        return resp.getData();
    }

    /**
     * Add new worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The new sheet name. (required)
     * @param position The new sheet position. (optional)
     * @param sheettype The new sheet type. (optional)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;WorksheetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetsResponse> cellsWorksheetsPutAddNewWorksheetWithHttpInfo(String name, String sheetName, Integer position, String sheettype, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPutAddNewWorksheetValidateBeforeCall(name, sheetName, position, sheettype, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The new sheet name. (required)
     * @param position The new sheet position. (optional)
     * @param sheettype The new sheet type. (optional)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutAddNewWorksheetAsync(String name, String sheetName, Integer position, String sheettype, String folder, String storage, final ApiCallback<WorksheetsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPutAddNewWorksheetValidateBeforeCall(name, sheetName, position, sheettype, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPutChangeVisibilityWorksheet
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param isVisible New worksheet visibility value. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutChangeVisibilityWorksheetCall(String name, String sheetName, Boolean isVisible, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/visible"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (isVisible != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isVisible", isVisible));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPutChangeVisibilityWorksheetValidateBeforeCall(String name, String sheetName, Boolean isVisible, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPutChangeVisibilityWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPutChangeVisibilityWorksheet(Async)");
        }
        
        // verify the required parameter 'isVisible' is set
        if (isVisible == null) {
            throw new ApiException("Missing the required parameter 'isVisible' when calling cellsWorksheetsPutChangeVisibilityWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPutChangeVisibilityWorksheetCall(name, sheetName, isVisible, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change worksheet visibility.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param isVisible New worksheet visibility value. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return WorksheetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetResponse cellsWorksheetsPutChangeVisibilityWorksheet(String name, String sheetName, Boolean isVisible, String folder, String storage) throws ApiException {
        ApiResponse<WorksheetResponse> resp = cellsWorksheetsPutChangeVisibilityWorksheetWithHttpInfo(name, sheetName, isVisible, folder, storage);
        return resp.getData();
    }

    /**
     * Change worksheet visibility.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param isVisible New worksheet visibility value. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;WorksheetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetResponse> cellsWorksheetsPutChangeVisibilityWorksheetWithHttpInfo(String name, String sheetName, Boolean isVisible, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPutChangeVisibilityWorksheetValidateBeforeCall(name, sheetName, isVisible, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change worksheet visibility. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param isVisible New worksheet visibility value. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutChangeVisibilityWorksheetAsync(String name, String sheetName, Boolean isVisible, String folder, String storage, final ApiCallback<WorksheetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPutChangeVisibilityWorksheetValidateBeforeCall(name, sheetName, isVisible, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPutProtectWorksheet
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. (optional)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutProtectWorksheetCall(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = protectParameter;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/protection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPutProtectWorksheetValidateBeforeCall(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPutProtectWorksheet(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPutProtectWorksheet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPutProtectWorksheetCall(name, sheetName, protectParameter, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Protect worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. (optional)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return WorksheetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WorksheetResponse cellsWorksheetsPutProtectWorksheet(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storage) throws ApiException {
        ApiResponse<WorksheetResponse> resp = cellsWorksheetsPutProtectWorksheetWithHttpInfo(name, sheetName, protectParameter, folder, storage);
        return resp.getData();
    }

    /**
     * Protect worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. (optional)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;WorksheetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WorksheetResponse> cellsWorksheetsPutProtectWorksheetWithHttpInfo(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPutProtectWorksheetValidateBeforeCall(name, sheetName, protectParameter, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Protect worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param protectParameter with protection settings. (optional)
     * @param folder Document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutProtectWorksheetAsync(String name, String sheetName, ProtectSheetParameter protectParameter, String folder, String storage, final ApiCallback<WorksheetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPutProtectWorksheetValidateBeforeCall(name, sheetName, protectParameter, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WorksheetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPutWorksheetBackground
     * @param name  (required)
     * @param sheetName  (required)
     * @param png  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutWorksheetBackgroundCall(String name, String sheetName, byte[] png, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = png;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/background"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPutWorksheetBackgroundValidateBeforeCall(String name, String sheetName, byte[] png, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPutWorksheetBackground(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPutWorksheetBackground(Async)");
        }
        
        // verify the required parameter 'png' is set
        if (png == null) {
            throw new ApiException("Missing the required parameter 'png' when calling cellsWorksheetsPutWorksheetBackground(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetBackgroundCall(name, sheetName, png, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set worksheet background image.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param png  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsPutWorksheetBackground(String name, String sheetName, byte[] png, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsPutWorksheetBackgroundWithHttpInfo(name, sheetName, png, folder, storage);
        return resp.getData();
    }

    /**
     * Set worksheet background image.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param png  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsPutWorksheetBackgroundWithHttpInfo(String name, String sheetName, byte[] png, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetBackgroundValidateBeforeCall(name, sheetName, png, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set worksheet background image. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param png  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutWorksheetBackgroundAsync(String name, String sheetName, byte[] png, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetBackgroundValidateBeforeCall(name, sheetName, png, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPutWorksheetComment
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutWorksheetCommentCall(String name, String sheetName, String cellName, Comment comment, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = comment;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "cellName" + "\\}", apiClient.escapeString(cellName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPutWorksheetCommentValidateBeforeCall(String name, String sheetName, String cellName, Comment comment, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPutWorksheetComment(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPutWorksheetComment(Async)");
        }
        
        // verify the required parameter 'cellName' is set
        if (cellName == null) {
            throw new ApiException("Missing the required parameter 'cellName' when calling cellsWorksheetsPutWorksheetComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetCommentCall(name, sheetName, cellName, comment, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add worksheet&#39;s cell comment.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return CommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResponse cellsWorksheetsPutWorksheetComment(String name, String sheetName, String cellName, Comment comment, String folder, String storage) throws ApiException {
        ApiResponse<CommentResponse> resp = cellsWorksheetsPutWorksheetCommentWithHttpInfo(name, sheetName, cellName, comment, folder, storage);
        return resp.getData();
    }

    /**
     * Add worksheet&#39;s cell comment.
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;CommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResponse> cellsWorksheetsPutWorksheetCommentWithHttpInfo(String name, String sheetName, String cellName, Comment comment, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetCommentValidateBeforeCall(name, sheetName, cellName, comment, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<CommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add worksheet&#39;s cell comment. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param cellName The cell name (required)
     * @param comment Comment object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutWorksheetCommentAsync(String name, String sheetName, String cellName, Comment comment, String folder, String storage, final ApiCallback<CommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetCommentValidateBeforeCall(name, sheetName, cellName, comment, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsWorksheetsPutWorksheetFreezePanes
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutWorksheetFreezePanesCall(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/freezepanes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (freezedRows != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "freezedRows", freezedRows));
        if (freezedColumns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "freezedColumns", freezedColumns));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsWorksheetsPutWorksheetFreezePanesValidateBeforeCall(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsWorksheetsPutWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsWorksheetsPutWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'row' is set
        if (row == null) {
            throw new ApiException("Missing the required parameter 'row' when calling cellsWorksheetsPutWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'column' is set
        if (column == null) {
            throw new ApiException("Missing the required parameter 'column' when calling cellsWorksheetsPutWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'freezedRows' is set
        if (freezedRows == null) {
            throw new ApiException("Missing the required parameter 'freezedRows' when calling cellsWorksheetsPutWorksheetFreezePanes(Async)");
        }
        
        // verify the required parameter 'freezedColumns' is set
        if (freezedColumns == null) {
            throw new ApiException("Missing the required parameter 'freezedColumns' when calling cellsWorksheetsPutWorksheetFreezePanes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetFreezePanesCall(name, sheetName, row, column, freezedRows, freezedColumns, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set freeze panes
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsWorksheetsPutWorksheetFreezePanes(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsWorksheetsPutWorksheetFreezePanesWithHttpInfo(name, sheetName, row, column, freezedRows, freezedColumns, folder, storage);
        return resp.getData();
    }

    /**
     * Set freeze panes
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsWorksheetsPutWorksheetFreezePanesWithHttpInfo(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetFreezePanesValidateBeforeCall(name, sheetName, row, column, freezedRows, freezedColumns, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set freeze panes (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (required)
     * @param column  (required)
     * @param freezedRows  (required)
     * @param freezedColumns  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsWorksheetsPutWorksheetFreezePanesAsync(String name, String sheetName, Integer row, Integer column, Integer freezedRows, Integer freezedColumns, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsWorksheetsPutWorksheetFreezePanesValidateBeforeCall(name, sheetName, row, column, freezedRows, freezedColumns, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
