/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.AutoFilterResponse;
import com.aspose.cloud.cells.model.ColorFilterRequest;
import com.aspose.cloud.cells.model.SaaSposeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsAutoFilterApi {
    private ApiClient apiClient;

    public CellsAutoFilterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsAutoFilterApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsAutoFilterDeleteWorksheetDateFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterDeleteWorksheetDateFilterCall(String name, String sheetName, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (dateTimeGroupingType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateTimeGroupingType", dateTimeGroupingType));
        if (year != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "year", year));
        if (month != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "month", month));
        if (day != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "day", day));
        if (hour != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hour", hour));
        if (minute != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "minute", minute));
        if (second != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "second", second));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterDeleteWorksheetDateFilterValidateBeforeCall(String name, String sheetName, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterDeleteWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterDeleteWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterDeleteWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'dateTimeGroupingType' is set
        if (dateTimeGroupingType == null) {
            throw new ApiException("Missing the required parameter 'dateTimeGroupingType' when calling cellsAutoFilterDeleteWorksheetDateFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterDeleteWorksheetDateFilterCall(name, sheetName, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes a date filter.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsAutoFilterDeleteWorksheetDateFilter(String name, String sheetName, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo(name, sheetName, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, folder, storage);
        return resp.getData();
    }

    /**
     * Removes a date filter.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsAutoFilterDeleteWorksheetDateFilterWithHttpInfo(String name, String sheetName, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterDeleteWorksheetDateFilterValidateBeforeCall(name, sheetName, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes a date filter.              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterDeleteWorksheetDateFilterAsync(String name, String sheetName, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterDeleteWorksheetDateFilterValidateBeforeCall(name, sheetName, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterDeleteWorksheetFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param criteria  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterDeleteWorksheetFilterCall(String name, String sheetName, Integer fieldIndex, String criteria, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (criteria != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria", criteria));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterDeleteWorksheetFilterValidateBeforeCall(String name, String sheetName, Integer fieldIndex, String criteria, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterDeleteWorksheetFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterDeleteWorksheetFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterDeleteWorksheetFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterDeleteWorksheetFilterCall(name, sheetName, fieldIndex, criteria, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a filter for a filter column.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param criteria  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsAutoFilterDeleteWorksheetFilter(String name, String sheetName, Integer fieldIndex, String criteria, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsAutoFilterDeleteWorksheetFilterWithHttpInfo(name, sheetName, fieldIndex, criteria, folder, storage);
        return resp.getData();
    }

    /**
     * Delete a filter for a filter column.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param criteria  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsAutoFilterDeleteWorksheetFilterWithHttpInfo(String name, String sheetName, Integer fieldIndex, String criteria, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterDeleteWorksheetFilterValidateBeforeCall(name, sheetName, fieldIndex, criteria, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a filter for a filter column.              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param criteria  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterDeleteWorksheetFilterAsync(String name, String sheetName, Integer fieldIndex, String criteria, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterDeleteWorksheetFilterValidateBeforeCall(name, sheetName, fieldIndex, criteria, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterGetWorksheetAutoFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterGetWorksheetAutoFilterCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterGetWorksheetAutoFilterValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterGetWorksheetAutoFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterGetWorksheetAutoFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterGetWorksheetAutoFilterCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Auto filter Description
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return AutoFilterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoFilterResponse cellsAutoFilterGetWorksheetAutoFilter(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<AutoFilterResponse> resp = cellsAutoFilterGetWorksheetAutoFilterWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Get Auto filter Description
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;AutoFilterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoFilterResponse> cellsAutoFilterGetWorksheetAutoFilterWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterGetWorksheetAutoFilterValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AutoFilterResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Auto filter Description (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterGetWorksheetAutoFilterAsync(String name, String sheetName, String folder, String storage, final ApiCallback<AutoFilterResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterGetWorksheetAutoFilterValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoFilterResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPostWorksheetAutoFilterRefresh
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPostWorksheetAutoFilterRefreshCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/refresh"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPostWorksheetAutoFilterRefreshValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPostWorksheetAutoFilterRefresh(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPostWorksheetAutoFilterRefresh(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetAutoFilterRefreshCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsAutoFilterPostWorksheetAutoFilterRefresh(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsAutoFilterPostWorksheetAutoFilterRefreshWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetAutoFilterRefreshValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPostWorksheetAutoFilterRefreshAsync(String name, String sheetName, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetAutoFilterRefreshValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPostWorksheetMatchBlanks
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPostWorksheetMatchBlanksCall(String name, String sheetName, Integer fieldIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchBlanks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPostWorksheetMatchBlanksValidateBeforeCall(String name, String sheetName, Integer fieldIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPostWorksheetMatchBlanks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPostWorksheetMatchBlanks(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPostWorksheetMatchBlanks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetMatchBlanksCall(name, sheetName, fieldIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Match all blank cell in the list.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsAutoFilterPostWorksheetMatchBlanks(String name, String sheetName, Integer fieldIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo(name, sheetName, fieldIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Match all blank cell in the list.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsAutoFilterPostWorksheetMatchBlanksWithHttpInfo(String name, String sheetName, Integer fieldIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetMatchBlanksValidateBeforeCall(name, sheetName, fieldIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Match all blank cell in the list. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPostWorksheetMatchBlanksAsync(String name, String sheetName, Integer fieldIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetMatchBlanksValidateBeforeCall(name, sheetName, fieldIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPostWorksheetMatchNonBlanks
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPostWorksheetMatchNonBlanksCall(String name, String sheetName, Integer fieldIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchNonBlanks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPostWorksheetMatchNonBlanksValidateBeforeCall(String name, String sheetName, Integer fieldIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPostWorksheetMatchNonBlanks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPostWorksheetMatchNonBlanks(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPostWorksheetMatchNonBlanks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetMatchNonBlanksCall(name, sheetName, fieldIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Match all not blank cell in the list.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsAutoFilterPostWorksheetMatchNonBlanks(String name, String sheetName, Integer fieldIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo(name, sheetName, fieldIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Match all not blank cell in the list.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsAutoFilterPostWorksheetMatchNonBlanksWithHttpInfo(String name, String sheetName, Integer fieldIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetMatchNonBlanksValidateBeforeCall(name, sheetName, fieldIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Match all not blank cell in the list.              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param fieldIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPostWorksheetMatchNonBlanksAsync(String name, String sheetName, Integer fieldIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPostWorksheetMatchNonBlanksValidateBeforeCall(name, sheetName, fieldIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetColorFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param colorFilter  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetColorFilterCall(String name, String sheetName, String range, Integer fieldIndex, ColorFilterRequest colorFilter, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = colorFilter;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/colorFilter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetColorFilterValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, ColorFilterRequest colorFilter, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetColorFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetColorFilter(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetColorFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetColorFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetColorFilterCall(name, sheetName, range, fieldIndex, colorFilter, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param colorFilter  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsAutoFilterPutWorksheetColorFilter(String name, String sheetName, String range, Integer fieldIndex, ColorFilterRequest colorFilter, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsAutoFilterPutWorksheetColorFilterWithHttpInfo(name, sheetName, range, fieldIndex, colorFilter, matchBlanks, refresh, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param colorFilter  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsAutoFilterPutWorksheetColorFilterWithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, ColorFilterRequest colorFilter, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetColorFilterValidateBeforeCall(name, sheetName, range, fieldIndex, colorFilter, matchBlanks, refresh, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param colorFilter  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetColorFilterAsync(String name, String sheetName, String range, Integer fieldIndex, ColorFilterRequest colorFilter, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetColorFilterValidateBeforeCall(name, sheetName, range, fieldIndex, colorFilter, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetCustomFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param operatorType1  (required)
     * @param criteria1  (required)
     * @param isAnd  (optional)
     * @param operatorType2  (optional)
     * @param criteria2  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetCustomFilterCall(String name, String sheetName, String range, Integer fieldIndex, String operatorType1, String criteria1, Boolean isAnd, String operatorType2, String criteria2, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/custom"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (operatorType1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "operatorType1", operatorType1));
        if (criteria1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria1", criteria1));
        if (isAnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isAnd", isAnd));
        if (operatorType2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "operatorType2", operatorType2));
        if (criteria2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria2", criteria2));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetCustomFilterValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, String operatorType1, String criteria1, Boolean isAnd, String operatorType2, String criteria2, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetCustomFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetCustomFilter(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetCustomFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetCustomFilter(Async)");
        }
        
        // verify the required parameter 'operatorType1' is set
        if (operatorType1 == null) {
            throw new ApiException("Missing the required parameter 'operatorType1' when calling cellsAutoFilterPutWorksheetCustomFilter(Async)");
        }
        
        // verify the required parameter 'criteria1' is set
        if (criteria1 == null) {
            throw new ApiException("Missing the required parameter 'criteria1' when calling cellsAutoFilterPutWorksheetCustomFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetCustomFilterCall(name, sheetName, range, fieldIndex, operatorType1, criteria1, isAnd, operatorType2, criteria2, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Filters a list with a custom criteria.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param operatorType1  (required)
     * @param criteria1  (required)
     * @param isAnd  (optional)
     * @param operatorType2  (optional)
     * @param criteria2  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsAutoFilterPutWorksheetCustomFilter(String name, String sheetName, String range, Integer fieldIndex, String operatorType1, String criteria1, Boolean isAnd, String operatorType2, String criteria2, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsAutoFilterPutWorksheetCustomFilterWithHttpInfo(name, sheetName, range, fieldIndex, operatorType1, criteria1, isAnd, operatorType2, criteria2, matchBlanks, refresh, folder, storage);
        return resp.getData();
    }

    /**
     * Filters a list with a custom criteria.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param operatorType1  (required)
     * @param criteria1  (required)
     * @param isAnd  (optional)
     * @param operatorType2  (optional)
     * @param criteria2  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsAutoFilterPutWorksheetCustomFilterWithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, String operatorType1, String criteria1, Boolean isAnd, String operatorType2, String criteria2, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetCustomFilterValidateBeforeCall(name, sheetName, range, fieldIndex, operatorType1, criteria1, isAnd, operatorType2, criteria2, matchBlanks, refresh, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Filters a list with a custom criteria.              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param operatorType1  (required)
     * @param criteria1  (required)
     * @param isAnd  (optional)
     * @param operatorType2  (optional)
     * @param criteria2  (optional)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetCustomFilterAsync(String name, String sheetName, String range, Integer fieldIndex, String operatorType1, String criteria1, Boolean isAnd, String operatorType2, String criteria2, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetCustomFilterValidateBeforeCall(name, sheetName, range, fieldIndex, operatorType1, criteria1, isAnd, operatorType2, criteria2, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetDateFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetDateFilterCall(String name, String sheetName, String range, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (dateTimeGroupingType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dateTimeGroupingType", dateTimeGroupingType));
        if (year != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "year", year));
        if (month != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "month", month));
        if (day != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "day", day));
        if (hour != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hour", hour));
        if (minute != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "minute", minute));
        if (second != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "second", second));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetDateFilterValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetDateFilter(Async)");
        }
        
        // verify the required parameter 'dateTimeGroupingType' is set
        if (dateTimeGroupingType == null) {
            throw new ApiException("Missing the required parameter 'dateTimeGroupingType' when calling cellsAutoFilterPutWorksheetDateFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetDateFilterCall(name, sheetName, range, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * add date filter in worksheet 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsAutoFilterPutWorksheetDateFilter(String name, String sheetName, String range, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsAutoFilterPutWorksheetDateFilterWithHttpInfo(name, sheetName, range, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, matchBlanks, refresh, folder, storage);
        return resp.getData();
    }

    /**
     * add date filter in worksheet 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsAutoFilterPutWorksheetDateFilterWithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetDateFilterValidateBeforeCall(name, sheetName, range, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, matchBlanks, refresh, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * add date filter in worksheet  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dateTimeGroupingType  (required)
     * @param year  (optional, default to 0)
     * @param month  (optional, default to 0)
     * @param day  (optional, default to 0)
     * @param hour  (optional, default to 0)
     * @param minute  (optional, default to 0)
     * @param second  (optional, default to 0)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetDateFilterAsync(String name, String sheetName, String range, Integer fieldIndex, String dateTimeGroupingType, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetDateFilterValidateBeforeCall(name, sheetName, range, fieldIndex, dateTimeGroupingType, year, month, day, hour, minute, second, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetDynamicFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dynamicFilterType  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetDynamicFilterCall(String name, String sheetName, String range, Integer fieldIndex, String dynamicFilterType, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/dynamicFilter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (dynamicFilterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dynamicFilterType", dynamicFilterType));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetDynamicFilterValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, String dynamicFilterType, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetDynamicFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetDynamicFilter(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetDynamicFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetDynamicFilter(Async)");
        }
        
        // verify the required parameter 'dynamicFilterType' is set
        if (dynamicFilterType == null) {
            throw new ApiException("Missing the required parameter 'dynamicFilterType' when calling cellsAutoFilterPutWorksheetDynamicFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetDynamicFilterCall(name, sheetName, range, fieldIndex, dynamicFilterType, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dynamicFilterType  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsAutoFilterPutWorksheetDynamicFilter(String name, String sheetName, String range, Integer fieldIndex, String dynamicFilterType, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo(name, sheetName, range, fieldIndex, dynamicFilterType, matchBlanks, refresh, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dynamicFilterType  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsAutoFilterPutWorksheetDynamicFilterWithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, String dynamicFilterType, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetDynamicFilterValidateBeforeCall(name, sheetName, range, fieldIndex, dynamicFilterType, matchBlanks, refresh, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param dynamicFilterType  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetDynamicFilterAsync(String name, String sheetName, String range, Integer fieldIndex, String dynamicFilterType, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetDynamicFilterValidateBeforeCall(name, sheetName, range, fieldIndex, dynamicFilterType, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param criteria  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetFilterCall(String name, String sheetName, String range, Integer fieldIndex, String criteria, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (criteria != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "criteria", criteria));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetFilterValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, String criteria, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetFilter(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetFilter(Async)");
        }
        
        // verify the required parameter 'criteria' is set
        if (criteria == null) {
            throw new ApiException("Missing the required parameter 'criteria' when calling cellsAutoFilterPutWorksheetFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetFilterCall(name, sheetName, range, fieldIndex, criteria, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a filter for a filter column.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param criteria  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsAutoFilterPutWorksheetFilter(String name, String sheetName, String range, Integer fieldIndex, String criteria, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsAutoFilterPutWorksheetFilterWithHttpInfo(name, sheetName, range, fieldIndex, criteria, matchBlanks, refresh, folder, storage);
        return resp.getData();
    }

    /**
     * Adds a filter for a filter column.             
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param criteria  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsAutoFilterPutWorksheetFilterWithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, String criteria, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetFilterValidateBeforeCall(name, sheetName, range, fieldIndex, criteria, matchBlanks, refresh, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a filter for a filter column.              (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param criteria  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetFilterAsync(String name, String sheetName, String range, Integer fieldIndex, String criteria, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetFilterValidateBeforeCall(name, sheetName, range, fieldIndex, criteria, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetFilterTop10
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param isTop  (required)
     * @param isPercent  (required)
     * @param itemCount  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetFilterTop10Call(String name, String sheetName, String range, Integer fieldIndex, Boolean isTop, Boolean isPercent, Integer itemCount, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/filterTop10"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (isTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isTop", isTop));
        if (isPercent != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isPercent", isPercent));
        if (itemCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "itemCount", itemCount));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetFilterTop10ValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, Boolean isTop, Boolean isPercent, Integer itemCount, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        // verify the required parameter 'isTop' is set
        if (isTop == null) {
            throw new ApiException("Missing the required parameter 'isTop' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        // verify the required parameter 'isPercent' is set
        if (isPercent == null) {
            throw new ApiException("Missing the required parameter 'isPercent' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        // verify the required parameter 'itemCount' is set
        if (itemCount == null) {
            throw new ApiException("Missing the required parameter 'itemCount' when calling cellsAutoFilterPutWorksheetFilterTop10(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetFilterTop10Call(name, sheetName, range, fieldIndex, isTop, isPercent, itemCount, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Filter the top 10 item in the list
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param isTop  (required)
     * @param isPercent  (required)
     * @param itemCount  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsAutoFilterPutWorksheetFilterTop10(String name, String sheetName, String range, Integer fieldIndex, Boolean isTop, Boolean isPercent, Integer itemCount, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsAutoFilterPutWorksheetFilterTop10WithHttpInfo(name, sheetName, range, fieldIndex, isTop, isPercent, itemCount, matchBlanks, refresh, folder, storage);
        return resp.getData();
    }

    /**
     * Filter the top 10 item in the list
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param isTop  (required)
     * @param isPercent  (required)
     * @param itemCount  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsAutoFilterPutWorksheetFilterTop10WithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, Boolean isTop, Boolean isPercent, Integer itemCount, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetFilterTop10ValidateBeforeCall(name, sheetName, range, fieldIndex, isTop, isPercent, itemCount, matchBlanks, refresh, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Filter the top 10 item in the list (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param isTop  (required)
     * @param isPercent  (required)
     * @param itemCount  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetFilterTop10Async(String name, String sheetName, String range, Integer fieldIndex, Boolean isTop, Boolean isPercent, Integer itemCount, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetFilterTop10ValidateBeforeCall(name, sheetName, range, fieldIndex, isTop, isPercent, itemCount, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsAutoFilterPutWorksheetIconFilter
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param iconSetType  (required)
     * @param iconId  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetIconFilterCall(String name, String sheetName, String range, Integer fieldIndex, String iconSetType, Integer iconId, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/autoFilter/iconFilter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (range != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "range", range));
        if (fieldIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fieldIndex", fieldIndex));
        if (iconSetType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "iconSetType", iconSetType));
        if (iconId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "iconId", iconId));
        if (matchBlanks != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "matchBlanks", matchBlanks));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh", refresh));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsAutoFilterPutWorksheetIconFilterValidateBeforeCall(String name, String sheetName, String range, Integer fieldIndex, String iconSetType, Integer iconId, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsAutoFilterPutWorksheetIconFilter(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsAutoFilterPutWorksheetIconFilter(Async)");
        }
        
        // verify the required parameter 'range' is set
        if (range == null) {
            throw new ApiException("Missing the required parameter 'range' when calling cellsAutoFilterPutWorksheetIconFilter(Async)");
        }
        
        // verify the required parameter 'fieldIndex' is set
        if (fieldIndex == null) {
            throw new ApiException("Missing the required parameter 'fieldIndex' when calling cellsAutoFilterPutWorksheetIconFilter(Async)");
        }
        
        // verify the required parameter 'iconSetType' is set
        if (iconSetType == null) {
            throw new ApiException("Missing the required parameter 'iconSetType' when calling cellsAutoFilterPutWorksheetIconFilter(Async)");
        }
        
        // verify the required parameter 'iconId' is set
        if (iconId == null) {
            throw new ApiException("Missing the required parameter 'iconId' when calling cellsAutoFilterPutWorksheetIconFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetIconFilterCall(name, sheetName, range, fieldIndex, iconSetType, iconId, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds an icon filter.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param iconSetType  (required)
     * @param iconId  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsAutoFilterPutWorksheetIconFilter(String name, String sheetName, String range, Integer fieldIndex, String iconSetType, Integer iconId, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsAutoFilterPutWorksheetIconFilterWithHttpInfo(name, sheetName, range, fieldIndex, iconSetType, iconId, matchBlanks, refresh, folder, storage);
        return resp.getData();
    }

    /**
     * Adds an icon filter.
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param iconSetType  (required)
     * @param iconId  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsAutoFilterPutWorksheetIconFilterWithHttpInfo(String name, String sheetName, String range, Integer fieldIndex, String iconSetType, Integer iconId, Boolean matchBlanks, Boolean refresh, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetIconFilterValidateBeforeCall(name, sheetName, range, fieldIndex, iconSetType, iconId, matchBlanks, refresh, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds an icon filter. (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param range  (required)
     * @param fieldIndex  (required)
     * @param iconSetType  (required)
     * @param iconId  (required)
     * @param matchBlanks  (optional)
     * @param refresh  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsAutoFilterPutWorksheetIconFilterAsync(String name, String sheetName, String range, Integer fieldIndex, String iconSetType, Integer iconId, Boolean matchBlanks, Boolean refresh, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsAutoFilterPutWorksheetIconFilterValidateBeforeCall(name, sheetName, range, fieldIndex, iconSetType, iconId, matchBlanks, refresh, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
