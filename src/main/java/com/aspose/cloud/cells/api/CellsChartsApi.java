/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.Chart;
import com.aspose.cloud.cells.model.ChartsResponse;
import java.io.File;
import com.aspose.cloud.cells.model.Legend;
import com.aspose.cloud.cells.model.LegendResponse;
import com.aspose.cloud.cells.model.SaaSposeResponse;
import com.aspose.cloud.cells.model.Title;
import com.aspose.cloud.cells.model.TitleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsChartsApi {
    private ApiClient apiClient;

    public CellsChartsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsChartsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsChartsDeleteWorksheetChartLegend
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetChartLegendCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsDeleteWorksheetChartLegendValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsDeleteWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsDeleteWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsDeleteWorksheetChartLegend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetChartLegendCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Hide legend in chart
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsChartsDeleteWorksheetChartLegend(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsChartsDeleteWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Hide legend in chart
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsChartsDeleteWorksheetChartLegendWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Hide legend in chart (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetChartLegendAsync(String name, String sheetName, Integer chartIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsDeleteWorksheetChartTitle
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetChartTitleCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsDeleteWorksheetChartTitleValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsDeleteWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsDeleteWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsDeleteWorksheetChartTitle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetChartTitleCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Hide title in chart
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsChartsDeleteWorksheetChartTitle(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsChartsDeleteWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Hide title in chart
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsChartsDeleteWorksheetChartTitleWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Hide title in chart (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetChartTitleAsync(String name, String sheetName, Integer chartIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsDeleteWorksheetClearCharts
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetClearChartsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsDeleteWorksheetClearChartsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsDeleteWorksheetClearCharts(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsDeleteWorksheetClearCharts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetClearChartsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clear the charts.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsChartsDeleteWorksheetClearCharts(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsChartsDeleteWorksheetClearChartsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Clear the charts.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsChartsDeleteWorksheetClearChartsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetClearChartsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clear the charts. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetClearChartsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetClearChartsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsDeleteWorksheetDeleteChart
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetDeleteChartCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsDeleteWorksheetDeleteChartValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsDeleteWorksheetDeleteChart(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsDeleteWorksheetDeleteChart(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsDeleteWorksheetDeleteChart(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetDeleteChartCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet chart by index.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ChartsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChartsResponse cellsChartsDeleteWorksheetDeleteChart(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        ApiResponse<ChartsResponse> resp = cellsChartsDeleteWorksheetDeleteChartWithHttpInfo(name, sheetName, chartIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Delete worksheet chart by index.
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ChartsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChartsResponse> cellsChartsDeleteWorksheetDeleteChartWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetDeleteChartValidateBeforeCall(name, sheetName, chartIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ChartsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet chart by index. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsDeleteWorksheetDeleteChartAsync(String name, String sheetName, Integer chartIndex, String folder, String storage, final ApiCallback<ChartsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsDeleteWorksheetDeleteChartValidateBeforeCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChartsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsGetWorksheetChart
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartNumber The chart number. (required)
     * @param format The exported file format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartCall(String name, String sheetName, Integer chartNumber, String format, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartNumber}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartNumber" + "\\}", apiClient.escapeString(chartNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsGetWorksheetChartValidateBeforeCall(String name, String sheetName, Integer chartNumber, String format, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsGetWorksheetChart(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsGetWorksheetChart(Async)");
        }
        
        // verify the required parameter 'chartNumber' is set
        if (chartNumber == null) {
            throw new ApiException("Missing the required parameter 'chartNumber' when calling cellsChartsGetWorksheetChart(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartCall(name, sheetName, chartNumber, format, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chart info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartNumber The chart number. (required)
     * @param format The exported file format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsChartsGetWorksheetChart(String name, String sheetName, Integer chartNumber, String format, String folder, String storage) throws ApiException {
        ApiResponse<File> resp = cellsChartsGetWorksheetChartWithHttpInfo(name, sheetName, chartNumber, format, folder, storage);
        return resp.getData();
    }

    /**
     * Get chart info.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartNumber The chart number. (required)
     * @param format The exported file format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsChartsGetWorksheetChartWithHttpInfo(String name, String sheetName, Integer chartNumber, String format, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartValidateBeforeCall(name, sheetName, chartNumber, format, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chart info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartNumber The chart number. (required)
     * @param format The exported file format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartAsync(String name, String sheetName, Integer chartNumber, String format, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartValidateBeforeCall(name, sheetName, chartNumber, format, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsGetWorksheetChartLegend
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartLegendCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsGetWorksheetChartLegendValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsGetWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsGetWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsGetWorksheetChartLegend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartLegendCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chart legend
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return LegendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegendResponse cellsChartsGetWorksheetChartLegend(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        ApiResponse<LegendResponse> resp = cellsChartsGetWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Get chart legend
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;LegendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegendResponse> cellsChartsGetWorksheetChartLegendWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<LegendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chart legend (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartLegendAsync(String name, String sheetName, Integer chartIndex, String folder, String storage, final ApiCallback<LegendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsGetWorksheetChartTitle
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartTitleCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsGetWorksheetChartTitleValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsGetWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsGetWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsGetWorksheetChartTitle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartTitleCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get chart title
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return TitleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TitleResponse cellsChartsGetWorksheetChartTitle(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        ApiResponse<TitleResponse> resp = cellsChartsGetWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Get chart title
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;TitleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TitleResponse> cellsChartsGetWorksheetChartTitleWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<TitleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chart title (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartTitleAsync(String name, String sheetName, Integer chartIndex, String folder, String storage, final ApiCallback<TitleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TitleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsGetWorksheetCharts
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsGetWorksheetChartsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsGetWorksheetCharts(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsGetWorksheetCharts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet charts info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ChartsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChartsResponse cellsChartsGetWorksheetCharts(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<ChartsResponse> resp = cellsChartsGetWorksheetChartsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet charts info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ChartsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChartsResponse> cellsChartsGetWorksheetChartsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ChartsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet charts info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsGetWorksheetChartsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<ChartsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsGetWorksheetChartsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChartsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsPostWorksheetChart
     * @param name  (required)
     * @param sheetName  (required)
     * @param chartIndex  (required)
     * @param chart  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPostWorksheetChartCall(String name, String sheetName, Integer chartIndex, Chart chart, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = chart;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsPostWorksheetChartValidateBeforeCall(String name, String sheetName, Integer chartIndex, Chart chart, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsPostWorksheetChart(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsPostWorksheetChart(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsPostWorksheetChart(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartCall(name, sheetName, chartIndex, chart, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update chart propreties
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param chartIndex  (required)
     * @param chart  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsChartsPostWorksheetChart(String name, String sheetName, Integer chartIndex, Chart chart, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsChartsPostWorksheetChartWithHttpInfo(name, sheetName, chartIndex, chart, folder, storage);
        return resp.getData();
    }

    /**
     * Update chart propreties
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param chartIndex  (required)
     * @param chart  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsChartsPostWorksheetChartWithHttpInfo(String name, String sheetName, Integer chartIndex, Chart chart, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartValidateBeforeCall(name, sheetName, chartIndex, chart, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update chart propreties (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param chartIndex  (required)
     * @param chart  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPostWorksheetChartAsync(String name, String sheetName, Integer chartIndex, Chart chart, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartValidateBeforeCall(name, sheetName, chartIndex, chart, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsPostWorksheetChartLegend
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param legend  (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPostWorksheetChartLegendCall(String name, String sheetName, Integer chartIndex, Legend legend, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = legend;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsPostWorksheetChartLegendValidateBeforeCall(String name, String sheetName, Integer chartIndex, Legend legend, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsPostWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsPostWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsPostWorksheetChartLegend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartLegendCall(name, sheetName, chartIndex, legend, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update chart legend
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param legend  (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return LegendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegendResponse cellsChartsPostWorksheetChartLegend(String name, String sheetName, Integer chartIndex, Legend legend, String folder, String storage) throws ApiException {
        ApiResponse<LegendResponse> resp = cellsChartsPostWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, legend, folder, storage);
        return resp.getData();
    }

    /**
     * Update chart legend
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param legend  (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;LegendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegendResponse> cellsChartsPostWorksheetChartLegendWithHttpInfo(String name, String sheetName, Integer chartIndex, Legend legend, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, legend, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<LegendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update chart legend (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param legend  (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPostWorksheetChartLegendAsync(String name, String sheetName, Integer chartIndex, Legend legend, String folder, String storage, final ApiCallback<LegendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, legend, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsPostWorksheetChartTitle
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPostWorksheetChartTitleCall(String name, String sheetName, Integer chartIndex, Title title, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = title;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsPostWorksheetChartTitleValidateBeforeCall(String name, String sheetName, Integer chartIndex, Title title, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsPostWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsPostWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsPostWorksheetChartTitle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartTitleCall(name, sheetName, chartIndex, title, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update chart title
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return TitleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TitleResponse cellsChartsPostWorksheetChartTitle(String name, String sheetName, Integer chartIndex, Title title, String folder, String storage) throws ApiException {
        ApiResponse<TitleResponse> resp = cellsChartsPostWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, title, folder, storage);
        return resp.getData();
    }

    /**
     * Update chart title
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;TitleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TitleResponse> cellsChartsPostWorksheetChartTitleWithHttpInfo(String name, String sheetName, Integer chartIndex, Title title, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, title, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<TitleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update chart title (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPostWorksheetChartTitleAsync(String name, String sheetName, Integer chartIndex, Title title, String folder, String storage, final ApiCallback<TitleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsPostWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, title, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TitleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsPutWorksheetAddChart
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param chartType Chart type, please refer property Type in chart resource. (required)
     * @param upperLeftRow New chart upper left row. (optional, default to 0)
     * @param upperLeftColumn New chart upperleft column. (optional, default to 0)
     * @param lowerRightRow New chart lower right row. (optional, default to 0)
     * @param lowerRightColumn New chart lower right column. (optional, default to 0)
     * @param area Specifies values from which to plot the data series.  (optional)
     * @param isVertical Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)
     * @param categoryData Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)
     * @param isAutoGetSerialName Specifies whether auto update serial name.  (optional, default to true)
     * @param title Specifies chart title name. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPutWorksheetAddChartCall(String name, String sheetName, String chartType, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String area, Boolean isVertical, String categoryData, Boolean isAutoGetSerialName, String title, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (chartType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "chartType", chartType));
        if (upperLeftRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftRow", upperLeftRow));
        if (upperLeftColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftColumn", upperLeftColumn));
        if (lowerRightRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lowerRightRow", lowerRightRow));
        if (lowerRightColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lowerRightColumn", lowerRightColumn));
        if (area != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "area", area));
        if (isVertical != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isVertical", isVertical));
        if (categoryData != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryData", categoryData));
        if (isAutoGetSerialName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "isAutoGetSerialName", isAutoGetSerialName));
        if (title != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "title", title));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsPutWorksheetAddChartValidateBeforeCall(String name, String sheetName, String chartType, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String area, Boolean isVertical, String categoryData, Boolean isAutoGetSerialName, String title, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsPutWorksheetAddChart(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsPutWorksheetAddChart(Async)");
        }
        
        // verify the required parameter 'chartType' is set
        if (chartType == null) {
            throw new ApiException("Missing the required parameter 'chartType' when calling cellsChartsPutWorksheetAddChart(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsPutWorksheetAddChartCall(name, sheetName, chartType, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, area, isVertical, categoryData, isAutoGetSerialName, title, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add new chart to worksheet.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param chartType Chart type, please refer property Type in chart resource. (required)
     * @param upperLeftRow New chart upper left row. (optional, default to 0)
     * @param upperLeftColumn New chart upperleft column. (optional, default to 0)
     * @param lowerRightRow New chart lower right row. (optional, default to 0)
     * @param lowerRightColumn New chart lower right column. (optional, default to 0)
     * @param area Specifies values from which to plot the data series.  (optional)
     * @param isVertical Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)
     * @param categoryData Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)
     * @param isAutoGetSerialName Specifies whether auto update serial name.  (optional, default to true)
     * @param title Specifies chart title name. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ChartsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChartsResponse cellsChartsPutWorksheetAddChart(String name, String sheetName, String chartType, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String area, Boolean isVertical, String categoryData, Boolean isAutoGetSerialName, String title, String folder, String storage) throws ApiException {
        ApiResponse<ChartsResponse> resp = cellsChartsPutWorksheetAddChartWithHttpInfo(name, sheetName, chartType, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, area, isVertical, categoryData, isAutoGetSerialName, title, folder, storage);
        return resp.getData();
    }

    /**
     * Add new chart to worksheet.
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param chartType Chart type, please refer property Type in chart resource. (required)
     * @param upperLeftRow New chart upper left row. (optional, default to 0)
     * @param upperLeftColumn New chart upperleft column. (optional, default to 0)
     * @param lowerRightRow New chart lower right row. (optional, default to 0)
     * @param lowerRightColumn New chart lower right column. (optional, default to 0)
     * @param area Specifies values from which to plot the data series.  (optional)
     * @param isVertical Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)
     * @param categoryData Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)
     * @param isAutoGetSerialName Specifies whether auto update serial name.  (optional, default to true)
     * @param title Specifies chart title name. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ChartsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChartsResponse> cellsChartsPutWorksheetAddChartWithHttpInfo(String name, String sheetName, String chartType, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String area, Boolean isVertical, String categoryData, Boolean isAutoGetSerialName, String title, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsPutWorksheetAddChartValidateBeforeCall(name, sheetName, chartType, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, area, isVertical, categoryData, isAutoGetSerialName, title, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ChartsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new chart to worksheet. (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName The worksheet name. (required)
     * @param chartType Chart type, please refer property Type in chart resource. (required)
     * @param upperLeftRow New chart upper left row. (optional, default to 0)
     * @param upperLeftColumn New chart upperleft column. (optional, default to 0)
     * @param lowerRightRow New chart lower right row. (optional, default to 0)
     * @param lowerRightColumn New chart lower right column. (optional, default to 0)
     * @param area Specifies values from which to plot the data series.  (optional)
     * @param isVertical Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)
     * @param categoryData Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)
     * @param isAutoGetSerialName Specifies whether auto update serial name.  (optional, default to true)
     * @param title Specifies chart title name. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPutWorksheetAddChartAsync(String name, String sheetName, String chartType, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String area, Boolean isVertical, String categoryData, Boolean isAutoGetSerialName, String title, String folder, String storage, final ApiCallback<ChartsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsPutWorksheetAddChartValidateBeforeCall(name, sheetName, chartType, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, area, isVertical, categoryData, isAutoGetSerialName, title, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChartsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsPutWorksheetChartLegend
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPutWorksheetChartLegendCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsPutWorksheetChartLegendValidateBeforeCall(String name, String sheetName, Integer chartIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsPutWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsPutWorksheetChartLegend(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsPutWorksheetChartLegend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsPutWorksheetChartLegendCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Show legend in chart
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsChartsPutWorksheetChartLegend(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsChartsPutWorksheetChartLegendWithHttpInfo(name, sheetName, chartIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Show legend in chart
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsChartsPutWorksheetChartLegendWithHttpInfo(String name, String sheetName, Integer chartIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsPutWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show legend in chart (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPutWorksheetChartLegendAsync(String name, String sheetName, Integer chartIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsPutWorksheetChartLegendValidateBeforeCall(name, sheetName, chartIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsChartsPutWorksheetChartTitle
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPutWorksheetChartTitleCall(String name, String sheetName, Integer chartIndex, Title title, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = title;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "chartIndex" + "\\}", apiClient.escapeString(chartIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsChartsPutWorksheetChartTitleValidateBeforeCall(String name, String sheetName, Integer chartIndex, Title title, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsChartsPutWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsChartsPutWorksheetChartTitle(Async)");
        }
        
        // verify the required parameter 'chartIndex' is set
        if (chartIndex == null) {
            throw new ApiException("Missing the required parameter 'chartIndex' when calling cellsChartsPutWorksheetChartTitle(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsChartsPutWorksheetChartTitleCall(name, sheetName, chartIndex, title, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add chart title / Set chart title visible
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return TitleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TitleResponse cellsChartsPutWorksheetChartTitle(String name, String sheetName, Integer chartIndex, Title title, String folder, String storage) throws ApiException {
        ApiResponse<TitleResponse> resp = cellsChartsPutWorksheetChartTitleWithHttpInfo(name, sheetName, chartIndex, title, folder, storage);
        return resp.getData();
    }

    /**
     * Add chart title / Set chart title visible
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;TitleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TitleResponse> cellsChartsPutWorksheetChartTitleWithHttpInfo(String name, String sheetName, Integer chartIndex, Title title, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsChartsPutWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, title, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<TitleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add chart title / Set chart title visible (asynchronously)
     * 
     * @param name Workbook name. (required)
     * @param sheetName Worksheet name. (required)
     * @param chartIndex The chart index. (required)
     * @param title Chart title. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsChartsPutWorksheetChartTitleAsync(String name, String sheetName, Integer chartIndex, Title title, String folder, String storage, final ApiCallback<TitleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsChartsPutWorksheetChartTitleValidateBeforeCall(name, sheetName, chartIndex, title, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TitleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
