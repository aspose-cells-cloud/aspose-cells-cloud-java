/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.aspose.cloud.cells.model.Picture;
import com.aspose.cloud.cells.model.PictureResponse;
import com.aspose.cloud.cells.model.PicturesResponse;
import com.aspose.cloud.cells.model.SaaSposeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsPicturesApi {
    private ApiClient apiClient;

    public CellsPicturesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsPicturesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsPicturesDeleteWorksheetPicture
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param pictureIndex Picture index (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesDeleteWorksheetPictureCall(String name, String sheetName, Integer pictureIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pictureIndex" + "\\}", apiClient.escapeString(pictureIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPicturesDeleteWorksheetPictureValidateBeforeCall(String name, String sheetName, Integer pictureIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPicturesDeleteWorksheetPicture(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPicturesDeleteWorksheetPicture(Async)");
        }
        
        // verify the required parameter 'pictureIndex' is set
        if (pictureIndex == null) {
            throw new ApiException("Missing the required parameter 'pictureIndex' when calling cellsPicturesDeleteWorksheetPicture(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPicturesDeleteWorksheetPictureCall(name, sheetName, pictureIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a picture object in worksheet
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param pictureIndex Picture index (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPicturesDeleteWorksheetPicture(String name, String sheetName, Integer pictureIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPicturesDeleteWorksheetPictureWithHttpInfo(name, sheetName, pictureIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Delete a picture object in worksheet
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param pictureIndex Picture index (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPicturesDeleteWorksheetPictureWithHttpInfo(String name, String sheetName, Integer pictureIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPicturesDeleteWorksheetPictureValidateBeforeCall(name, sheetName, pictureIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a picture object in worksheet (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param pictureIndex Picture index (required)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesDeleteWorksheetPictureAsync(String name, String sheetName, Integer pictureIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPicturesDeleteWorksheetPictureValidateBeforeCall(name, sheetName, pictureIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPicturesDeleteWorksheetPictures
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesDeleteWorksheetPicturesCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPicturesDeleteWorksheetPicturesValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPicturesDeleteWorksheetPictures(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPicturesDeleteWorksheetPictures(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPicturesDeleteWorksheetPicturesCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete all pictures in worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPicturesDeleteWorksheetPictures(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPicturesDeleteWorksheetPicturesWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Delete all pictures in worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPicturesDeleteWorksheetPicturesWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPicturesDeleteWorksheetPicturesValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all pictures in worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesDeleteWorksheetPicturesAsync(String name, String sheetName, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPicturesDeleteWorksheetPicturesValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPicturesGetWorksheetPicture
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture index. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesGetWorksheetPictureCall(String name, String sheetName, Integer pictureIndex, String format, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pictureIndex" + "\\}", apiClient.escapeString(pictureIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPicturesGetWorksheetPictureValidateBeforeCall(String name, String sheetName, Integer pictureIndex, String format, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPicturesGetWorksheetPicture(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPicturesGetWorksheetPicture(Async)");
        }
        
        // verify the required parameter 'pictureIndex' is set
        if (pictureIndex == null) {
            throw new ApiException("Missing the required parameter 'pictureIndex' when calling cellsPicturesGetWorksheetPicture(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPicturesGetWorksheetPictureCall(name, sheetName, pictureIndex, format, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * GRead worksheet picture by number.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture index. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File cellsPicturesGetWorksheetPicture(String name, String sheetName, Integer pictureIndex, String format, String folder, String storage) throws ApiException {
        ApiResponse<File> resp = cellsPicturesGetWorksheetPictureWithHttpInfo(name, sheetName, pictureIndex, format, folder, storage);
        return resp.getData();
    }

    /**
     * GRead worksheet picture by number.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture index. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> cellsPicturesGetWorksheetPictureWithHttpInfo(String name, String sheetName, Integer pictureIndex, String format, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPicturesGetWorksheetPictureValidateBeforeCall(name, sheetName, pictureIndex, format, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GRead worksheet picture by number. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture index. (required)
     * @param format The exported object format. (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesGetWorksheetPictureAsync(String name, String sheetName, Integer pictureIndex, String format, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPicturesGetWorksheetPictureValidateBeforeCall(name, sheetName, pictureIndex, format, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPicturesGetWorksheetPictures
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesGetWorksheetPicturesCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPicturesGetWorksheetPicturesValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPicturesGetWorksheetPictures(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPicturesGetWorksheetPictures(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPicturesGetWorksheetPicturesCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read worksheet pictures.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return PicturesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PicturesResponse cellsPicturesGetWorksheetPictures(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<PicturesResponse> resp = cellsPicturesGetWorksheetPicturesWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Read worksheet pictures.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;PicturesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PicturesResponse> cellsPicturesGetWorksheetPicturesWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPicturesGetWorksheetPicturesValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<PicturesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read worksheet pictures. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesGetWorksheetPicturesAsync(String name, String sheetName, String folder, String storage, final ApiCallback<PicturesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPicturesGetWorksheetPicturesValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PicturesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPicturesPostWorksheetPicture
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture&#39;s index. (required)
     * @param picture Picture object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesPostWorksheetPictureCall(String name, String sheetName, Integer pictureIndex, Picture picture, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = picture;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "pictureIndex" + "\\}", apiClient.escapeString(pictureIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPicturesPostWorksheetPictureValidateBeforeCall(String name, String sheetName, Integer pictureIndex, Picture picture, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPicturesPostWorksheetPicture(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPicturesPostWorksheetPicture(Async)");
        }
        
        // verify the required parameter 'pictureIndex' is set
        if (pictureIndex == null) {
            throw new ApiException("Missing the required parameter 'pictureIndex' when calling cellsPicturesPostWorksheetPicture(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPicturesPostWorksheetPictureCall(name, sheetName, pictureIndex, picture, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update worksheet picture by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture&#39;s index. (required)
     * @param picture Picture object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return PictureResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PictureResponse cellsPicturesPostWorksheetPicture(String name, String sheetName, Integer pictureIndex, Picture picture, String folder, String storage) throws ApiException {
        ApiResponse<PictureResponse> resp = cellsPicturesPostWorksheetPictureWithHttpInfo(name, sheetName, pictureIndex, picture, folder, storage);
        return resp.getData();
    }

    /**
     * Update worksheet picture by index.
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture&#39;s index. (required)
     * @param picture Picture object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;PictureResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PictureResponse> cellsPicturesPostWorksheetPictureWithHttpInfo(String name, String sheetName, Integer pictureIndex, Picture picture, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPicturesPostWorksheetPictureValidateBeforeCall(name, sheetName, pictureIndex, picture, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<PictureResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update worksheet picture by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName Worksheet name. (required)
     * @param pictureIndex The picture&#39;s index. (required)
     * @param picture Picture object (optional)
     * @param folder The document folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesPostWorksheetPictureAsync(String name, String sheetName, Integer pictureIndex, Picture picture, String folder, String storage, final ApiCallback<PictureResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPicturesPostWorksheetPictureValidateBeforeCall(name, sheetName, pictureIndex, picture, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PictureResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPicturesPutWorksheetAddPicture
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param picture Pictute object (optional)
     * @param upperLeftRow The image upper left row. (optional, default to 0)
     * @param upperLeftColumn The image upper left column. (optional, default to 0)
     * @param lowerRightRow The image low right row. (optional, default to 0)
     * @param lowerRightColumn The image low right column. (optional, default to 0)
     * @param picturePath The picture path, if not provided the picture data is inspected in the request body. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesPutWorksheetAddPictureCall(String name, String sheetName, Picture picture, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String picturePath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = picture;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/pictures"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (upperLeftRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftRow", upperLeftRow));
        if (upperLeftColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "upperLeftColumn", upperLeftColumn));
        if (lowerRightRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lowerRightRow", lowerRightRow));
        if (lowerRightColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lowerRightColumn", lowerRightColumn));
        if (picturePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "picturePath", picturePath));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPicturesPutWorksheetAddPictureValidateBeforeCall(String name, String sheetName, Picture picture, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String picturePath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPicturesPutWorksheetAddPicture(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPicturesPutWorksheetAddPicture(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPicturesPutWorksheetAddPictureCall(name, sheetName, picture, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, picturePath, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new worksheet picture.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param picture Pictute object (optional)
     * @param upperLeftRow The image upper left row. (optional, default to 0)
     * @param upperLeftColumn The image upper left column. (optional, default to 0)
     * @param lowerRightRow The image low right row. (optional, default to 0)
     * @param lowerRightColumn The image low right column. (optional, default to 0)
     * @param picturePath The picture path, if not provided the picture data is inspected in the request body. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return PicturesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PicturesResponse cellsPicturesPutWorksheetAddPicture(String name, String sheetName, Picture picture, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String picturePath, String folder, String storage) throws ApiException {
        ApiResponse<PicturesResponse> resp = cellsPicturesPutWorksheetAddPictureWithHttpInfo(name, sheetName, picture, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, picturePath, folder, storage);
        return resp.getData();
    }

    /**
     * Add a new worksheet picture.
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param picture Pictute object (optional)
     * @param upperLeftRow The image upper left row. (optional, default to 0)
     * @param upperLeftColumn The image upper left column. (optional, default to 0)
     * @param lowerRightRow The image low right row. (optional, default to 0)
     * @param lowerRightColumn The image low right column. (optional, default to 0)
     * @param picturePath The picture path, if not provided the picture data is inspected in the request body. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;PicturesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PicturesResponse> cellsPicturesPutWorksheetAddPictureWithHttpInfo(String name, String sheetName, Picture picture, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String picturePath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPicturesPutWorksheetAddPictureValidateBeforeCall(name, sheetName, picture, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, picturePath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<PicturesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a new worksheet picture. (asynchronously)
     * 
     * @param name The workbook name. (required)
     * @param sheetName The worsheet name. (required)
     * @param picture Pictute object (optional)
     * @param upperLeftRow The image upper left row. (optional, default to 0)
     * @param upperLeftColumn The image upper left column. (optional, default to 0)
     * @param lowerRightRow The image low right row. (optional, default to 0)
     * @param lowerRightColumn The image low right column. (optional, default to 0)
     * @param picturePath The picture path, if not provided the picture data is inspected in the request body. (optional)
     * @param folder The workbook folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPicturesPutWorksheetAddPictureAsync(String name, String sheetName, Picture picture, Integer upperLeftRow, Integer upperLeftColumn, Integer lowerRightRow, Integer lowerRightColumn, String picturePath, String folder, String storage, final ApiCallback<PicturesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPicturesPutWorksheetAddPictureValidateBeforeCall(name, sheetName, picture, upperLeftRow, upperLeftColumn, lowerRightRow, lowerRightColumn, picturePath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PicturesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
