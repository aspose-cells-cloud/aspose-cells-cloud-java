/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.HorizontalPageBreakResponse;
import com.aspose.cloud.cells.model.HorizontalPageBreaksResponse;
import com.aspose.cloud.cells.model.SaaSposeResponse;
import com.aspose.cloud.cells.model.VerticalPageBreakResponse;
import com.aspose.cloud.cells.model.VerticalPageBreaksResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsPageBreaksApi {
    private ApiClient apiClient;

    public CellsPageBreaksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsPageBreaksApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsPageBreaksDeleteHorizontalPageBreak
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteHorizontalPageBreakCall(String name, String sheetName, Integer index, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksDeleteHorizontalPageBreakValidateBeforeCall(String name, String sheetName, Integer index, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksDeleteHorizontalPageBreak(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksDeleteHorizontalPageBreak(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsPageBreaksDeleteHorizontalPageBreak(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteHorizontalPageBreakCall(name, sheetName, index, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPageBreaksDeleteHorizontalPageBreak(String name, String sheetName, Integer index, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPageBreaksDeleteHorizontalPageBreakWithHttpInfo(name, sheetName, index, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPageBreaksDeleteHorizontalPageBreakWithHttpInfo(String name, String sheetName, Integer index, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteHorizontalPageBreakValidateBeforeCall(name, sheetName, index, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteHorizontalPageBreakAsync(String name, String sheetName, Integer index, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksDeleteHorizontalPageBreakValidateBeforeCall(name, sheetName, index, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksDeleteHorizontalPageBreaks
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteHorizontalPageBreaksCall(String name, String sheetName, Integer row, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksDeleteHorizontalPageBreaksValidateBeforeCall(String name, String sheetName, Integer row, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksDeleteHorizontalPageBreaks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksDeleteHorizontalPageBreaks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteHorizontalPageBreaksCall(name, sheetName, row, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPageBreaksDeleteHorizontalPageBreaks(String name, String sheetName, Integer row, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPageBreaksDeleteHorizontalPageBreaksWithHttpInfo(name, sheetName, row, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPageBreaksDeleteHorizontalPageBreaksWithHttpInfo(String name, String sheetName, Integer row, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteHorizontalPageBreaksValidateBeforeCall(name, sheetName, row, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param row  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteHorizontalPageBreaksAsync(String name, String sheetName, Integer row, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksDeleteHorizontalPageBreaksValidateBeforeCall(name, sheetName, row, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksDeleteVerticalPageBreak
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteVerticalPageBreakCall(String name, String sheetName, Integer index, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksDeleteVerticalPageBreakValidateBeforeCall(String name, String sheetName, Integer index, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksDeleteVerticalPageBreak(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksDeleteVerticalPageBreak(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsPageBreaksDeleteVerticalPageBreak(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteVerticalPageBreakCall(name, sheetName, index, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPageBreaksDeleteVerticalPageBreak(String name, String sheetName, Integer index, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPageBreaksDeleteVerticalPageBreakWithHttpInfo(name, sheetName, index, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPageBreaksDeleteVerticalPageBreakWithHttpInfo(String name, String sheetName, Integer index, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteVerticalPageBreakValidateBeforeCall(name, sheetName, index, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteVerticalPageBreakAsync(String name, String sheetName, Integer index, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksDeleteVerticalPageBreakValidateBeforeCall(name, sheetName, index, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksDeleteVerticalPageBreaks
     * @param name  (required)
     * @param sheetName  (required)
     * @param column  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteVerticalPageBreaksCall(String name, String sheetName, Integer column, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksDeleteVerticalPageBreaksValidateBeforeCall(String name, String sheetName, Integer column, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksDeleteVerticalPageBreaks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksDeleteVerticalPageBreaks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteVerticalPageBreaksCall(name, sheetName, column, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param column  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPageBreaksDeleteVerticalPageBreaks(String name, String sheetName, Integer column, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPageBreaksDeleteVerticalPageBreaksWithHttpInfo(name, sheetName, column, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param column  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPageBreaksDeleteVerticalPageBreaksWithHttpInfo(String name, String sheetName, Integer column, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksDeleteVerticalPageBreaksValidateBeforeCall(name, sheetName, column, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param column  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksDeleteVerticalPageBreaksAsync(String name, String sheetName, Integer column, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksDeleteVerticalPageBreaksValidateBeforeCall(name, sheetName, column, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksGetHorizontalPageBreak
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetHorizontalPageBreakCall(String name, String sheetName, Integer index, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksGetHorizontalPageBreakValidateBeforeCall(String name, String sheetName, Integer index, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksGetHorizontalPageBreak(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksGetHorizontalPageBreak(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsPageBreaksGetHorizontalPageBreak(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksGetHorizontalPageBreakCall(name, sheetName, index, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return HorizontalPageBreakResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HorizontalPageBreakResponse cellsPageBreaksGetHorizontalPageBreak(String name, String sheetName, Integer index, String folder, String storage) throws ApiException {
        ApiResponse<HorizontalPageBreakResponse> resp = cellsPageBreaksGetHorizontalPageBreakWithHttpInfo(name, sheetName, index, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;HorizontalPageBreakResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HorizontalPageBreakResponse> cellsPageBreaksGetHorizontalPageBreakWithHttpInfo(String name, String sheetName, Integer index, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksGetHorizontalPageBreakValidateBeforeCall(name, sheetName, index, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<HorizontalPageBreakResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetHorizontalPageBreakAsync(String name, String sheetName, Integer index, String folder, String storage, final ApiCallback<HorizontalPageBreakResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksGetHorizontalPageBreakValidateBeforeCall(name, sheetName, index, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HorizontalPageBreakResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksGetHorizontalPageBreaks
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetHorizontalPageBreaksCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksGetHorizontalPageBreaksValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksGetHorizontalPageBreaks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksGetHorizontalPageBreaks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksGetHorizontalPageBreaksCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return HorizontalPageBreaksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HorizontalPageBreaksResponse cellsPageBreaksGetHorizontalPageBreaks(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<HorizontalPageBreaksResponse> resp = cellsPageBreaksGetHorizontalPageBreaksWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;HorizontalPageBreaksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HorizontalPageBreaksResponse> cellsPageBreaksGetHorizontalPageBreaksWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksGetHorizontalPageBreaksValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<HorizontalPageBreaksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetHorizontalPageBreaksAsync(String name, String sheetName, String folder, String storage, final ApiCallback<HorizontalPageBreaksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksGetHorizontalPageBreaksValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HorizontalPageBreaksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksGetVerticalPageBreak
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetVerticalPageBreakCall(String name, String sheetName, Integer index, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksGetVerticalPageBreakValidateBeforeCall(String name, String sheetName, Integer index, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksGetVerticalPageBreak(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksGetVerticalPageBreak(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling cellsPageBreaksGetVerticalPageBreak(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksGetVerticalPageBreakCall(name, sheetName, index, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return VerticalPageBreakResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerticalPageBreakResponse cellsPageBreaksGetVerticalPageBreak(String name, String sheetName, Integer index, String folder, String storage) throws ApiException {
        ApiResponse<VerticalPageBreakResponse> resp = cellsPageBreaksGetVerticalPageBreakWithHttpInfo(name, sheetName, index, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;VerticalPageBreakResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerticalPageBreakResponse> cellsPageBreaksGetVerticalPageBreakWithHttpInfo(String name, String sheetName, Integer index, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksGetVerticalPageBreakValidateBeforeCall(name, sheetName, index, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<VerticalPageBreakResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param index  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetVerticalPageBreakAsync(String name, String sheetName, Integer index, String folder, String storage, final ApiCallback<VerticalPageBreakResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksGetVerticalPageBreakValidateBeforeCall(name, sheetName, index, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerticalPageBreakResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksGetVerticalPageBreaks
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetVerticalPageBreaksCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksGetVerticalPageBreaksValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksGetVerticalPageBreaks(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksGetVerticalPageBreaks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksGetVerticalPageBreaksCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return VerticalPageBreaksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerticalPageBreaksResponse cellsPageBreaksGetVerticalPageBreaks(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<VerticalPageBreaksResponse> resp = cellsPageBreaksGetVerticalPageBreaksWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;VerticalPageBreaksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerticalPageBreaksResponse> cellsPageBreaksGetVerticalPageBreaksWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksGetVerticalPageBreaksValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<VerticalPageBreaksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksGetVerticalPageBreaksAsync(String name, String sheetName, String folder, String storage, final ApiCallback<VerticalPageBreaksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksGetVerticalPageBreaksValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerticalPageBreaksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksPutHorizontalPageBreak
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param row  (optional)
     * @param column  (optional)
     * @param startColumn  (optional)
     * @param endColumn  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksPutHorizontalPageBreakCall(String name, String sheetName, String cellname, Integer row, Integer column, Integer startColumn, Integer endColumn, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/horizontalpagebreaks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellname", cellname));
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (endColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endColumn", endColumn));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksPutHorizontalPageBreakValidateBeforeCall(String name, String sheetName, String cellname, Integer row, Integer column, Integer startColumn, Integer endColumn, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksPutHorizontalPageBreak(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksPutHorizontalPageBreak(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksPutHorizontalPageBreakCall(name, sheetName, cellname, row, column, startColumn, endColumn, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param row  (optional)
     * @param column  (optional)
     * @param startColumn  (optional)
     * @param endColumn  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPageBreaksPutHorizontalPageBreak(String name, String sheetName, String cellname, Integer row, Integer column, Integer startColumn, Integer endColumn, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPageBreaksPutHorizontalPageBreakWithHttpInfo(name, sheetName, cellname, row, column, startColumn, endColumn, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param row  (optional)
     * @param column  (optional)
     * @param startColumn  (optional)
     * @param endColumn  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPageBreaksPutHorizontalPageBreakWithHttpInfo(String name, String sheetName, String cellname, Integer row, Integer column, Integer startColumn, Integer endColumn, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksPutHorizontalPageBreakValidateBeforeCall(name, sheetName, cellname, row, column, startColumn, endColumn, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param row  (optional)
     * @param column  (optional)
     * @param startColumn  (optional)
     * @param endColumn  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksPutHorizontalPageBreakAsync(String name, String sheetName, String cellname, Integer row, Integer column, Integer startColumn, Integer endColumn, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksPutHorizontalPageBreakValidateBeforeCall(name, sheetName, cellname, row, column, startColumn, endColumn, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsPageBreaksPutVerticalPageBreak
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param column  (optional)
     * @param row  (optional)
     * @param startRow  (optional)
     * @param endRow  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksPutVerticalPageBreakCall(String name, String sheetName, String cellname, Integer column, Integer row, Integer startRow, Integer endRow, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/verticalpagebreaks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cellname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cellname", cellname));
        if (column != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "column", column));
        if (row != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "row", row));
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (endRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endRow", endRow));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsPageBreaksPutVerticalPageBreakValidateBeforeCall(String name, String sheetName, String cellname, Integer column, Integer row, Integer startRow, Integer endRow, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsPageBreaksPutVerticalPageBreak(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsPageBreaksPutVerticalPageBreak(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsPageBreaksPutVerticalPageBreakCall(name, sheetName, cellname, column, row, startRow, endRow, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param column  (optional)
     * @param row  (optional)
     * @param startRow  (optional)
     * @param endRow  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsPageBreaksPutVerticalPageBreak(String name, String sheetName, String cellname, Integer column, Integer row, Integer startRow, Integer endRow, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsPageBreaksPutVerticalPageBreakWithHttpInfo(name, sheetName, cellname, column, row, startRow, endRow, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param column  (optional)
     * @param row  (optional)
     * @param startRow  (optional)
     * @param endRow  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsPageBreaksPutVerticalPageBreakWithHttpInfo(String name, String sheetName, String cellname, Integer column, Integer row, Integer startRow, Integer endRow, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsPageBreaksPutVerticalPageBreakValidateBeforeCall(name, sheetName, cellname, column, row, startRow, endRow, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param cellname  (optional)
     * @param column  (optional)
     * @param row  (optional)
     * @param startRow  (optional)
     * @param endRow  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsPageBreaksPutVerticalPageBreakAsync(String name, String sheetName, String cellname, Integer column, Integer row, Integer startRow, Integer endRow, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsPageBreaksPutVerticalPageBreakValidateBeforeCall(name, sheetName, cellname, column, row, startRow, endRow, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
