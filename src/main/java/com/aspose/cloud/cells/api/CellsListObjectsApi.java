/*
 * Web API Swagger specification
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.cells.api;

import com.aspose.cloud.cells.client.ApiCallback;
import com.aspose.cloud.cells.client.ApiClient;
import com.aspose.cloud.cells.client.ApiException;
import com.aspose.cloud.cells.client.ApiResponse;
import com.aspose.cloud.cells.client.Configuration;
import com.aspose.cloud.cells.client.Pair;
import com.aspose.cloud.cells.client.ProgressRequestBody;
import com.aspose.cloud.cells.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.cloud.cells.model.CreatePivotTableRequest;
import com.aspose.cloud.cells.model.DataSorter;
import com.aspose.cloud.cells.model.ListObject;
import com.aspose.cloud.cells.model.ListObjectResponse;
import com.aspose.cloud.cells.model.ListObjectsResponse;
import com.aspose.cloud.cells.model.SaaSposeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CellsListObjectsApi {
    private ApiClient apiClient;

    public CellsListObjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CellsListObjectsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cellsListObjectsDeleteWorksheetListObject
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex List object index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsDeleteWorksheetListObjectCall(String name, String sheetName, Integer listObjectIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "listObjectIndex" + "\\}", apiClient.escapeString(listObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsDeleteWorksheetListObjectValidateBeforeCall(String name, String sheetName, Integer listObjectIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsDeleteWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsDeleteWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'listObjectIndex' is set
        if (listObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'listObjectIndex' when calling cellsListObjectsDeleteWorksheetListObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsDeleteWorksheetListObjectCall(name, sheetName, listObjectIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet list object by index
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex List object index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsListObjectsDeleteWorksheetListObject(String name, String sheetName, Integer listObjectIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsListObjectsDeleteWorksheetListObjectWithHttpInfo(name, sheetName, listObjectIndex, folder, storage);
        return resp.getData();
    }

    /**
     * Delete worksheet list object by index
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex List object index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsListObjectsDeleteWorksheetListObjectWithHttpInfo(String name, String sheetName, Integer listObjectIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsDeleteWorksheetListObjectValidateBeforeCall(name, sheetName, listObjectIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet list object by index (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex List object index (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsDeleteWorksheetListObjectAsync(String name, String sheetName, Integer listObjectIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsDeleteWorksheetListObjectValidateBeforeCall(name, sheetName, listObjectIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsDeleteWorksheetListObjects
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsDeleteWorksheetListObjectsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsDeleteWorksheetListObjectsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsDeleteWorksheetListObjects(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsDeleteWorksheetListObjects(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsDeleteWorksheetListObjectsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete worksheet list objects
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsListObjectsDeleteWorksheetListObjects(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsListObjectsDeleteWorksheetListObjectsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Delete worksheet list objects
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsListObjectsDeleteWorksheetListObjectsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsDeleteWorksheetListObjectsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete worksheet list objects (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsDeleteWorksheetListObjectsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsDeleteWorksheetListObjectsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsGetWorksheetListObject
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listobjectindex list object index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsGetWorksheetListObjectCall(String name, String sheetName, Integer listobjectindex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listobjectindex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "listobjectindex" + "\\}", apiClient.escapeString(listobjectindex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsGetWorksheetListObjectValidateBeforeCall(String name, String sheetName, Integer listobjectindex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsGetWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsGetWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'listobjectindex' is set
        if (listobjectindex == null) {
            throw new ApiException("Missing the required parameter 'listobjectindex' when calling cellsListObjectsGetWorksheetListObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsGetWorksheetListObjectCall(name, sheetName, listobjectindex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet list object info by index.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listobjectindex list object index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ListObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListObjectResponse cellsListObjectsGetWorksheetListObject(String name, String sheetName, Integer listobjectindex, String folder, String storage) throws ApiException {
        ApiResponse<ListObjectResponse> resp = cellsListObjectsGetWorksheetListObjectWithHttpInfo(name, sheetName, listobjectindex, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet list object info by index.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listobjectindex list object index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ListObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListObjectResponse> cellsListObjectsGetWorksheetListObjectWithHttpInfo(String name, String sheetName, Integer listobjectindex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsGetWorksheetListObjectValidateBeforeCall(name, sheetName, listobjectindex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ListObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet list object info by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listobjectindex list object index. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsGetWorksheetListObjectAsync(String name, String sheetName, Integer listobjectindex, String folder, String storage, final ApiCallback<ListObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsGetWorksheetListObjectValidateBeforeCall(name, sheetName, listobjectindex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsGetWorksheetListObjects
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsGetWorksheetListObjectsCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsGetWorksheetListObjectsValidateBeforeCall(String name, String sheetName, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsGetWorksheetListObjects(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsGetWorksheetListObjects(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsGetWorksheetListObjectsCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get worksheet listobjects info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ListObjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListObjectsResponse cellsListObjectsGetWorksheetListObjects(String name, String sheetName, String folder, String storage) throws ApiException {
        ApiResponse<ListObjectsResponse> resp = cellsListObjectsGetWorksheetListObjectsWithHttpInfo(name, sheetName, folder, storage);
        return resp.getData();
    }

    /**
     * Get worksheet listobjects info.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;ListObjectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListObjectsResponse> cellsListObjectsGetWorksheetListObjectsWithHttpInfo(String name, String sheetName, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsGetWorksheetListObjectsValidateBeforeCall(name, sheetName, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<ListObjectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get worksheet listobjects info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsGetWorksheetListObjectsAsync(String name, String sheetName, String folder, String storage, final ApiCallback<ListObjectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsGetWorksheetListObjectsValidateBeforeCall(name, sheetName, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListObjectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsPostWorksheetListObject
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex list Object index (required)
     * @param listObject listObject dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectCall(String name, String sheetName, Integer listObjectIndex, ListObject listObject, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = listObject;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "listObjectIndex" + "\\}", apiClient.escapeString(listObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectValidateBeforeCall(String name, String sheetName, Integer listObjectIndex, ListObject listObject, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsPostWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsPostWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'listObjectIndex' is set
        if (listObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'listObjectIndex' when calling cellsListObjectsPostWorksheetListObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectCall(name, sheetName, listObjectIndex, listObject, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update  list object 
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex list Object index (required)
     * @param listObject listObject dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsListObjectsPostWorksheetListObject(String name, String sheetName, Integer listObjectIndex, ListObject listObject, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsListObjectsPostWorksheetListObjectWithHttpInfo(name, sheetName, listObjectIndex, listObject, folder, storage);
        return resp.getData();
    }

    /**
     * Update  list object 
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex list Object index (required)
     * @param listObject listObject dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsListObjectsPostWorksheetListObjectWithHttpInfo(String name, String sheetName, Integer listObjectIndex, ListObject listObject, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectValidateBeforeCall(name, sheetName, listObjectIndex, listObject, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update  list object  (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param listObjectIndex list Object index (required)
     * @param listObject listObject dto in request body. (optional)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectAsync(String name, String sheetName, Integer listObjectIndex, ListObject listObject, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectValidateBeforeCall(name, sheetName, listObjectIndex, listObject, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsPostWorksheetListObjectConvertToRange
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectConvertToRangeCall(String name, String sheetName, Integer listObjectIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/ConvertToRange"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "listObjectIndex" + "\\}", apiClient.escapeString(listObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectConvertToRangeValidateBeforeCall(String name, String sheetName, Integer listObjectIndex, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsPostWorksheetListObjectConvertToRange(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsPostWorksheetListObjectConvertToRange(Async)");
        }
        
        // verify the required parameter 'listObjectIndex' is set
        if (listObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'listObjectIndex' when calling cellsListObjectsPostWorksheetListObjectConvertToRange(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectConvertToRangeCall(name, sheetName, listObjectIndex, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsListObjectsPostWorksheetListObjectConvertToRange(String name, String sheetName, Integer listObjectIndex, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsListObjectsPostWorksheetListObjectConvertToRangeWithHttpInfo(name, sheetName, listObjectIndex, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsListObjectsPostWorksheetListObjectConvertToRangeWithHttpInfo(String name, String sheetName, Integer listObjectIndex, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectConvertToRangeValidateBeforeCall(name, sheetName, listObjectIndex, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectConvertToRangeAsync(String name, String sheetName, Integer listObjectIndex, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectConvertToRangeValidateBeforeCall(name, sheetName, listObjectIndex, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsPostWorksheetListObjectSortTable
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param dataSorter  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectSortTableCall(String name, String sheetName, Integer listObjectIndex, DataSorter dataSorter, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dataSorter;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/sort"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "listObjectIndex" + "\\}", apiClient.escapeString(listObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectSortTableValidateBeforeCall(String name, String sheetName, Integer listObjectIndex, DataSorter dataSorter, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsPostWorksheetListObjectSortTable(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsPostWorksheetListObjectSortTable(Async)");
        }
        
        // verify the required parameter 'listObjectIndex' is set
        if (listObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'listObjectIndex' when calling cellsListObjectsPostWorksheetListObjectSortTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectSortTableCall(name, sheetName, listObjectIndex, dataSorter, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param dataSorter  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsListObjectsPostWorksheetListObjectSortTable(String name, String sheetName, Integer listObjectIndex, DataSorter dataSorter, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsListObjectsPostWorksheetListObjectSortTableWithHttpInfo(name, sheetName, listObjectIndex, dataSorter, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param dataSorter  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsListObjectsPostWorksheetListObjectSortTableWithHttpInfo(String name, String sheetName, Integer listObjectIndex, DataSorter dataSorter, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectSortTableValidateBeforeCall(name, sheetName, listObjectIndex, dataSorter, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param dataSorter  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectSortTableAsync(String name, String sheetName, Integer listObjectIndex, DataSorter dataSorter, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectSortTableValidateBeforeCall(name, sheetName, listObjectIndex, dataSorter, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param destsheetName  (required)
     * @param request  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableCall(String name, String sheetName, Integer listObjectIndex, String destsheetName, CreatePivotTableRequest request, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects/{listObjectIndex}/SummarizeWithPivotTable"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()))
            .replaceAll("\\{" + "listObjectIndex" + "\\}", apiClient.escapeString(listObjectIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (destsheetName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "destsheetName", destsheetName));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableValidateBeforeCall(String name, String sheetName, Integer listObjectIndex, String destsheetName, CreatePivotTableRequest request, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable(Async)");
        }
        
        // verify the required parameter 'listObjectIndex' is set
        if (listObjectIndex == null) {
            throw new ApiException("Missing the required parameter 'listObjectIndex' when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable(Async)");
        }
        
        // verify the required parameter 'destsheetName' is set
        if (destsheetName == null) {
            throw new ApiException("Missing the required parameter 'destsheetName' when calling cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableCall(name, sheetName, listObjectIndex, destsheetName, request, folder, storage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param destsheetName  (required)
     * @param request  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return SaaSposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SaaSposeResponse cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable(String name, String sheetName, Integer listObjectIndex, String destsheetName, CreatePivotTableRequest request, String folder, String storage) throws ApiException {
        ApiResponse<SaaSposeResponse> resp = cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableWithHttpInfo(name, sheetName, listObjectIndex, destsheetName, request, folder, storage);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param destsheetName  (required)
     * @param request  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @return ApiResponse&lt;SaaSposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SaaSposeResponse> cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableWithHttpInfo(String name, String sheetName, Integer listObjectIndex, String destsheetName, CreatePivotTableRequest request, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableValidateBeforeCall(name, sheetName, listObjectIndex, destsheetName, request, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param sheetName  (required)
     * @param listObjectIndex  (required)
     * @param destsheetName  (required)
     * @param request  (optional)
     * @param folder  (optional)
     * @param storage storage name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableAsync(String name, String sheetName, Integer listObjectIndex, String destsheetName, CreatePivotTableRequest request, String folder, String storage, final ApiCallback<SaaSposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTableValidateBeforeCall(name, sheetName, listObjectIndex, destsheetName, request, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SaaSposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cellsListObjectsPutWorksheetListObject
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row of the list range. (required)
     * @param startColumn The start row of the list range. (required)
     * @param endRow The start row of the list range. (required)
     * @param endColumn The start row of the list range. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param hasHeaders Whether the range has headers. (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPutWorksheetListObjectCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage, Boolean hasHeaders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cells/{name}/worksheets/{sheetName}/listobjects"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "sheetName" + "\\}", apiClient.escapeString(sheetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startRow", startRow));
        if (startColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startColumn", startColumn));
        if (endRow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endRow", endRow));
        if (endColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endColumn", endColumn));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storage", storage));
        if (hasHeaders != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hasHeaders", hasHeaders));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cellsListObjectsPutWorksheetListObjectValidateBeforeCall(String name, String sheetName, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage, Boolean hasHeaders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling cellsListObjectsPutWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling cellsListObjectsPutWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'startRow' is set
        if (startRow == null) {
            throw new ApiException("Missing the required parameter 'startRow' when calling cellsListObjectsPutWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'startColumn' is set
        if (startColumn == null) {
            throw new ApiException("Missing the required parameter 'startColumn' when calling cellsListObjectsPutWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'endRow' is set
        if (endRow == null) {
            throw new ApiException("Missing the required parameter 'endRow' when calling cellsListObjectsPutWorksheetListObject(Async)");
        }
        
        // verify the required parameter 'endColumn' is set
        if (endColumn == null) {
            throw new ApiException("Missing the required parameter 'endColumn' when calling cellsListObjectsPutWorksheetListObject(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cellsListObjectsPutWorksheetListObjectCall(name, sheetName, startRow, startColumn, endRow, endColumn, folder, storage, hasHeaders, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a list object into worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row of the list range. (required)
     * @param startColumn The start row of the list range. (required)
     * @param endRow The start row of the list range. (required)
     * @param endColumn The start row of the list range. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param hasHeaders Whether the range has headers. (optional, default to true)
     * @return ListObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListObjectResponse cellsListObjectsPutWorksheetListObject(String name, String sheetName, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage, Boolean hasHeaders) throws ApiException {
        ApiResponse<ListObjectResponse> resp = cellsListObjectsPutWorksheetListObjectWithHttpInfo(name, sheetName, startRow, startColumn, endRow, endColumn, folder, storage, hasHeaders);
        return resp.getData();
    }

    /**
     * Add a list object into worksheet.
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row of the list range. (required)
     * @param startColumn The start row of the list range. (required)
     * @param endRow The start row of the list range. (required)
     * @param endColumn The start row of the list range. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param hasHeaders Whether the range has headers. (optional, default to true)
     * @return ApiResponse&lt;ListObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListObjectResponse> cellsListObjectsPutWorksheetListObjectWithHttpInfo(String name, String sheetName, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage, Boolean hasHeaders) throws ApiException {
        com.squareup.okhttp.Call call = cellsListObjectsPutWorksheetListObjectValidateBeforeCall(name, sheetName, startRow, startColumn, endRow, endColumn, folder, storage, hasHeaders, null, null);
        Type localVarReturnType = new TypeToken<ListObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a list object into worksheet. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sheetName The worksheet name. (required)
     * @param startRow The start row of the list range. (required)
     * @param startColumn The start row of the list range. (required)
     * @param endRow The start row of the list range. (required)
     * @param endColumn The start row of the list range. (required)
     * @param folder Document&#39;s folder. (optional)
     * @param storage storage name. (optional)
     * @param hasHeaders Whether the range has headers. (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cellsListObjectsPutWorksheetListObjectAsync(String name, String sheetName, Integer startRow, Integer startColumn, Integer endRow, Integer endColumn, String folder, String storage, Boolean hasHeaders, final ApiCallback<ListObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cellsListObjectsPutWorksheetListObjectValidateBeforeCall(name, sheetName, startRow, startColumn, endRow, endColumn, folder, storage, hasHeaders, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
